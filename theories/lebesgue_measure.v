(* mathcomp analysis (c) 2017 Inria and AIST. License: CeCILL-C.              *)
From mathcomp Require Import all_ssreflect ssralg ssrnum ssrint interval.
From mathcomp Require Import finmap.
Require Import boolp reals ereal classical_sets posnum nngnum topology.
Require Import normedtype.
From HB Require Import structures.
Require Import sequences measure csum cardinality.

(******************************************************************************)
(*                        Lebesgue Measure (WIP)                              *)
(*                                                                            *)
(* This file contains a tentative formalization of the Lebesgue measure using *)
(* the Caratheodory's theorem available in measure.v.                         *)
(*                                                                            *)
(* are_measurable_sets G == the set of sets G forms a sigma algebra           *)
(*              s<< G >> == sigma-algebra generated by G                      *)
(*              dynkin G == the set of sets G forms a Dynkin system           *)
(*              d<< G >> == Dynkin system generated by G                      *)
(*           Hahn_ext mu == extension of the measure mu over a ring of sets   *)
(*                          to a measure of the generated sigma algebra       *)
(*                                                                            *)
(*            itv_cplt s == complement of the list of intervals s             *)
(*          itv_diff i j == i \ j where i and j are intervals assuming        *)
(*                          ~ j <= i                                          *)
(*      disjoint_itv i j == intervals i and j are disjoint                    *)
(*    contiguous_itv i j == intervals i and j are contiguous                  *)
(*            lt_itv i j == total ordering of intervals: the left bound of i  *)
(*                          is smaller than the one of j, and if it is equal  *)
(*                          then the right bound of i is smaller than the one *)
(*                          of j                                              *)
(*            le_itv i j := (i = j) \/ lt_itv i j                             *)
(*               ccitv n == the centered closed interval [-n, n]              *)
(*                                                                            *)
(*    sorted_decompose s == turns a *sorted* list of intervals s into a list  *)
(*                          of non-overlapping intervals with the same cover  *)
(*           decompose s == turn a list of intervals into a sequence of       *)
(*                          non-overlapping intervals with the same cover     *)
(*                                                                            *)
(*           [sset of s] == the finite union of the list of intervals s       *)
(*                          (a "simple set")                                  *)
(*           Module Sset == simple sets form an algebra of sets               *)
(*                                                                            *)
(*             hlength A == length of the hull of the set of real numbers A   *)
(*           hlengthUitv == (lemma) hlength is additive on intervals          *)
(*                                                                            *)
(*             slength A == measure of the set A when it is a simple set,     *)
(*                          and 0 o.w.                                        *)
(*  slength_sigma_finite == (lemma) slength is sigma-finite                   *)
(*                                                                            *)
(*      nth_interval f k == kth interval in the sequence f of lists of        *)
(*                          intervals                                         *)
(*                                                                            *)
(* The main proof is the proof that slength is sigma-additive. We list up the *)
(* several lemmas that make up this:                                          *)
(*   slength_additive == slength is additive                                  *)
(*   slength_sigma_subadditive_finite_itv == slength is sigma-subadditive     *)
(*     on finite intervals                                                    *)
(*   slength_sigma_additive_finite_itv == slength is additive on finite       *)
(*     intervals                                                              *)
(*   slength_sigma_subadditive_infinite_itv == slength is sigma-subadditive   *)
(*     on infinite intervals                                                  *)
(*   slength_sigma_subadditive_itv == slength is sigma-subadditive on         *)
(*     intervals                                                              *)
(*   slength_sigma_additive_itv == slength is sigma-additive on intervals     *)
(*   slength_semi_sigma_additive == slength is sigma-additive on simple sets  *)
(*                                                                            *)
(*      lebesgue_measure == the Lebesgue measure                              *)
(*                                                                            *)
(*              ps_infty == inductive definition of the powerset              *)
(*                          {0, {-oo}, {+oo}, {-oo,+oo}}                      *)
(*      measurableRbar G == sigma-algebra over \bar R built out the           *)
(*                          measurables G of a sigma-algebra over R           *)
(*     elebesgue_measure == the Lebesgue measure extended to \bar R           *)
(*                                                                            *)
(* The modules RGenOpenRays, RGenClosedRays, RGenOpens provide proofs of      *)
(* between the sigma-algebra generated by list of intervals with              *)
(* sigma-algebras generated by open rays, closed rays, and open intervals.    *)
(*                                                                            *)
(*             sdrop u n := {u_k | k >= n}                                    *)
(*                sups u := [sequence sup (sdrop u n)]_n                      *)
(*                infs u := [sequence inf (sdrop u n)]_n                      *)
(*         lim_{inf,sup} == limit inferior/superior for realType              *)
(*               esups u := [sequence ereal_sup (sdrop u n)]_n                *)
(*               einfs u := [sequence ereal_inf (sdrop u n)]_n                *)
(*   lim_ereal_{inf,sup} == limit inferior/superior for \bar R                *)
(*                                                                            *)
(* This file ends with properties of measurable functions (to be PRed).       *)
(*                                                                            *)
(******************************************************************************)

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.
Import Order.TTheory GRing.Theory Num.Def Num.Theory.
Import numFieldTopology.Exports.

Local Open Scope classical_set_scope.
Local Open Scope ring_scope.
Local Open Scope ereal_scope.

(* NB: PR to MathComp in progress *)
Lemma natr_absz (R : numDomainType) i : `|i|%:R = `|i|%:~R :> R.
Proof. by rewrite -abszE. Qed.
(* /NB: PR to MathComp in progress *)

(* PR just merged to mathcomp's master *)
Lemma ge_pinfty (R : numDomainType) (x : itv_bound R) :
  (+oo <= x)%O = (x == +oo)%O.
Proof. by move: x => [[]|[]]. Qed.

Lemma le_ninfty (R : numDomainType) (x : itv_bound R) :
  (x <= -oo)%O = (x == -oo%O).
Proof. by case: x => // -[]. Qed.

Lemma gt_pinfty (R : numDomainType) (x : itv_bound R) : (+oo%O < x)%O = false.
Proof. by case: x. Qed.

Lemma lt_ninfty (R : numDomainType) (x : itv_bound R) : (x < -oo%O)%O = false.
Proof. by case: x => // -[]. Qed.
(* /PR just merged to mathcomp's master *)

(******************************************************************************)
(*                         lemmas waiting to be PRed                          *)
(******************************************************************************)

Lemma EFin_sum (R : numDomainType) n m (f : nat -> \bar R) :
  (forall i, (n <= i < m)%N -> f i \is a fin_num) ->
  \sum_(n <= i < m) f i = (\sum_(n <= i < m) real_of_extended (f i))%:E.
Proof.
move=> nim; rewrite (@big_morph _ _ (@EFin R) 0 adde) //.
rewrite [LHS]big_nat_cond [RHS]big_nat_cond; apply eq_bigr => i.
by rewrite andbT => /nim fi; rewrite -EFin_real_of_extended.
Qed.

Lemma EFin_inj (R : numDomainType) : injective (@EFin R).
Proof. by move=> a b; case. Qed.

Lemma telescope_sume (R : numDomainType) n m (f : (\bar R)^nat) :
  (forall i, (n <= i <= m)%N -> f i \is a fin_num) ->
  (n <= m)%N ->
  \sum_(n <= k < m) (f k.+1 - f k) = f m - f n.
Proof.
move=> foo nm.
have [g fg] : exists g : nat -> R, forall i, (n <= i <= m)%N -> f i = (g i)%:E.
  exists (real_of_extended \o f) => i nim; rewrite -EFin_real_of_extended //.
  exact: foo.
rewrite EFin_sum //; last first.
  move=> i /andP[ni im]; rewrite fin_numD foo/= ?im ?(leq_trans _ (leqnSn _))//.
  by rewrite fin_numN foo// ni/= ltnW.
rewrite [in LHS]big_nat_cond.
(under eq_bigr) => [i|].
  rewrite andbT => /andP[ni im].
  rewrite real_of_extendedD //; last 2 first.
    by rewrite foo // im (leq_trans ni).
    by rewrite fin_numN foo// ni /= ltnW.
  by rewrite real_of_extendedN; over.
rewrite -big_nat_cond telescope_sumr // subEFin.
rewrite -EFin_real_of_extended; last by rewrite foo // nm leqnn.
by rewrite -EFin_real_of_extended // foo// leqnn.
Qed.

Section eseries.
Variables (R : numDomainType) (u_ : (\bar R)^nat).

Definition eseries : (\bar R)^nat := [sequence \sum_(0 <= k < n) u_ k]_n.

Lemma eseriesEnat : eseries = [sequence \sum_(0 <= k < n) u_ k]_n.
Proof. by []. Qed.

Lemma eseriesEord : eseries = [sequence \sum_(k < n) u_ k]_n.
Proof. by rewrite /eseries /=; under eq_fun do rewrite big_mkord. Qed.
End eseries.

(* NB: how useful? *)
Lemma lim_mkord (R : realFieldType) (f : (\bar R)^nat) :
  lim (fun n => \sum_(k < n) f k)%E = \sum_(k <oo) f k.
Proof.
rewrite (_ : (fun n => _) = (fun n => \sum_(0 <= k < n) f k)%E) // funeqE => k.
by rewrite big_mkord.
Qed.

Lemma sum_fset_nat_ub (R : realDomainType) (f : (\bar R)^nat) (F : {fset nat})
    (P : pred nat) n :
  (forall i, P i -> 0%E <= f i) ->
  (F `<=` @nat_of_ord _ @` fsets_ord xpredT n)%fset ->
  \sum_(i <- F | P i) f i <= \sum_(i < n | P i) f i.
Proof.
move=> f0 /fsubsetP F_fsets_ord; apply (@le_trans _ _
    (\sum_(i <- @nat_of_ord _ @` [fset j : 'I_n | P j]) f i)%fset); last first.
  rewrite big_imfset /=; last by move=> i j _ _; apply: ord_inj.
  by rewrite big_fset /= big_enum_cond.
apply (@le_trans _ _
    (\sum_(i <- [fset nat_of_ord j | j in 'I_n]%fset | P i) f i)); last first.
  rewrite big_imfset /=; last by move=> i j _ _; apply/ord_inj.
  rewrite big_fset big_enum_cond /= big_mkcond /=.
  rewrite big_imfset /=; last by move=> i j _ _; apply/ord_inj.
  by rewrite -big_mkcond /= big_enum_cond.
apply/(lee_sum_nneg_subfset _ (fun m _ => f0 m)) => t /F_fsets_ord.
by move=> /imfsetP[/= j _ ->{t}]; apply/imfsetP; exists j.
Qed.

Lemma lee_sum_lim (R : realType) (f : (\bar R)^nat) (F : {fset nat})
    (P : pred nat) :
  (forall i, P i -> 0%E <= f i) ->
  \sum_(i <- F | P i) f i <= \sum_(i <oo | P i) f i.
Proof.
move=> f0; have [->|F0] := eqVneq F fset0.
  by rewrite big_mkcond big_seq_fset0 ereal_nneg_series_lim_ge0.
have [n FnS] : exists n, (F `<=` @nat_of_ord _ @` fsets_ord xpredT n)%fset.
  move/fset_nat_maximum : F0 => [i [iF Fi]]; exists i.+1.
  apply/fsubsetP => j jF; apply/imfsetP => /=.
  by move/Fi : jF; rewrite -ltnS => jF; exists (Ordinal jF) => //; rewrite inE.
apply/(le_trans _ (ereal_nneg_series_lim_ge n f0)).
by rewrite big_mkord sum_fset_nat_ub.
Qed.

Lemma cons_head_beheadE {T : eqType} (s : seq T) def :
  s != [::] -> head def s :: behead s = s.
Proof. by case: s. Qed.

Lemma comp_preimage T1 T2 T3 (A : set T3) (g : T1 -> T2) (f : T2 -> T3) :
  (f \o g) @^-1` A = g @^-1` (f @^-1` A).
Proof. by []. Qed.

Definition norme (R : realDomainType) (x : \bar R) :=
  if x is EFin r then `|r|%:E else +oo%E.

Lemma norme_ge0 (R : realDomainType) (x : \bar R) : (0 <= norme x)%E.
Proof. by move: x => [x| |] /=; rewrite ?lee_pinfty ?lee_fin. Qed.

Lemma ltz_opp (R : numDomainType) (n : nat) :
  (0 < n)%N -> (- n%:R < n%:R :> R)%R.
Proof.
by move=> n0; rewrite -subr_lt0 -opprD -natrD oppr_lt0 ltr0n addn_gt0 n0.
Qed.

(* TODO: PR along subset_set1? *)
Lemma subset_set2 T (A : set T) a b : A `<=` [set a; b] ->
  A = set0 \/ A = [set a] \/ A = [set b] \/ A = [set a; b].
Proof.
have [<-|ab Aab] := pselect (a = b).
  by rewrite setUid => Aa; have [|] := subset_set1 Aa; tauto.
have [Aa|Aa] := pselect (A `<=` [set a]).
  by rewrite orA; left; exact/subset_set1.
have [Ab|Ab] := pselect (A `<=` [set b]).
  have [A0|{}Ab] := subset_set1 Ab; first by left.
  by rewrite orA; right; left.
rewrite 2!orA; right; rewrite eqEsubset; split => //.
move/nonsubset : Ab => -[y [Ay yb]].
have <- : y = a by apply: contrapT => ya; move/Aab : Ay => [|].
move/nonsubset : Aa => -[z [Az za]].
have <- : z = b by apply: contrapT => zb; move/Aab : Az => [|].
by move=> _ [|] ->.
Qed.

(******************************************************************************)
(*                        /lemmas waiting to be PRed                          *)
(******************************************************************************)

Reserved Notation "'s<<' A '>>'".
Reserved Notation "'d<<' D '>>'".
Reserved Notation "[ 'sset' 'of' s ]"
  (at level 0, format "[ 'sset'  'of'  s ]").

(* mu_ext mu and mu coincide on measurable sets *)
Lemma measurable_mu_extE (R : realType) (T : ringOfSetsType)
    (mu : {measure set T -> \bar R}) X :
  measurable X -> [outer_measure of mu_ext mu] X = mu X.
Proof.
move=> mX; apply/eqP; rewrite eq_le; apply/andP; split.
  apply ereal_inf_lb; exists (fun n => if n is 0%N then X else set0).
    by split=> [[]// _|t Xt]; [exact: measurable0 | exists 0%N].
  apply/cvg_lim => //; rewrite -cvg_shiftS.
  rewrite (_ : [sequence _]_n = cst (mu X)); first exact: cvg_cst.
  by rewrite funeqE => n /=; rewrite big_nat_recl//= big1 ?adde0.
apply/lb_ereal_inf => x [A [mA XA] <-{x}].
have XUA : X = \bigcup_n (X `&` A n).
  rewrite predeqE => t; split => [Xt|[i _ []//]].
  by have [i _ Ait] := XA _ Xt; exists i; split.
apply: (@le_trans _ _ (\sum_(i <oo) mu (X `&` A i))).
  by rewrite {1}XUA; apply: generalized_Boole_inequality => //;
    [move=> i; exact: measurableI | rewrite -XUA].
apply lee_lim.
- by apply: is_cvg_ereal_nneg_series => n _; exact/measure_ge0/measurableI.
- by apply: is_cvg_ereal_nneg_series => n _; exact/measure_ge0.
- near=> n; apply: lee_sum => i  _; apply: le_measure => //;
    rewrite /mkset ?in_setE //; by [exact: measurableI | apply: subIset; right].
Grab Existential Variables. all: end_near. Qed.

Lemma caratheodory_measurable_mu_ext (R : realType) (T : measurableType)
    (mu : {measure set T -> \bar R}) A :
  measurable A -> [outer_measure of mu_ext mu].-measurable A.
Proof.
move=> mA; apply le_caratheodory_measurable => // X /=.
suff le_mu : forall B, measurable B -> X `<=` B ->
    mu_ext mu (X `&` A) + mu_ext mu (X `&` ~` A) <= mu B.
  apply lb_ereal_inf => Y [B [mB XB] <-{Y}].
  have /(_ XB)/le_trans := le_mu _ (measurable_bigcup _ mB); apply.
  by apply: generalized_Boole_inequality => //; exact: measurable_bigcup.
move=> B mB BX; apply (@le_trans _ _ (mu (B `&` A) + mu (B `&` ~` A))).
  apply: lee_add.
  - apply/ereal_inf_lb; exists (fun n => if n is 0%N then B `&` A else set0).
      split=> [[|_]|t [Xt At]]; [apply: measurableI => //|exact: measurable0|].
      by exists 0%N => //; split => //; exact: BX.
    set F := (X in lim_in _ X); have : ProperFilter F by typeclasses eauto.
    move/(@cvg_lim _ _ _); apply => //.
    rewrite -cvg_shiftS (_ : [sequence _]_n = cst (mu (B `&` A))) /=.
      exact: cvg_cst.
    by rewrite funeqE => n /=; rewrite big_mkord big_ord_recl /= big1 ?adde0.
  - apply ereal_inf_lb; exists (fun n => if n is 0%N then B `&` ~` A else set0).
      split=> [[|_]|t [Xt At]].
      + by rewrite -setDE; apply: measurableD.
      + exact: measurable0.
      + by exists 0%N; split => //; exact: BX.
    set F := (X in lim_in _ X); have : ProperFilter F by typeclasses eauto.
    move/(@cvg_lim _ _ _); apply => //.
    rewrite -cvg_shiftS (_ : [sequence _]_n = cst (mu (B `&` ~` A))).
      exact: cvg_cst.
    by rewrite funeqE => n /=; rewrite big_mkord big_ord_recl /= big1 ?adde0.
rewrite -measureU.
- by rewrite -setIUr setUCr setIT.
- exact: measurableI.
- by rewrite -setDE; apply: measurableD.
- by rewrite setICA -(setIA B) setICr 2!setI0.
Qed.

Section are_measurable_sets.

Definition are_measurable_sets T (G : set (set T)) :=
  [/\ G set0, (forall A, G A -> G (~` A)) &
     (forall A : (set T)^nat, (forall n, G (A n)) -> G (\bigcup_k A k))].

Lemma are_measurable_sets_measurable (T : measurableType) :
  are_measurable_sets (@measurable T).
Proof.
by split=> //; [exact: measurable0|exact: measurableC|exact: measurable_bigcup].
Qed.

Lemma are_measurable_sets_bigcap T (I : choiceType) (G : I -> set (set T))
    (J : set I) :
  (forall n, J n -> are_measurable_sets (G n)) ->
  are_measurable_sets (\bigcap_(i in J) (G i)).
Proof.
move=> mG; split=> [i Ji|A AJ i Ji|F GF i Ji]; first by have [] := mG i.
- by have [_ mGiC _] := mG i Ji; exact/mGiC/AJ.
- by have [_ _ mGiU] := mG i Ji; apply mGiU => j; exact: GF.
Qed.

End are_measurable_sets.

Section generated_sigma_algebra.
Variable T : Type.
Implicit Types M G : set (set T).

Inductive g_salgebra G : set (set T) :=
| g_salgebra_self : forall A, G A -> s<< G >> A
| g_salgebra_set0 : s<< G >> set0
| g_salgebra_setC : forall A, s<< G >> A -> s<< G >> (~` A)
| g_salgebra_bigcup : forall A : (set T)^nat, (forall i, s<< G >> (A i)) ->
    s<< G >> (\bigcup_i (A i))
where "'s<<' G '>>'" := (g_salgebra G).

Lemma g_salgebraE G :
  s<< G >> = \bigcap_(A in [set M | are_measurable_sets M /\ G `<=` M]) A.
Proof.
rewrite predeqE => A; split => [|]. elim=>
  [ {}A ? N [?] | {}A [[]]| {}A ? MA N [[? NC ?] ?] | {}A ? MA N [[? ? NI] ?]];
  [exact | by [] | by apply/NC; apply: MA | by apply NI => i; exact: (MA i)].
apply; split; [split|]; [exact: g_salgebra_set0 | exact: g_salgebra_setC |
  exact: g_salgebra_bigcup | by move=> B MB; apply g_salgebra_self].
Qed.

Lemma are_measurable_sets_g_salgebra G : are_measurable_sets (g_salgebra G).
Proof.
by rewrite g_salgebraE; apply: are_measurable_sets_bigcap => /= ? [].
Qed.

Lemma g_salgebra_smallest G M : are_measurable_sets M ->
  G `<=` M -> s<< G >> `<=` M.
Proof. by move=> mM GM A; rewrite g_salgebraE; exact. Qed.

Lemma subset_g_salgebra M G : M `<=` G -> s<< M >> `<=` s<< G >>.
Proof.
move=> MG; apply: g_salgebra_smallest.
  exact: are_measurable_sets_g_salgebra.
by move=> C AC; exact/g_salgebra_self/MG.
Qed.

End generated_sigma_algebra.
Notation "'s<<' G '>>'" := (g_salgebra G).

Definition g_measurable (T : Type) (G : set (set T)) := T.

Section generated_salgebra_instance.
Variables (T : Type) (G : set (set T)).

HB.instance Definition g_salgebra_mixin :=
  @isMeasurable.Build (g_measurable G) (g_salgebra G)
  (@g_salgebra_set0 _ G) (@g_salgebra_setC _ G) (@g_salgebra_bigcup _ G).

Definition g_measurableType := [the measurableType of g_measurable G].

End generated_salgebra_instance.

Lemma measurable_g_measurableTypeE (T : Type) (G : set (set T)) :
  are_measurable_sets G -> @measurable (g_measurableType G) = G.
Proof.
move=> mM; rewrite eqEsubset; split; first exact: g_salgebra_smallest.
by move=> A MA; apply g_salgebra_self.
Qed.

Section dynkin.
Variable T : Type.
Implicit Types G D : set (set T).

Definition dynkin G := [/\ G setT,
  (forall A, G A -> G (~` A)) &
  (forall F : (set T)^nat, trivIset setT F -> (forall n, G (F n)) ->
                    G (\bigcup_k F k))].

Lemma dynkinT G : dynkin G -> G setT. Proof. by case. Qed.

Lemma dynkinC G : dynkin G -> (forall A, G A -> G (~` A)). Proof. by case. Qed.

Lemma dynkinU G : dynkin G -> (forall F : (set T)^nat, trivIset setT F ->
  (forall n, G (F n)) -> G (\bigcup_k F k)). Proof. by case. Qed.

Definition g_dynkin G := \bigcap_(x in [set D | dynkin D /\ G `<=` D]) x.
Local Notation "'d<<' D '>>'" := (g_dynkin D).

Lemma dynkin_g_dynkin G : dynkin (d<< G >>).
Proof.
split=> [D /= [] []//| | ].
- by move=> Y sGY D /= [dD GD]; exact/(dynkinC dD)/(sGY D).
- by move=> F tF gGF D /= [dD GD]; apply dD => // k; exact: gGF.
Qed.

Lemma gdynkin_smallest G D : dynkin D -> G `<=` D -> d<< G >> `<=` D.
Proof. by move=> dD GD S; exact. Qed.

Lemma are_measurable_sets_dynkin G : are_measurable_sets G -> dynkin G.
Proof.
by case=> ? DC DU; split => [|//|? ? ?]; [rewrite -setC0; apply DC|exact/DU].
Qed.

End dynkin.
Notation "'d<<' D '>>'" := (g_dynkin D).

Section dynkin_lemmas.
Variable T : Type.
Implicit Types D G : set (set T).

Lemma dynkin_setI_bigI G (F : (set T)^nat) : dynkin G ->
  (forall A B, G A -> G B -> G (A `&` B)) -> (forall n, G (F n)) ->
  forall n, G (\big[setI/setT]_(i < n) F i).
Proof.
move=> dG GI GF; elim => [|n ih]; last by rewrite big_ord_recr /=; apply: GI.
by rewrite big_ord0; exact: (dynkinT dG).
Qed.

Lemma dynkin_setI_are_measurable_sets G : dynkin G ->
  (forall A B, G A -> G B -> G (A `&` B)) -> are_measurable_sets G.
Proof.
move=> dG GI; split => [|//|F DF].
- by rewrite -setCT; exact/(dynkinC dG)/(dynkinT dG).
- exact/(dynkinC dG).
- rewrite seqDU_bigcup_eq; apply/(dynkinU dG) => //; first exact/trivIset_seqDU.
  move=> n; rewrite /seqDU setDE; apply GI => //.
  rewrite -bigcup_mkord setC_bigcup bigcap_mkord.
  by apply: (@dynkin_setI_bigI _ (fun x => ~` F x)) => // ?; exact/(dynkinC dG).
Qed.

Lemma gdynkin_setI_salgebra G : (forall A B, G A -> G B -> G (A `&` B)) ->
  d<< G >> = s<< G >>.
Proof.
move=> GI; rewrite eqEsubset; split.
  apply: gdynkin_smallest => //; last exact/g_salgebra_self.
  exact/are_measurable_sets_dynkin/are_measurable_sets_g_salgebra.
pose delta (D : set T) := [set E | d<< G >> (E `&` D)].
have ddelta (D : set T) : d<<G>> D -> dynkin (delta D).
  move=> dGD; split; first by rewrite /delta /= setTI.
  - move=> E DE; rewrite /delta /=.
    have -> : (~` E) `&` D = ~` ((E `&` D) `|` (~` D)).
      by rewrite -[LHS]setU0 -(setICl D) -setIUl -setCI -{2}(setCK D) -setCU.
    have : d<<G>> ((E `&` D) `|` ~` D).
      rewrite -bigcup2E => S [dS GS]; apply (dynkinU dS).
        move=> [|[|i]] [|[|j]] => // _ _; rewrite /bigcup2 /=.
        + by rewrite -setIA setICr setI0 => /set0P; rewrite eqxx.
        + by rewrite setI0 => /set0P; rewrite eqxx.
        + by rewrite setICA setICl setI0 => /set0P; rewrite eqxx.
        + by rewrite setI0 => /set0P; rewrite eqxx.
        + by rewrite set0I => /set0P; rewrite eqxx.
        + by rewrite set0I => /set0P; rewrite eqxx.
        + by rewrite set0I => /set0P; rewrite eqxx.
      move=> [|[|n]] //; rewrite /bigcup2 /=; [exact: DE| |].
      + suff : d<<G>> (~` D) by exact.
        by move=> F [dF GF]; apply (dynkinC dF) => //; exact: dGD.
      + by rewrite -setCT; apply/(dynkinC dS)/(dynkinT dS).
    by move=> dGEDD S /= [+ GS] => dS; apply/(dynkinC dS); exact: dGEDD.
  - move=> F tF deltaDF; rewrite /delta /= => S /= [dS GS].
    rewrite setI_bigcupl; apply (dynkinU dS) => //.
      by under eq_fun do rewrite setIC; exact: trivIset_setI.
    by move=> n; exact: deltaDF.
have GdG : G `<=` d<< G >> by move=> ? ? ? [_]; apply.
have Gdelta : forall A, G A -> G `<=` delta A.
  by move=> ? ? ? ?; rewrite /delta /= => ? [?]; apply; exact/GI.
have GdGdelta : forall A, G A -> d<< G >> `<=` delta A.
  move=> ? ?; apply gdynkin_smallest => //; last exact: Gdelta.
  by apply/ddelta; exact: GdG.
have dGGI : forall A B, d<<G>> A -> G B -> d<<G>> (A `&` B).
  by move=> ? ? ? ?; apply: GdGdelta.
have dGGdelta : forall A, d<<G>> A -> G `<=` delta A.
  by move=> ? ? ? ?; rewrite /delta /= setIC; exact: dGGI.
have dGdGdelta : forall A, d<<G>> A -> d<< G >> `<=` delta A.
  by move=> ? ?; exact: (gdynkin_smallest (ddelta _ _) (dGGdelta _ _)).
have dGdGdG : forall A B, d<<G>> A -> d<<G>> B -> d<<G>> (A `&` B).
  by move=> ? ? ? ?; exact: dGdGdelta.
apply: g_salgebra_smallest => //; apply: dynkin_setI_are_measurable_sets => //.
exact: dynkin_g_dynkin.
Qed.

End dynkin_lemmas.

Section measure_unique.
Variables (R : realType) (T : measurableType) (G : set (set T)).
Hypothesis TG : measurable = s<< G >>.
Hypothesis GI : forall A B, G A -> G B -> G (A `&` B).
Variable g : (set T)^nat.
Hypothesis Gg : forall i, G (g i).
Hypothesis nd_g : nondecreasing_seq g.
Hypothesis g_cover : \bigcup_k (g k) = setT.
Variables m m' : {measure set T -> \bar R}.
Hypothesis mm' : forall A, G A -> m A = m' A.
Hypothesis mgfinite : forall k, (m (g k) < +oo)%E.

Lemma measure_unique : forall E, measurable E -> m E = m' E.
Proof.
pose D n := [set X | measurable X /\ m (g n `&` X) = m' (g n `&` X)].
have dD n : dynkin (D n).
  split.
  - by rewrite /D /=; split => //; [exact: measurableT | rewrite setIT mm'].
  - move=> X [SX mm'X]; split; first exact: measurableC.
    rewrite -setDE measureD//; last by rewrite TG; exact/g_salgebra_self/Gg.
    by rewrite mm' // mm'X -measureD // -?mm'// TG; exact/g_salgebra_self/Gg.
  - move=> F tF DF; rewrite /D /=; split.
      by apply: measurable_bigcup => // i;  exact: (DF i).1.
    rewrite setI_bigcupr.
    transitivity (\sum_(i <oo) m (g n `&` F i)%E).
      rewrite -lim_mkord; apply/esym/cvg_lim => //=.
      apply: measure_sigma_additive; last exact: trivIset_setI.
      move=> i; apply: measurableI => //; last exact: (DF i).1.
      by rewrite TG; exact/g_salgebra_self/Gg.
    transitivity (\sum_(i <oo) m' (g n `&` F i)).
      by apply: eq_ereal_pseries => // k; have := (DF k).2.
    rewrite -lim_mkord; apply/cvg_lim => //.
    apply: measure_sigma_additive; last exact: trivIset_setI.
    move=> i; apply: measurableI => //; last exact: (DF i).1.
    by rewrite TG; exact/g_salgebra_self/Gg.
have GD n : G `<=` D n.
  move=> S GS; rewrite /D /=; split.
  - by rewrite TG; exact/g_salgebra_self.
  - by rewrite mm'//; exact: GI.
have dGsG : d<< G >> = s<< G >> := gdynkin_setI_salgebra GI.
have mDE n : measurable = D n.
  rewrite eqEsubset; split=> [| x []//].
  by rewrite TG -dGsG; exact: gdynkin_smallest.
have mm'g n E : measurable E -> m (g n `&` E) = m' (g n `&` E).
  by rewrite (mDE n) /D /= => -[SE].
have gE E : measurable E -> \bigcup_k (g k `&` E) = E.
  by move=> SE; rewrite -setI_bigcupl g_cover setTI.
move=> E mE.
transitivity (lim (fun n => m (g n `&` E))).
  rewrite -[in LHS](gE E) //; apply/esym/cvg_lim/cvg_mu_inc => //.
  - by move=> i; apply: measurableI => //; rewrite TG; exact/g_salgebra_self/Gg.
  - apply/measurable_bigcup => i; apply/measurableI => //.
    by rewrite TG; exact/g_salgebra_self/Gg.
  - by move=> p q pq; apply/subsetPset; apply: setSI; apply/subsetPset/nd_g.
transitivity (lim (fun n => m' (g n `&` E))).
  rewrite (_ : (fun n => _) = (fun n => m' (g n `&` E))) //.
  by rewrite funeqE => i; rewrite mm'g.
rewrite -[in RHS](gE E) //; apply/cvg_lim/cvg_mu_inc => //.
- by move=> i; apply: measurableI => //; rewrite TG; exact/g_salgebra_self/Gg.
- apply/measurable_bigcup => i; apply/measurableI => //.
  by rewrite TG; exact/g_salgebra_self/Gg.
- by move=> p q pq; apply/subsetPset; apply: setSI; apply/subsetPset/nd_g.
Qed.

End measure_unique.

Section Hahn_extension.
Variables (R : realType) (T : ringOfSetsType) (mu : {measure set T -> \bar R}).

Let mstar : {outer_measure set T -> \bar R} := [outer_measure of mu_ext mu].
Let M : measurableType := [the measurableType of caratheodory_type mstar].

Lemma subset_g_salgebra_caratheodory : s<< @measurable T >> `<=` @measurable M.
Proof.
apply: g_salgebra_smallest.
  split; [exact: measurable0 | by move=> X mX; exact: measurableC |
    by move=> u_ mu_; exact: measurable_bigcup].
move=> A mA; apply le_caratheodory_measurable => // X.
apply lb_ereal_inf => _ [B [mB XB] <-].
set BA := eseries (fun n => mu (B n `&` A)).
set BNA := eseries (fun n => mu (B n `&` ~` A)).
apply (@le_trans _ _ (lim BA + lim BNA)); [apply: lee_add|].
  - rewrite (_ : BA = eseries (fun n => mstar (B n `&` A))); last first.
      rewrite funeqE => n; apply: eq_bigr => i _.
      by rewrite /mstar /= measurable_mu_extE //; exact: measurableI.
    apply (@le_trans _ _ (mstar (\bigcup_k (B k `&` A)))).
      by apply le_mu_ext; rewrite -setI_bigcupl; apply setISS.
    exact: outer_measure_sigma_subadditive.
  - rewrite (_ : BNA = eseries (fun n => mstar (B n `\` A))); last first.
      rewrite funeqE => n; apply eq_bigr => i _.
      by rewrite /mstar /= measurable_mu_extE //; exact: measurableD.
    apply (@le_trans _ _ (mstar (\bigcup_k (B k `\` A)))).
      by apply le_mu_ext; rewrite -setI_bigcupl; apply setISS.
    exact: outer_measure_sigma_subadditive.
have ? : cvg BNA.
  apply/is_cvg_ereal_nneg_series => n _.
  by rewrite -setDE; apply: measure_ge0 => //; apply: measurableD.
have ? : cvg BA.
  apply/is_cvg_ereal_nneg_series => n _.
  by apply: measure_ge0 => //; apply: measurableI.
have ? : cvg (eseries (mu \o B)).
  by apply/is_cvg_ereal_nneg_series => n _; exact: measure_ge0.
have [def|] := boolP (adde_def (lim BA) (lim BNA)); last first.
  rewrite /adde_def negb_and !negbK=> /orP[/andP[BAoo BNAoo]|/andP[BAoo BNAoo]].
  - suff -> : lim (eseries (mu \o B)) = +oo by rewrite lee_pinfty.
    apply/eqP; rewrite -lee_pinfty_eq -(eqP BAoo); apply/lee_lim => //.
    near=> n; apply: lee_sum => m _; apply: le_measure; rewrite /mkset; by
      [rewrite inE; exact: measurableI | rewrite inE | apply: subIset; left].
  - suff -> : lim (eseries (mu \o B)) = +oo by rewrite lee_pinfty.
    apply/eqP; rewrite -lee_pinfty_eq -(eqP BNAoo); apply/lee_lim => //.
    near=> n; apply: lee_sum => m _; rewrite -setDE; apply: le_measure;
      rewrite /mkset; by [rewrite inE; exact: measurableD |
                          rewrite inE |
                          apply: subIset; left].
rewrite -ereal_limD // (_ : (fun _ => _) =
    eseries (fun i => mu (B i `&` A) + mu (B i `&` ~` A))); last first.
  by rewrite funeqE => n; rewrite -big_split /=; apply eq_bigr.
apply/lee_lim => //.
  apply/is_cvg_ereal_nneg_series => // n _; apply/adde_ge0.
  by apply: measure_ge0 => //; apply: measurableI.
  by rewrite -setDE; apply: measure_ge0; apply: measurableD.
near=> n; apply: lee_sum => i _; rewrite -measure_semi_additive2.
- apply: le_measure; rewrite /mkset; [rewrite inE |
                                      by rewrite inE |
                                      by rewrite -setIUr setUCr setIT].
  by apply: measurableU; [exact: measurableI |
                          rewrite -setDE; exact: measurableD].
- exact: measurableI.
- by rewrite -setDE; exact: measurableD.
- apply: measurableU; [exact: measurableI | rewrite -setDE; exact: measurableD].
- by rewrite setIACA setICr setI0.
Grab Existential Variables. all: end_near. Qed.

Let I : measurableType := g_measurableType (@measurable T).

Let Hahn_ext' : set I -> \bar R := mu_ext mu.

Local Lemma Hahn_ext'0 : Hahn_ext' set0 = 0.
Proof. exact: mu_ext0. Qed.

Local Lemma Hahn_ext'_ge0 (A : set I) : measurable A -> 0 <= Hahn_ext' A.
Proof. by move=> mA; exact: mu_ext_ge0. Qed.

Local Lemma Hahn_ext'_sigma_additive : semi_sigma_additive Hahn_ext'.
Proof.
move=> F mF tF mUF; rewrite /Hahn_ext'.
apply: (@caratheodory_measure_sigma_additive _ _ mstar) => //; last first.
  exact: subset_g_salgebra_caratheodory.
by move=> i; exact: (subset_g_salgebra_caratheodory (mF i)).
Qed.

Definition Hahn_ext : {measure set I -> \bar R} :=
  Measure.Pack _ (Measure.Axioms
    Hahn_ext'0 Hahn_ext'_ge0 Hahn_ext'_sigma_additive).

Lemma Hahn_ext_sigma_finite : @sigma_finite _ T setT mu ->
  @sigma_finite _ I setT Hahn_ext.
Proof.
move=> -[S setTS mS]; exists S => //; move=> i; split.
  exact: (g_salgebra_self (mS i).1).
by rewrite /Hahn_ext /= /Hahn_ext' measurable_mu_extE //;
  [exact: (mS i).2 | exact: (mS i).1].
Qed.

Lemma Hahn_ext_unique : @sigma_finite _ T setT mu ->
  (forall mu' : {measure set I -> \bar R},
    (forall X, @measurable T X -> mu' X = mu X) ->
    (forall X, @measurable I X -> Hahn_ext X = mu' X)).
Proof.
move=> sfmu mu' mu'mu; move: (sfmu) => /sigma_finiteP[S setTS [Snondec mS]] X mX.
apply: (@measure_unique R I (@measurable T) erefl _ S) => //.
- by move=> ? ? ? ?; apply: measurableI.
- by move=> i; exact: (mS i).1.
- move=> Y mY.
  by rewrite /Hahn_ext/Hahn_ext'/= measurable_mu_extE // mu'mu.
- move=> i.
  by rewrite /Hahn_ext/=/Hahn_ext' measurable_mu_extE //;
    [exact: (mS i).2 | exact: (mS i).1].
Qed.

End Hahn_extension.

Lemma mask_second (T : Type) (b : T) a t :
  a :: t = mask (true :: false :: nseq (size t) true) [:: a, b & t].
Proof. by rewrite /= mask_true. Qed.

Local Close Scope ereal_scope.

Section lte_bnd.
Variables (d : unit) (T : porderType d).
Implicit Types (x y : T) (b : bool).

Local Lemma BLeft_ltE x y : (BLeft x < BLeft y)%O = (x < y)%O.
Proof. by []. Qed.
Local Lemma BRight_leE x y : (BRight x <= BRight y)%O = (x <= y)%O.
Proof. by []. Qed.
Local Lemma BRight_BLeft_leE x y : (BRight x <= BLeft y)%O = (x < y)%O.
Proof. by []. Qed.
Local Lemma BLeft_BRight_ltE x y : (BLeft x < BRight y)%O = (x <= y)%O.
Proof. by []. Qed.
Local Lemma BRight_BSide_ltE x y b : (BRight x < BSide b y)%O = (x < y)%O.
Proof. by case: b. Qed.
Local Lemma BLeft_BSide_leE x y b : (BLeft x <= BSide b y)%O = (x <= y)%O.
Proof. by case: b. Qed.

Definition lte_bnd := (BLeft_ltE, BLeft_BRight_ltE, BRight_BSide_ltE,
  BLeft_BSide_leE, BRight_BLeft_leE, BRight_leE).

Lemma BSide_BRight_leE x y b : (BSide b x <= BRight y)%O = (x <= y)%O.
Proof. by case: b. Qed.
Lemma BSide_BLeft_leE x y b : (BSide b x < BLeft y)%O = (x < y)%O.
Proof. by case: b. Qed.
Lemma BSide_leE x y b : (BSide b x <= BSide b y)%O = (x <= y)%O.
Proof. by case: b. Qed.
Lemma BSide_ltE x y b : (BSide b x < BSide b y)%O = (x < y)%O.
Proof. by case: b. Qed.

End lte_bnd.

Lemma ltBRight_leBLeft (d : unit) (T : porderType d) (a : itv_bound T) (r : T) :
  (a < BRight r)%O -> (a <= BLeft r)%O.
Proof. by move: a => [[] a|[]]. Qed.

Lemma itv_meet_mem (d : unit) (T : orderType d) (i1 i2 j1 j2 : itv_bound T) (x : T) :
  x \in itv_meet (Interval i1 i2) (Interval j1 j2) <->
  x \in Interval i1 i2 /\ x \in Interval j1 j2.
Proof.
split.
  rewrite /= 3!itv_boundlr joinEtotal meetEtotal le_maxl le_minr.
  by move=> /andP[/andP[-> ->] /andP[-> ->]].
case; rewrite 2!itv_boundlr => /andP[i1x xi2] /andP[j1x xj2].
by rewrite /= itv_boundlr joinEtotal meetEtotal le_maxl le_minr i1x j1x xj2 xi2.
Qed.

Coercion pair_of_interval T (I : interval T) : itv_bound T * itv_bound T :=
  let: Interval b1 b2 := I in (b1, b2).

(* non-empty interval *)
Definition neitv {d : unit} {T : porderType d} : pred _ :=
  [pred i : interval T | (i.1 < i.2)%O].

Definition itv_center (R : numDomainType) (i : interval R) : R :=
  match i with
  | Interval (BSide _ a) (BSide _ b) => (a + b) / 2
  | Interval -oo%O (BSide _ b) => b - 1
  | Interval (BSide _ a) +oo%O => a + 1
  | Interval -oo%O +oo%O => 0
  | _ => 0
  end.

Section itv_center_lemmas.
Variable R : numFieldType.
Implicit Types i : interval R.

Lemma mem_itv_center i : neitv i -> itv_center i \in i.
Proof.
move: i => [[[]a|[]] [[]b|[]]] //= ab; rewrite in_itv /=.
by rewrite midf_lt // andbT midf_le // ltW.
by rewrite midf_le // midf_le.
by rewrite ler_addl ler01.
by rewrite midf_lt // midf_lt.
by rewrite midf_lt // midf_le // ltW.
by rewrite ltr_addl ltr01.
by rewrite ltr_subl_addr ltr_addl.
by rewrite ler_subl_addr ler_addl.
Qed.

Lemma itv_center_bnd2 i : neitv i -> forall b, (BSide b (itv_center i) <= i.2)%O.
Proof.
move: i => [[[]a|[]] [[]b|[]]] //= => ab; case; rewrite lte_bnd.
by rewrite midf_le // ltW.
by rewrite midf_lt.
by rewrite midf_le.
by rewrite midf_le.
by rewrite midf_le // ltW.
by rewrite midf_lt.
by rewrite midf_le // ltW.
by rewrite midf_le // ltW.
by rewrite ler_subl_addl ler_addr.
by rewrite ltr_subl_addl ltr_addr.
by rewrite ler_subl_addl ler_addr.
by rewrite ler_subl_addl ler_addr.
Qed.

Lemma itv_center_bnd1 i : neitv i -> forall b, (i.1 <= BSide b (itv_center i))%O.
Proof.
move: i => [[[]a|[]] [[]b|[]]] //= => ab; case; rewrite lte_bnd.
by rewrite midf_le // ltW.
by rewrite midf_le // ltW.
by rewrite midf_le.
by rewrite midf_le.
by rewrite ler_addl.
by rewrite ler_addl.
by rewrite midf_lt.
by rewrite midf_le // ltW.
by rewrite midf_lt.
by rewrite midf_le // ltW.
by rewrite ltr_addl.
by rewrite ler_addl.
Qed.

End itv_center_lemmas.

(* definitions and lemmas to make a bridge between MathComp intervals and     *)
(* classical sets                                                             *)
Section set_itv_porderType.
Variables (d : unit) (T : porderType d).
Implicit Types (i j : interval T) (x y : T) (a : itv_bound T).

Lemma subset_itvP i j : {subset i <= j} <-> [set` i] `<=` [set` j].
Proof. by []. Qed.

Lemma set_itvoo x y : `]x, y[%classic = (fun z => x < z < y)%O.
Proof. by []. Qed.

Lemma set_itvcc x y : `[x, y]%classic = (fun z => x <= z <= y)%O.
Proof. by []. Qed.

Lemma set_itvoc x y : `]x, y]%classic = (fun z => x < z <= y)%O.
Proof. by []. Qed.

Lemma set_itvco x y : `[x, y[%classic = (fun z => x <= z < y)%O.
Proof. by []. Qed.

Lemma set_itv_infty_infty : `]-oo, +oo[%classic = @setT T.
Proof. by rewrite predeqE. Qed.

Lemma set_itv_o_infty x : `]x, +oo[%classic = (fun z => x < z)%O.
Proof. by rewrite predeqE /mkset => r; rewrite in_itv andbT. Qed.

Lemma set_itv_c_infty x : `[x, +oo[%classic = (fun z => x <= z)%O.
Proof. by rewrite predeqE /mkset => r; rewrite in_itv andbT. Qed.

Lemma set_itv_infty_o x : `]-oo, x[%classic = (fun z => z < x)%O.
Proof. by rewrite predeqE /mkset => r; rewrite in_itv. Qed.

Lemma set_itv_infty_c x : `]-oo, x]%classic = (fun z => z <= x)%O.
Proof. by rewrite predeqE /mkset => r; rewrite in_itv. Qed.

Lemma set_itvNlt_set0 i : ~~ neitv i -> [set` i] = set0.
Proof.
by case: i => a b /itv_ge ij0; rewrite predeqE => r; split; rewrite //= ij0.
Qed.

Lemma set_itv_pinfty_bnd a : [set` Interval +oo%O a] = set0.
Proof. by rewrite set_itvNlt_set0. Qed.

Lemma set_itv_bnd_ninfty a : [set` Interval a -oo%O] = set0.
Proof. by rewrite set_itvNlt_set0 //=; case: a => [[]a|[]]. Qed.

Definition set_itv_infty_set0 :=
  (set_itv_bnd_ninfty, set_itv_pinfty_bnd).

Definition set_itvE := (set_itvoo, set_itvcc, set_itvoc, set_itvco,
  set_itv_infty_infty, set_itv_o_infty, set_itv_c_infty, set_itv_infty_o,
  set_itv_infty_c, set_itv_infty_set0).

(* puncture interval *)
Lemma punct_itvoc x y : (x < y)%O -> `]x, y]%classic = `]x, y[%classic `|` [set y].
Proof.
move=> xy; rewrite !set_itvE predeqE => r; split=> [/andP[xr]|].
  by rewrite le_eqVlt => /predU1P[->|ry]; [right|left; rewrite xr].
by case=> [/andP[ar /ltW ->]|->]; [rewrite andbT|rewrite xy lexx].
Qed.

Lemma punct_itvco x y : (x < y)%O -> `[x, y[%classic = [set x] `|` `]x, y[%classic.
Proof.
move=> xy; rewrite !set_itvE predeqE => r; split=> [/andP[]|].
  by rewrite le_eqVlt => /predU1P[->|xr ry]; [left|right; rewrite xr].
by case=> [->|/andP[/ltW -> -> //]]; rewrite lexx.
Qed.

Lemma punct_itvccL x y : (x <= y)%O -> `[x, y]%classic = [set x] `|` `]x, y]%classic.
Proof.
move=> ab; rewrite !set_itvE predeqE => r; split=> [/andP[]|].
  by rewrite le_eqVlt => /predU1P[->|xr ry]; [left|right; rewrite xr].
by case=> [->|/andP[/ltW -> -> //]]; rewrite lexx.
Qed.

Lemma punct_itvccR x y : (x <= y)%O -> `[x, y]%classic = `[x, y[%classic `|` [set y].
Proof.
move=> xy; rewrite !set_itvE predeqE => r; split=> [/andP[xr]|].
  by rewrite le_eqVlt => /predU1P[->|ry]; [right|left; rewrite xr].
by case=> [/andP[-> /ltW //]|->]; rewrite lexx xy.
Qed.

Lemma punct_itv_c_infty x : `[x, +oo[%classic = [set x] `|` `]x, +oo[%classic.
Proof.
rewrite predeqE => r; rewrite !set_itvE; split; last by case=> [->//|/ltW].
by rewrite le_eqVlt => /predU1P[->|?]; [left|right].
Qed.

Lemma punct_itv_infty_c x : `]-oo, x]%classic = `]-oo, x[%classic `|` [set x].
Proof.
rewrite predeqE => r; rewrite !set_itvE; split => [|[/ltW //|-> //=]].
by rewrite le_eqVlt => /predU1P[->|xr]; [right|left].
Qed.

End set_itv_porderType.

Section set_itv_numFieldType.
Variable R : numFieldType.
Implicit Types i : interval R.

Lemma set_itv_eq0 i : ([set` i] == set0) = (~~ neitv i).
Proof.
apply/idP/idP => [/eqP|]; last by move=> ?; rewrite set_itvNlt_set0.
apply: contraPN => /mem_itv_center => ii.
by apply/eqP/set0P; exists (itv_center i).
Qed.

Lemma set_itv_neq0 i : ([set` i] != set0) = (neitv i).
Proof. by rewrite set_itv_eq0 negbK. Qed.

Lemma set_itv0P i : [set` i] = set0 <-> i =i pred0.
Proof.
move: i => [a b]; split => [/eqP|ab0]; first by rewrite set_itv_eq0 => /itv_ge.
apply/eqP; rewrite set_itv_eq0; apply: contraPN ab0 => ab0.
by move/(_ (itv_center (Interval a b))); rewrite mem_itv_center.
Qed.

Lemma neitvNpred0 i : neitv i = ~~ `[< i =i pred0 >].
Proof.
apply/idP/idP => [|/asboolP/set_itv0P/eqP].
  by rewrite -set_itv_neq0; apply: contra => /asboolP/set_itv0P/eqP.
by rewrite set_itv_neq0.
Qed.

Lemma pred0Nneitv i : `[< i =i pred0 >] = ~~ neitv i.
Proof. by rewrite neitvNpred0 negbK. Qed.

Lemma neitvP i : reflect (i =i pred0) (i \notin neitv).
Proof. by rewrite [i \in neitv]neitvNpred0 negbK; apply: asboolP. Qed.

Lemma neitvPn i : reflect (~ i =i pred0) (i \in neitv).
Proof. by rewrite [i \in neitv]neitvNpred0; apply: asboolPn. Qed.

Lemma pred0_hasNsup i : i =i pred0 -> ~ has_sup [set` i].
Proof.
case: i => a b /= ab0; rewrite /has_sup not_andP; left.
exact/set0P/negP/negPn/eqP/set_itv0P.
Qed.

Lemma pred0_hasNinf i : i =i pred0 -> ~ has_inf [set` i].
Proof.
case: i => a b /= ab0; rewrite /has_inf not_andP; left.
exact/set0P/negP/negPn/eqP/set_itv0P.
Qed.

End set_itv_numFieldType.

Section interval_has_bound.
Variable R : numDomainType.

Lemma has_lbound_itv (x : R) b (a : itv_bound R) :
  has_lbound [set` Interval (BSide b x) a].
Proof. by case: b; exists x => r /andP[]; rewrite lte_bnd // => /ltW. Qed.

Lemma has_ubound_itv (x : R) b (a : itv_bound R) :
  has_ubound [set` Interval a (BSide b x)].
Proof. by case: b; exists x => r /andP[]; rewrite lte_bnd // => _ /ltW. Qed.

End interval_has_bound.

Section interval_hasNbound.
Variable R : realDomainType.

Lemma hasNlbound_itv (a : itv_bound R) : a != -oo%O ->
  ~ has_lbound [set` Interval -oo%O a].
Proof.
move: a => [b r|[|]] _ //.
  suff : ~ has_lbound `]-oo, r[%classic.
    by case: b => //; apply/contra_not/subset_has_lbound => x /ltW.
  apply/has_lbPn => x; exists (minr (r - 1) (x - 1)).
    by rewrite !set_itvE lt_minl ltr_subl_addr ltr_addl ltr01.
  by rewrite lt_minl orbC ltr_subl_addr ltr_addl ltr01.
case=> r /(_ (r - 1)) /=; rewrite in_itv /= => /(_ erefl).
by apply/negP; rewrite -ltNge ltr_subl_addr ltr_addl.
Qed.

Lemma hasNubound_itv (a : itv_bound R) : a != +oo%O ->
  ~ has_ubound [set` Interval a +oo%O].
Proof.
move: a => [b r|[|]] _ //.
  suff : ~ has_ubound `]r, +oo[%classic.
    case: b => //; apply/contra_not/subset_has_ubound => x.
    by rewrite !set_itvE => /ltW.
  apply/has_ubPn => x; rewrite !set_itvE; exists (maxr (r + 1) (x + 1));
  by rewrite ?in_itv /= ?andbT lt_maxr ltr_addl ltr01 // orbT.
case=> r /(_ (r + 1)) /=; rewrite in_itv /= => /(_ erefl).
by apply/negP; rewrite -ltNge ltr_addl.
Qed.

End interval_hasNbound.

Hint Extern 0 (has_lbound _) => solve[apply: has_lbound_itv] : core.
Hint Extern 0 (has_ubound _) => solve[apply: has_ubound_itv] : core.
Hint Extern 0 (~ has_lbound _) => solve[by apply: hasNlbound_itv] : core.
Hint Extern 0 (~ has_ubound _) => solve[by apply: hasNubound_itv] : core.

Section interval_has.
Variable R : realType.
Implicit Types x : R.

Lemma has_sup_half x b (i : itv_bound R) : (i < BSide b x)%O ->
  has_sup [set` Interval i (BSide b x)].
Proof.
move: b i => [] [[]y|[]]; rewrite ?lte_bnd => xy; split=> //; do 1?[
  by exists ((x + y) / 2); rewrite !set_itvE addrC !(midf_le,midf_lt) //;
    exact: ltW
| by exists (x - 1); rewrite !set_itvE
    !(ltr_subl_addr, ler_subl_addr, ltr_addl,ler_addl)].
Qed.

Lemma has_inf_half x b (i : itv_bound R) : (BSide b x < i)%O ->
  has_inf [set` Interval (BSide b x) i].
Proof.
move: b i => [] [[]y|[]]; rewrite ?lte_bnd => xy; do 1?[
  by (split=> //; exists ((x + y) / 2); rewrite !set_itvE !(midf_le,midf_lt) //;
    exact: ltW)
| (by split => //; exists (x + 1); rewrite !set_itvE !(ltr_addl,ler_addl))].
Qed.

End interval_has.

Hint Extern 0 (has_sup _) => solve[apply: has_sup1 | exact: has_sup_half] : core.
Hint Extern 0 (has_inf _) => solve[apply: has_inf1 | exact: has_inf_half]: core.

Lemma minus_itv_bnd_infty (R : numDomainType) (x : R) b :
  -%R @` [set` Interval (BSide b x) +oo%O] =
  [set` Interval -oo%O (BSide (negb b) (- x))].
Proof.
rewrite predeqE => /= r; split=> [[y xy <-]|xr].
  by case: b xy; rewrite !in_itv/= andbT (ler_opp2, ltr_opp2).
exists (- r); rewrite ?opprK //.
by case: b xr; rewrite !in_itv/= andbT (ler_oppr, ltr_oppr).
Qed.

Lemma minus_itvoo (R : numDomainType) (x y : R) :
  -%R @` `]x, y[%classic = `](- y), (- x)[%classic.
Proof.
rewrite predeqE => /= r; split => [[{}r + <-]|].
  by rewrite !in_itv/= !ltr_opp2 andbC.
by exists (- r); rewrite ?opprK// !in_itv/= ltr_oppl ltr_oppr andbC.
Qed.

Section interval_sup_inf.
Variable R : realType.
Implicit Types x y : R.

Lemma sup_itv_infty_bnd x b : sup [set` Interval -oo%O (BSide b x)] = x.
Proof.
case: b; last by rewrite punct_itv_infty_c sup_setU ?sup1// => ? ? ? ->; exact/ltW.
set s := sup _; apply/eqP; rewrite eq_le; apply/andP; split.
- apply sup_le_ub; last by move=> ? /ltW.
  by exists (x - 1); rewrite !set_itvE ltr_subl_addr ltr_addl.
- rewrite leNgt; apply/negP => sx; pose p := (s + x) / 2.
  suff /andP[?]: (p < x) && (s < p) by apply/negP; rewrite -leNgt sup_ub.
  by rewrite !midf_lt.
Qed.

Lemma inf_itv_bnd_infty x b : inf [set` Interval (BSide b x) +oo%O] = x.
Proof.
case: b; last by rewrite /inf minus_itv_bnd_infty sup_itv_infty_bnd opprK.
by rewrite punct_itv_c_infty inf_setU ?inf1// => _ b->; rewrite !set_itvE => /ltW.
Qed.

Let sup_itv_o_bnd x y b : x < y ->
  sup [set` Interval (BRight x) (BSide b y)] = y.
Proof.
case: b => xy; last first.
  by rewrite punct_itvoc// sup_setU ?sup1// => ? ? /andP[? /ltW ?] ->.
set B := [set` _]; set A := `]-oo, x]%classic.
rewrite -(@sup_setU _ A B) //.
- rewrite -(sup_itv_infty_bnd y true); congr sup.
  rewrite predeqE => u; split=> [[|/andP[]//]|yu].
  by rewrite /A !set_itvE => /le_lt_trans; apply.
  by have [xu|ux] := ltP x u; [right; rewrite /B !set_itvE xu| left].
- by move=> u v; rewrite /A /B => ? /andP[xv _]; rewrite (le_trans _ (ltW xv)).
Qed.

Lemma sup_itv_bounded x y a b : x < y ->
  sup [set` Interval (BSide a x) (BSide b y)] = y.
Proof.
case: a => xy; last exact: sup_itv_o_bnd.
case: b.
  by rewrite punct_itvco// sup_setU ?sup_itv_o_bnd// => ? ? -> /andP[/ltW].
by rewrite (punct_itvccR (ltW _))// sup_setU ?sup1// => ? ? /andP[_ /ltW ? ->].
Qed.

Lemma sup_itvcc x y : x <= y -> sup `[x, y]%classic = y.
Proof.
by move=> ?; rewrite punct_itvccR// sup_setU ?sup1// => ? ? /andP[_ /ltW ? ->].
Qed.

Let inf_itv_bnd_o x y b : x < y ->
  inf [set` Interval (BSide b x) (BLeft y)] = x.
Proof.
case: b => xy.
  by rewrite punct_itvco// inf_setU ?inf1// => _ ? -> /andP[/ltW].
by rewrite /inf minus_itvoo sup_itv_o_bnd ?opprK // ltr_oppl opprK.
Qed.

Lemma inf_itv_bounded x y a b : x < y ->
  inf [set` Interval (BSide a x) (BSide b y)] = x.
Proof.
case: b => xy; first exact: inf_itv_bnd_o.
case: a.
  by rewrite (punct_itvccL (ltW _))// inf_setU ?inf1// => ? ? -> /andP[/ltW].
by rewrite punct_itvoc// inf_setU ?inf_itv_bnd_o// => ? ? /andP[? /ltW ?] ->.
Qed.

Lemma inf_itvcc x y : x <= y -> inf `[x, y]%classic = x.
Proof.
by move=> ?; rewrite punct_itvccL// inf_setU ?inf1 // => ? ? -> /andP[/ltW].
Qed.

End interval_sup_inf.

(* lemmas between set_itv and set-theoretic operations *)
Section set_itv_porderType.
Variables (d : unit) (T : orderType d).
Implicit Types (x y : T) (i j : interval T) (b : bool).

Lemma set_itvC_infty_bnd b x :
  ~` [set` Interval -oo%O (BSide b x)] =
  [set` Interval (BSide b x) +oo%O].
Proof.
case: b; rewrite !set_itvE predeqE => r.
by split; rewrite leNgt => /negP.
by split; rewrite ltNge => /negP.
Qed.

Lemma set_itvC_bnd_infty b x :
  ~` [set` Interval (BSide b x) +oo%O] =  [set` Interval -oo%O (BSide b x)].
Proof. by rewrite -set_itvC_infty_bnd setCK. Qed.

Let set_itvC_bounded b0 b1 x y : ~` [set` Interval (BSide b0 x) (BSide b1 y)] =
  [set` Interval -oo%O (BSide b0 x)] `|` [set` Interval (BSide b1 y) +oo%O].
Proof.
move: b0 b1 => [] []; rewrite !set_itvE predeqE => r; split.
by move/negP; rewrite negb_and -ltNge -leNgt => /orP.
by move/orP; rewrite leNgt (ltNge r x) -negb_and => /negP.
by move/negP; rewrite negb_and -2!ltNge => /orP.
by move/orP; rewrite 2!ltNge -negb_and => /negP.
by move/negP; rewrite negb_and -2!leNgt => /orP.
by move/orP; rewrite 2!leNgt -negb_and => /negP.
by move/negP; rewrite negb_and -leNgt -ltNge => /orP.
by move/orP; rewrite leNgt (ltNge y r) -negb_and => /negP.
Qed.

Lemma set_itvC_itv i : ~` [set` i] =
  [set` Interval -oo%O i.1] `|` [set` Interval i.2 +oo%O].
Proof.
case: i => -[[] x|[]] [[] y|[]] /=.
by rewrite set_itvC_bounded.
by rewrite set_itvC_bounded.
by rewrite !set_itvE setUT setC0.
by rewrite set_itvC_bnd_infty !set_itvE setU0.
by rewrite set_itvC_bounded.
by rewrite set_itvC_bounded.
by rewrite set_itvNlt_set0 // setC0 !set_itvE setUT.
by rewrite set_itvC_bnd_infty !set_itvE setU0.
by rewrite set_itvC_infty_bnd !set_itvE set0U.
by rewrite set_itvC_infty_bnd !set_itvE set0U.
by rewrite set_itvE setC0 set0U set_itvE.
by rewrite !set_itvE setCT set0U.
by rewrite !set_itvE setTU setC0.
by rewrite !set_itvE setTU setC0.
by rewrite set_itvNlt_set0 // setC0 !set_itvE setTU.
by rewrite !set_itvE setC0 setU0.
Qed.

Definition set_itvC := (set_itvC_infty_bnd, set_itvC_bnd_infty, set_itvC_itv).

Lemma itv_boundedErays a x b y : [set` Interval (BSide a x) (BSide b y)] =
  [set` Interval (BSide a x) +oo%O] `\` [set` Interval (BSide b y) +oo%O].
Proof. by rewrite -[LHS]setCK set_itvC setCU /= set_itvC setDE. Qed.

Lemma set_itv_meet i j : [set` itv_meet i j] = [set` i] `&` [set` j].
Proof.
rewrite eqEsubset; split => x; move: i j => [i1 i2] [j1 j2] /=.
- rewrite itv_boundlr joinEtotal meetEtotal le_maxl le_minr.
  move=> /andP[/andP[i1x j1x] /andP[xi2 xj2]].
  by split; rewrite /= itv_boundlr ?i1x ?xi2 // j1x xj2.
- case; rewrite /= !itv_boundlr => /andP[i1x xi2] /andP[j1x xj2] /=.
  by rewrite joinEtotal meetEtotal le_maxl le_minr i1x xi2 j1x xj2.
Qed.

End set_itv_porderType.

(* TODO: move *)
Lemma ltr_add_invr (R : realType) (y x : R) : y < x -> exists k, y + k.+1%:R^-1 < x.
Proof.
move=> yx.
exists (`|floor (x - y)^-1|%N); rewrite -ltr_subr_addl -{2}(invrK (x - y)) ltr_pinv ?inE.
- rewrite -addn1 natrD natr_absz ger0_norm; last by rewrite floor_ge0 invr_ge0 subr_ge0 ltW.
  by rewrite -RfloorE lt_succ_Rfloor.
- by rewrite ltr0n andbT unitfE pnatr_eq0.
- by rewrite invr_gt0 subr_gt0 yx andbT unitfE invr_eq0 gt_eqF// subr_gt0.
Qed.

Lemma absurdb {b : bool} {C : Prop} : b -> ~~ b -> C.
Proof. by move=> h /negP. Qed.

Lemma absurdNb {b : bool} {C : Prop} : ~~ b -> b -> C.
Proof. by move=> /negP. Qed.

Arguments absurd {_} {_}.

Lemma absurdnot {A C : Prop} : ~ A -> A -> C.
Proof. by []. Qed.

Section set_itv_realType.
Variable R : realType.
Implicit Types x : R.

Lemma set_itvK : {in neitv, cancel (fun i => [set` i]) (@Rhull R)}.
Proof.
move=> [[[] x|[]] [[] y|[]]]; rewrite /Rhull //= !(in_itv, inE)/= ?lte_bnd => xy.
- rewrite asboolT// inf_itv_bounded// lexx/= xy asboolT// asboolT//=.
  by rewrite asboolF//= sup_itv_bounded//= ltxx ?andbF.
- by rewrite asboolT// inf_itvcc// ?asboolT// ?sup_itvcc// ?lexx ?xy.
- by rewrite asboolT//= inf_itv_bnd_infty lexx asboolT// asboolF.
- rewrite asboolT// inf_itv_bounded//= ltxx asboolF// asboolT//.
  by rewrite sup_itv_bounded// ltxx andbF asboolF.
  rewrite asboolT // inf_itv_bounded // ltxx asboolF // asboolT //.
  by rewrite sup_itv_bounded // xy lexx asboolT.
- by rewrite asboolT // inf_itv_bnd_infty ltxx asboolF // asboolF.
- by rewrite asboolF // asboolT // sup_itv_infty_bnd ltxx asboolF.
- by rewrite asboolF // asboolT // sup_itv_infty_bnd lexx asboolT.
- by rewrite asboolF // asboolF.
Qed.

Lemma RhullT : Rhull setT = `]-oo, +oo[%R :> interval R.
Proof. by rewrite /Rhull -set_itv_infty_infty asboolF// asboolF. Qed.

Lemma RhullK : {in [pred X | `[< is_interval X >]],
                cancel (@Rhull R) (fun i => [set` i])}.
Proof.
move=> X /asboolP iX; rewrite /Rhull /mkset /= predeqE => r.
case: ifPn => /asboolP bX; last first.
  case: ifPn => /asboolP aX; last by rewrite (interval_unbounded_setT _ bX aX).
  rewrite in_itv /= negbK; have [|] := asboolP (X (sup X)) => XsupX /=.
    split => [|Xr].
      rewrite le_eqVlt => /predU1P[->//|rX].
      move/has_lbPn : bX => /(_ r)[y Xy yr].
      by move: (iX _ _ Xy XsupX); apply; rewrite (ltW yr) (ltW rX).
    by rewrite /mkset sup_ub //; exact/asboolP.
  split => [rX|Xr]; last exact: sup_ub_strict.
  by apply: interior_subset; rewrite interval_left_unbounded_interior.
case: ifPn => /asboolP uX.
  have [|] := asboolP (X (inf X)) => XinfX.
    rewrite in_itv /= negbK; have [|] := asboolP (X (sup X)) => XsupX /=.
      split=> [|Xr]; last first.
        by rewrite /mkset sup_ub // andbT inf_lb.
      move => /andP[]; rewrite le_eqVlt => /predU1P[<-//|infXr].
      rewrite le_eqVlt => /predU1P[->//|rsupX]; apply: interior_subset.
      by rewrite interval_bounded_interior //; rewrite /mkset infXr.
    split => [/andP[]|Xr].
      rewrite le_eqVlt => /predU1P[<-//|infXr rsupX]; apply: interior_subset.
      by rewrite interval_bounded_interior //; rewrite /mkset infXr.
    by rewrite /mkset inf_lb //= sup_ub_strict.
  have [|] := asboolP (X (sup X)) => XsupX /=.
    rewrite in_itv /=; split=> [/andP[infXr]|Xr]; last first.
      by rewrite inf_lb_strict // sup_ub.
    rewrite le_eqVlt => /predU1P[->//|rsupX]; apply: interior_subset.
    by rewrite interval_bounded_interior //; rewrite /mkset infXr.
  rewrite in_itv /=; split=> [/andP[infXr rsupX]|Xr]; last first.
    by rewrite inf_lb_strict // sup_ub_strict.
  apply: interior_subset.
  by rewrite interval_bounded_interior //; rewrite /mkset infXr.
rewrite in_itv /=; have [|] := asboolP (X (inf X)) => XinfX /=.
  rewrite andbT; split => [|Xr]; last exact: inf_lb.
  rewrite le_eqVlt => /predU1P[<-//|infXr].
  move/has_ubPn : uX => /(_ r)[y Xy yr].
  by move: (iX _ _ XinfX Xy); apply; rewrite (ltW infXr) (ltW yr).
rewrite andbT.
split=> [infXr|Xr]; last exact: inf_lb_strict.
by apply: interior_subset; rewrite interval_right_unbounded_interior.
Qed.

Lemma itv_c_inftyEbigcap x :
  `[x, +oo[%classic = \bigcap_k `]x - k.+1%:R^-1, +oo[%classic.
Proof.
rewrite predeqE => y; split=> /= [|xy].
  rewrite in_itv /= andbT => xy z _ /=; rewrite in_itv /= andbT ltr_subl_addr.
  by rewrite (le_lt_trans xy) // ltr_addl invr_gt0 ltr0n.
rewrite in_itv /= andbT leNgt; apply/negP => yx.
have {}[k ykx] := ltr_add_invr yx.
have {xy}/= := xy k Logic.I.
by rewrite in_itv /= andbT; apply/negP; rewrite -leNgt ler_subr_addr ltW.
Qed.

Lemma itv_bnd_inftyEbigcup b x : [set` Interval (BSide b x) +oo%O] =
  \bigcup_k [set` Interval (BSide b x) (BLeft k%:R)].
Proof.
rewrite predeqE => y; split=> /=; last first.
  by move=> [n _]/=; rewrite in_itv => /andP[xy yn]; rewrite in_itv /= xy.
rewrite in_itv /= andbT => xy; exists (`|floor y|%N.+1) => //=.
rewrite in_itv /= xy /= -addn1 natrD.
have [y0|y0] := ltP 0 y; last by rewrite (le_lt_trans y0)// ltr_spaddr.
rewrite natr_absz ger0_norm; last by rewrite floor_ge0 ltW.
by rewrite -RfloorE lt_succ_Rfloor.
Qed.

Lemma itv_o_inftyEbigcup x :
  `]x, +oo[%classic = \bigcup_k `[x + k.+1%:R^-1, +oo[%classic.
Proof.
rewrite predeqE => y; split => [|[n _]]/=.
  rewrite in_itv /= andbT => xy.
  have {}[k xky] := ltr_add_invr xy.
  by exists k => //=; rewrite in_itv /= (ltW xky).
rewrite in_itv /= andbT => xny.
by rewrite in_itv /= andbT (lt_le_trans _ xny) // ltr_addl invr_gt0.
Qed.

Lemma set_itv_setT (i : interval R) : [set` i] = setT -> i = `]-oo, +oo[.
Proof.
have [i0 iT|/neitvP i0 /(congr1 (@Rhull _))] := asboolP (i =i pred0).
  apply: (absurd i0) => /set_itv0P; rewrite iT predeqE => /(_ 0).
  by case=> + _; exact.
by rewrite set_itvK// => ->; exact: RhullT.
Qed.

End set_itv_realType.

Lemma trivIset_set_itv_nth (R : numDomainType) def (s : seq (interval R))
  (D : set nat) : [set` def] = set0 ->
  trivIset D (fun i => [set` nth def s i]) <->
    trivIset D (fun i => nth set0 [seq [set` j] | j <- s] i).
Proof.
move=> def0; split=> /trivIsetP ss; apply/trivIsetP => i j Di Dj ij.
- have [si|si] := ltP i (size s); last first.
    by rewrite (nth_default set0) ?size_map// set0I.
  have [sj|sj] := ltP j (size s); last first.
    by rewrite setIC (nth_default set0) ?size_map// set0I.
  by rewrite (nth_map def) // (nth_map def) // ss.
- have [?|h] := ltP i (size s); last by rewrite (nth_default def h) def0 set0I.
  have [?|h] := ltP j (size s); last by rewrite (nth_default def h) def0 setI0.
  by have := ss _ _ Di Dj ij; rewrite (nth_map def) // (nth_map def).
Qed.
Arguments trivIset_set_itv_nth {R} _ {s}.

Lemma neitv_bnd2 (R : numFieldType) (s : seq (interval R)) :
  all neitv s -> forall i, i \in s -> i.2 != -oo%O.
Proof.
move=> /allP sne [a b] si /=; apply/negP => /eqP boo; move: si.
by rewrite boo => /sne; rewrite -set_itv_neq0 set_itv_infty_set0 => /negP.
Qed.

Section simple_sets.
Variable R : numDomainType.
Implicit Types (s : seq (interval R)) (i : interval R).

Definition sset s := \big[setU/set0]_(x <- s) [set` x].

Local Notation "[ 'sset' 'of' s ]" := (sset s).

Lemma ssetE s : [sset of s] = \big[setU/set0]_(x <- s) [set` x].
Proof. by []. Qed.

Lemma sset_cons i s : [sset of i :: s] = [set` i] `|` [sset of s].
Proof. by rewrite ssetE big_cons -ssetE. Qed.

Lemma sset_nil : [sset of @nil (interval R)] = set0.
Proof. by rewrite ssetE big_nil. Qed.

Lemma sset_cons1 i : [sset of [:: i]] = [set` i].
Proof. by rewrite sset_cons sset_nil setU0. Qed.

Lemma sset_bigcup s : [sset of s] = \bigcup_(i in [set j | j \in s]) [set` i].
Proof. by rewrite bigcup_set. Qed.

Lemma ssetP s x :
  [sset of s] x <-> (\bigcup_(i in [set j | j \in s]) [set` i]) x.
Proof. by rewrite -sset_bigcup. Qed.

Lemma sseti s1 s2 : s1 =i s2 -> [sset of s1] = [sset of s2].
Proof.
move=> s12; rewrite 2!sset_bigcup eqEsubset; split => x [i];
  rewrite /mkset => + ix; by [rewrite s12 => ?; exists i |
                             rewrite -s12 => ?; exists i].
Qed.

Lemma sset_filter_neitv s : [sset of [seq x <- s | neitv x]] = [sset of s].
Proof.
elim: s => // h t ih /=; case: ifPn => [h0|h0].
  by rewrite sset_cons ih -sset_cons.
by rewrite sset_cons ih set_itvNlt_set0// set0U.
Qed.

End simple_sets.
Notation "[ 'sset' 'of' s ]" := (sset s).

Notation bnd1eta := (fun (i : interval _) => i.1).
Notation bnd2eta := (fun (i : interval _) => i.2).

Section itv_cplt.
Variable R : realType.
Implicit Types s : seq (interval R).

Definition itv_cplt s : seq (interval R) :=
  let a' := -oo%O :: map bnd2eta s in
  let b' := rcons (map bnd1eta s) +oo%O in
  map (uncurry (@Interval _)) (zip a' b').

Lemma itv_cplt_nil : [sset of itv_cplt [::]] = setT.
Proof. by rewrite /itv_cplt ssetE big_seq1 set_itvE. Qed.

Lemma itv_cpltE_subset s : ~` [sset of s] `<=` [sset of itv_cplt s].
Proof.
elim: s => [x _|[a1 b1] t ih x]; first by rewrite itv_cplt_nil.
rewrite sset_cons setCU => -[] x_notin_h /ih {}ih.
set a := map bnd1eta (Interval a1 b1 :: t).
set b := map bnd2eta (Interval a1 b1 :: t).
rewrite (_ : itv_cplt _ = Interval -oo%O a1 ::
  map (uncurry (@Interval _)) (zip b (rcons (behead a) +oo%O))) //.
rewrite sset_cons.
have : ([set` Interval -oo%O a1] `|` [set` Interval b1 +oo%O]) x.
  by rewrite set_itvC in x_notin_h.
case=> [xa1|xb1]; [by left|right].
have {ih} /ssetP[j] : [sset of map (uncurry (@Interval _))
  (zip (-oo%O :: behead b) (rcons (behead a) +oo%O))] x by [].
rewrite {1}/mkset => + jx; rewrite {}/b {}/a.
move: t => [|[a2 b2] t /=]; first by rewrite sset_cons1.
rewrite inE => /orP[/eqP jb2|jb2].
  apply/ssetP; exists (Interval b1 a2); first by rewrite /mkset inE eqxx.
  by rewrite /= itv_splitI xb1 /=; move: jx; rewrite jb2.
by apply/ssetP; exists j => //; rewrite /mkset inE jb2 orbT.
Qed.

Local Lemma sorted_itv_cpltE_subset s :
  sorted <=%O (map bnd2eta s) -> sorted <=%O (map bnd1eta s) ->
  [sset of itv_cplt s] `<=` ~` [sset of s].
Proof.
set a := map bnd1eta s; set b := map bnd2eta s.
move=> sorted_b sorted_a x.
move=> /ssetP[/= j] /mapP[[b' a']] /(nthP (+oo%O, -oo%O)) => -[n].
rewrite size_zip /= size_rcons 2!size_map minnn ltnS => ns.
rewrite nth_zip; last by rewrite size_rcons /= !size_map.
move=> -[nb' na'] jba'.
move=> xj /ssetP[] i si xi.
have [k [ks ik]] : exists k, (k < size s)%N /\
    i = Interval (nth -oo%O a k) (nth +oo%O b k).
  move/(nthP 0%O) : si => [k ks ki].
  exists k; split => //.
  by rewrite /a /b !(nth_map 0%O) // ki; case: i {xi ki}.
move: xi; rewrite ik /= itv_boundlr => /andP[akx xbk].
move: xj; rewrite jba' /= itv_boundlr => /andP[b'x xa'].
rewrite -/a in na'.
rewrite -/b in nb'.
have [kn|nk] := leP k n.
  case: n => [|n] in ns na' nb' kn *.
    move: kn; rewrite lex0 => /eqP k0.
    rewrite {ns ks} /= in nb' jba' b'x xa'.
    rewrite -{}nb' {b'x b'} in jba'.
    rewrite -na' /= in xa'.
    rewrite k0 /a /= in akx.
    rewrite {jba' k0 na' xbk ik k sorted_a sorted_b a' b j}.
    rewrite {}/a in xa'.
    case: s => [//|s0 s1] in si akx xa' *.
    by have := le_trans xa' akx; rewrite lte_bnd ltxx.
  rewrite /= in nb'.
  have : (n <= (size s).-1)%N by move: ns; clear -si; case: s si.
  rewrite leq_eqVlt => /predU1P[k's1|k's1].
    move: na'; rewrite nth_rcons size_map k's1 prednK //; last first.
      by move: ns; clear -si; case: s si.
    rewrite ltnn eqxx => ka'.
    have : (BRight x <= BLeft x)%O.
      rewrite (le_trans xbk) // (le_trans _ b'x) //= -nb'.
      apply: (sorted_leq_nth le_trans) => //.
      - by rewrite inE /b size_map.
      - by rewrite inE size_map.
      - by rewrite -ltnS k's1 prednK // (leq_ltn_trans _ ks).
    by rewrite lte_bnd ltxx.
  move: kn; rewrite le_eqVlt => /orP[kn|kn].
    have : (BRight x <= BLeft x)%O.
      rewrite (@le_trans _ _ (nth -oo%O a k)) // (le_trans xa') // -na'.
      by rewrite nth_rcons size_map -(eqP kn) ks.
    by rewrite lte_bnd ltxx.
  suff : (BRight x <= BLeft x)%O by rewrite lte_bnd ltxx.
  rewrite (@le_trans _ _ (nth +oo%O b k)) // (le_trans _ b'x) //= -nb'.
  by apply: (sorted_leq_nth le_trans) => //; rewrite inE ?/b size_map.
suff : (BRight x <= BLeft x)%O by rewrite lte_bnd ltxx.
rewrite (le_trans xa') //= (le_trans _ akx) //.
rewrite -na' nth_rcons size_map (ltn_trans nk ks).
apply: (sorted_leq_nth le_trans) => //; last exact: ltnW.
- by rewrite inE size_map (ltn_trans nk).
- by rewrite inE size_map.
Qed.

Lemma itv_cpltE s : sorted <=%O (map bnd2eta s) -> sorted <=%O (map bnd1eta s) ->
  [sset of itv_cplt s] = ~` [sset of s].
Proof.
by rewrite eqEsubset; split; [exact: sorted_itv_cpltE_subset |
                              exact: itv_cpltE_subset].
Qed.

Definition itv_cplt_ne s := [seq x <- itv_cplt s | neitv x].

Lemma itv_cplt_neE s :
  sorted <=%O (map bnd2eta s) -> sorted <=%O (map bnd1eta s) ->
  [sset of itv_cplt_ne s] = ~` [sset of s].
Proof. by move=> s_a s_b; rewrite /itv_cplt_ne sset_filter_neitv itv_cpltE. Qed.

End itv_cplt.

Section itv_diff.
Variable R : realType.
Implicit Types i j : interval R.

(* assumes ~ j <= i *)
Definition itv_diff i j := if ~~ neitv (itv_meet i j) then i
  else
    let: Interval i1 i2 := i in let: Interval j1 j2 := j in
    if (j1 <= i1)%O then
      (if (j2 <= i2)%O then Interval j2 i2 else 0%O)
    else
      (if (j2 <= i2)%O then 0%O else Interval i1 j1).

Lemma set_itv_diff i j :
  (~~ (j <= i)%O) || ((j <= i)%O && (j.1 == i.1)) ->
  [set` itv_diff i j] = [set` i] `\` [set` j].
Proof.
move=> ji.
rewrite /itv_diff; case: ifPn => [ij0|/negPn ij0].
  by apply/esym/setDidPl; rewrite -set_itv_meet; apply/eqP; rewrite set_itv_eq0.
move: i j => [i1 i2] [j1 j2] /= in ji ij0 *.
have [ji1|ji1] := leP j1 i1.
- have [ji2|ji2] := leP j2 i2.
  + rewrite eqEsubset; split=> x /=.
    * rewrite itv_boundlr => /andP[j2x xi2]; split=> /=.
        rewrite itv_boundlr xi2 andbT (@le_trans _ _ j2) // leNgt.
        apply/negP => j2j1; apply/negP : ij0; rewrite joinEtotal meetEtotal.
        by rewrite maxElt ltNge ji1 /= minElt ltNge ji2 /= /neitv /= -leNgt ltW.
      rewrite itv_boundlr => /andP[j1x xj2].
      by have := le_trans xj2 j2x; rewrite lte_bnd ltxx.
    * case; rewrite !itv_boundlr => /andP[i1x xi2] /negP; rewrite xi2 andbT.
      by apply: contraNle; rewrite (le_trans ji1).
  + rewrite set_itvE; apply/esym; rewrite setD_eq0 => x /=; rewrite !itv_boundlr.
    by move=> /andP[i1x xi2]; rewrite (le_trans ji1)// (le_trans xi2)// ltW.
- have [ji2|ji2] := leP j2 i2.
    case/orP: ji => [ji|/andP[ji j1i1]]; last by rewrite gt_eqF in j1i1.
    by apply: absurdb ji; rewrite itv_leEmeet/= (join_l (ltW _))// meet_l.
  rewrite eqEsubset; split=> x /=.
  * rewrite itv_boundlr => /andP[i1x xj1]; split.
      rewrite itv_boundlr i1x /= leNgt; apply/negP => i2j1; apply/negP : ij0.
      rewrite meetEtotal minElt ji2 joinEtotal maxElt ji1 /neitv /=.
      by rewrite -leNgt (le_trans _ xj1) // (le_trans (ltW i2j1)).
    rewrite itv_boundlr => /andP[j1x xj2].
    by have := le_trans xj1 j1x; rewrite lte_bnd ltxx.
  * move=> -[]; rewrite itv_boundlr => /andP[i1x xi2].
    rewrite itv_boundlr => /negP; rewrite negb_and -2!ltNge => /orP[xj1|j2x].
      by rewrite itv_boundlr i1x.
    by have := lt_trans (le_lt_trans xi2 ji2) j2x; rewrite ltxx.
Qed.

Lemma set_itv_diffxx i : [set` itv_diff i i] = set0.
Proof. by rewrite set_itv_diff ?setDv// lexx eqxx. Qed.

End itv_diff.

Definition disjoint_itv {R : numDomainType} : rel (interval R) :=
  fun a b => [disjoint [set` a] & [set` b]].

Lemma disjoint_itvP {R : realFieldType} (i j : interval R) :
  disjoint_itv i j <-> itv_meet i j =i pred0.
Proof.
case: i j => [a b] [c d]; rewrite /disjoint_itv /= -set_itv_meet; split.
  by move/eqP/set_itv0P.
by move=> ij0; apply/eqP/set_itv0P.
Qed.

Lemma lt_disjoint (R : numDomainType) (i j : interval R) :
  (forall x y, x \in i -> y \in j -> x < y) -> disjoint_itv i j.
Proof.
move=> ij; apply/eqP; rewrite predeqE => x; split => // -[xi xj].
by have := ij _ _ xi xj; rewrite ltxx.
Qed.

Lemma path_disj_setT_eq0 (R : numDomainType) (t : seq (interval R)) :
  all (fun x => [set` x] != set0) t -> path disjoint_itv `]-oo, +oo[ t ->
  t = [::].
Proof.
case: t => // h t /= /andP[/set0P[x hx] ne] /andP[hT].
by apply: (absurdb hT); rewrite /disjoint_itv; apply/set0P; exists x.
Qed.

Definition contiguous_itv (R : realType) (i j : interval R) : bool :=
  (i.2 == j.1 :> itv_bound R).

Section lt_itv.
Variable R : realFieldType.
Implicit Types i j : interval R.

Definition lt_itv i j := (i.1 < j.1)%O || ((i.1 == j.1) && (i.2 < j.2)%O).

Definition le_itv i j := (i == j) || (lt_itv i j).

Lemma lt_itvxx i : lt_itv i i = false.
Proof. by rewrite /lt_itv 2!ltxx andbF. Qed.

Lemma lt_itv_def i j : lt_itv i j = (j != i) && le_itv i j.
Proof.
rewrite /le_itv andb_orr eq_sym andNb /=; apply/idP/idP => [ij|/andP[]//].
by rewrite andbC ij /=; apply: contraPN ij => /eqP ->; rewrite lt_itvxx.
Qed.

Lemma le_itv_refl : reflexive le_itv.
Proof. by case=> a b; rewrite /le_itv eqxx. Qed.

Lemma le_itv_anti : antisymmetric le_itv.
Proof.
move=> /= [a b] [c d]; rewrite /le_itv => /andP[/orP[/eqP[-> -> //]|]].
rewrite /lt_itv /= => /orP[ac /orP[/eqP//|]|/andP[/eqP ac bd]].
  by rewrite ltNge (ltW ac) /= eq_sym lt_eqF.
by rewrite ac eqxx ltxx /= ltNge (ltW bd) orbF => /eqP.
Qed.

Lemma lt_itv_trans : transitive lt_itv.
Proof.
move=> [k1 k2] [i1 i2] [j1 j2]; rewrite /lt_itv /=.
case: (ltgtP i1 k1) => // [ik1 _| <-{k1} ik2]; last first.
  by case: (ltgtP i1 j1) => // _; apply: lt_trans.
by case: (ltgtP k1 j1) => // [kj1 _|<-]; [rewrite (lt_trans ik1) | rewrite ik1].
Qed.

Lemma le_itv_trans : transitive le_itv.
Proof.
move=> j i k; rewrite /le_itv.
move=> /orP[/eqP -> //|ij] /orP[/eqP <-|jk]; first by rewrite orbC ij.
by rewrite (lt_itv_trans ij jk) orbT.
Qed.

Definition le_itv_porderMixin :=
  LePOrderMixin lt_itv_def le_itv_refl le_itv_anti le_itv_trans.
Fact le_itv_display (disp : unit) : unit. Proof. exact. Qed.
Definition le_itv_porderType (disp : unit) :=
  POrderType (le_itv_display disp) (interval R) le_itv_porderMixin.

Lemma le_lt_trans_itv j i k : le_itv i j -> lt_itv j k -> lt_itv i k.
Proof. exact: (@le_lt_trans _ (le_itv_porderType _)). Qed.

Lemma lt_le_trans_itv j i k : lt_itv i j -> le_itv j k -> lt_itv i k.
Proof. exact: (@lt_le_trans _ (le_itv_porderType _)). Qed.

Lemma ltW_itv i j : lt_itv i j -> le_itv i j.
Proof. exact: (@ltW _ (le_itv_porderType _)). Qed.

Lemma total_le_itv : total le_itv.
Proof.
move=> [i1 i2] [j1 j2]; rewrite /le_itv/lt_itv/=; case/boolP: (_ == _) => ij//=.
case: (ltgtP i1 j1) => //=; rewrite ?orbT // => ij1.
by rewrite ij1; case: ltgtP => //=; rewrite ?orbT// => ->; rewrite eqxx.
Qed.

Definition le_itv_orderMixin :=
  LeOrderMixin lt_itv_def (fun _ _ => erefl) (fun _ _ => erefl)
               le_itv_anti le_itv_trans total_le_itv.
Fail Canonical le_itv_latticeType := LatticeType (interval R) le_itv_orderMixin.

Lemma lt_itv_lt i j : lt_itv i j -> disjoint_itv i j ->
  forall x y, x \in i -> y \in j -> x < y.
Proof.
move: i j => [a b] [c d]; rewrite /lt_itv; case: (ltgtP a c) => // [ac _|<-{c}].
- rewrite /disjoint_itv -set_itv_meet => /eqP/set_itv0P ij0 x y.
  rewrite 2!itv_boundlr => /andP[ax xb] /andP[cy yd].
  have [bc|cb] := leP b c; first by have := le_trans xb (le_trans bc cy).
  rewrite ltNge; apply/negP => yx.
  have /negP := ij0 y; apply; apply/itv_meet_mem; rewrite 2!itv_boundlr.
  by rewrite (le_trans (ltW ac)) //= (le_trans _ xb) // yd andbT cy.
- move=> /= ?; rewrite /disjoint_itv -set_itv_meet => /eqP/set_itv0P abd.
  move=> x y; rewrite 2!itv_boundlr => /andP[ax xb] /andP[ay yd].
  rewrite ltNge; apply/negP => yx; have /negP := abd x.
  apply; apply/itv_meet_mem; split => //; rewrite itv_boundlr ax //=.
  by rewrite (le_trans xb) // ltW.
Qed.

Lemma le_itv_lt i j : le_itv i j -> disjoint_itv i j ->
  forall x y, x \in i -> y \in j -> x < y.
Proof.
move: i j => [i1 i2] [j1 j2].
move/orP => [/eqP[<-{j1} <-{j2}]|]; last exact: lt_itv_lt.
have [i1i2|i1i2 _ x y] := ltP i1 i2; last by rewrite itv_ge // -leNgt.
apply: absurdNb.
by rewrite /disjoint_itv -set_itv_meet set_itv_neq0 /= meetxx joinxx.
Qed.

Let lt_itv_subset i j k (r : R) : r \in i -> r \in k -> r \notin j ->
  lt_itv i j -> lt_itv j k ->
  (i <= j)%O \/ (j <= i)%O.
Proof.
move: i j k => [a1 a2] [b1 b2] [c1 c2] + + + ab bc; move: bc ab => /=.
rewrite /lt_itv /=; case: (ltgtP b1 c1) => //= [b1c1 _|<-{c1} b2c2]; last first.
  case : (ltgtP a1 b1) => //= [a1b1 _|<-{b1} a2b2]; last first.
    rewrite 2!itv_boundlr => /andP[a1x xa2] /andP[_ xc2] _; left.
    by rewrite itv_leEmeet/= joinxx (meet_l (ltW _)).
  rewrite 3!itv_boundlr => /andP[a1x xa2] /andP[b1x xc2].
  rewrite negb_and -2!ltNge => xb1b2; right.
  rewrite itv_leEmeet /= (join_l (ltW _))//.
  case/orP: xb1b2 => [|?]; first by move/(le_lt_trans b1x); rewrite ltxx.
  by rewrite meet_l // (le_trans _ xa2) //= ltW.
case : (ltgtP a1 b1) => // [a1b1 _|-> // a2b2].
  rewrite 3!itv_boundlr => /andP[a1x xa2] /andP[c1x xc2].
  rewrite negb_and -2!ltNge => xb1b2; right.
  rewrite itv_leEmeet /= (join_l (ltW _))//; case/orP: xb1b2 => [xb1|b2x].
    by have := lt_trans (lt_le_trans b1c1 c1x) xb1; rewrite ltxx.
  by rewrite meet_l//= (le_trans _ xa2) // ltW.
rewrite 3!itv_boundlr => /andP[b1x xa2] _ _; left.
by rewrite itv_leEmeet/= joinxx (meet_l (ltW _)).
Qed.

Lemma le_itv_subset i j k (r : R) : r \in i -> r \in k -> r \notin j ->
  le_itv i j -> le_itv j k ->
  (i <= j)%O \/ (j <= i)%O.
Proof.
move=> xa xc xb /orP[/eqP <- _|ab]; [by left|].
move/orP => [/eqP bc|]; last exact: (lt_itv_subset _ xc).
by move: xb; rewrite bc xc.
Qed.

End lt_itv.
Arguments lt_itv {R}.
Arguments le_itv {R}.
Arguments lt_itv_trans {R}.
Arguments le_itv_trans {R}.
Arguments total_le_itv {R}.
Arguments le_itv_refl {R}.
Arguments le_itv_anti {R}.

Lemma trivIset_sort (R : realFieldType) (s : seq (interval R)) (D : set nat) :
  [set k | (k < size s)%N] `<=` D ->
  trivIset D (fun i => [set` nth 0%O s i]) ->
  trivIset D (fun i => [set` nth 0%O (sort le_itv s) i]).
Proof.
move=> sD ts; rewrite trivIset_set_itv_nth ?set_itvE//.
apply (@perm_eq_trivIset _ [seq [set` i] | i <- s]).
- by apply: subset_trans _ sD => /= i; rewrite size_map.
- by rewrite perm_map // perm_sym perm_sort.
- by rewrite -(@trivIset_set_itv_nth _ 0%O) ?set_itvE.
Qed.

Lemma sset_sort_le_itv (R : realType) (s : seq (interval R)) :
  [sset of sort le_itv s] = [sset of s].
Proof. exact/sseti/mem_sort. Qed.

Section lt_itv_diff.
Variable R : realType.
Implicit Types i j : interval R.

Lemma lt_itv_diff i j : lt_itv i j -> ~~ (j <= i)%O -> ~~ (i <= j)%O ->
  lt_itv (itv_diff i j) j.
Proof.
rewrite /itv_diff; case: ifPn => //; move: i j => [a b] [c d] /=.
rewrite /lt_itv /=; case: ltgtP => [ab _ _ ji ijb|//|/= <-{c} ij0 bd _ abd].
  have [db|db] /= := leP d b; last by rewrite ab.
  by apply: (absurdNb ji); rewrite itv_leEmeet /= (join_l (ltW _))// meet_l.
rewrite leNgt bd /=.
by apply: (absurdNb abd); rewrite itv_leEmeet /= joinxx (meet_l (ltW _)).
Qed.

Lemma le_itv_diff i j : le_itv i j -> ~~ (j <= i)%O -> ~~ (i <= j)%O ->
  le_itv (itv_diff i j) j.
Proof.
rewrite /le_itv => /orP[/eqP <-{j}|]; first by rewrite lexx.
by move=> ab sba sab; apply/orP; right; exact: lt_itv_diff.
Qed.

Lemma lt_itv_itv_diff k i j : ~~ (j <= i)%O -> disjoint_itv k i ->
  lt_itv i j -> lt_itv k i -> lt_itv k j ->
  lt_itv k (itv_diff i j).
Proof.
move: k i j => [k1 k2] [a1 a2] [b1 b2] /=; rewrite /lt_itv /=.
case: (ltgtP a1 b1) => [a1b1 ba + _| // | <-{b1}].
  have a2b2 : (a2 < b2)%O.
    rewrite ltNge; apply: contra ba => b2a2.
    by rewrite itv_leEmeet /= (join_l (ltW _))// meet_l.
  move: ba a1b1; case: (ltgtP k1 a1) => [k1a1 _ a1b1 ya _ _|//|
                                        <-{a1} ba a1b1 ya /= k2a2 _].
    rewrite /itv_diff; case: ifPn => [_|ab0]; first by rewrite k1a1.
    by rewrite leNgt a1b1 /= leNgt a2b2 /= k1a1.
  rewrite /itv_diff; case: ifPn => [_|/negPn ab0]; first by rewrite ltxx eqxx.
  rewrite leNgt a1b1 /= leNgt a2b2 /= ltxx eqxx /= ltNge.
  apply: contraPN ya => b1k2 /disjoint_itvP /=; apply/neitvP.
  by rewrite joinxx (meet_l (ltW k2a2)) inE (lt_le_trans a1b1) // leNgt.
case: (ltgtP k1 a1) => [k1a1 ab ya /= a2b2 _ _|//|
                       <-{a1} ab ya /= a2b2 k2a2 k2b2].
  rewrite /itv_diff; case: ifPn => [_|ab0]; first by rewrite k1a1.
  by rewrite lexx leNgt a2b2 /= (lt_le_trans k1a1) // bound_lex1.
rewrite /itv_diff; case: ifPn => [_|/negPn ab0]; first by rewrite ltxx eqxx.
rewrite lexx leNgt a2b2 /= (ltNge k2) bound_le0x andbF orbF ltNge.
apply: contraPN ab0; rewrite ge_pinfty => /eqP k1oo.
by rewrite /neitv /= k1oo join_r // set_itvNlt_set0.
Qed.

Lemma le_itv_itv_diff0 i j : [set` i] = set0 -> le_itv i (itv_diff i j).
Proof.
move=> i0.
by rewrite /itv_diff -set_itv_neq0 set_itv_meet i0 set0I negbK eqxx /le_itv eqxx.
Qed.

Lemma le_itv_itv_diff k i j : ~~ (j <= i)%O -> disjoint_itv k i ->
  le_itv i j -> le_itv k i -> le_itv k j ->
  le_itv k (itv_diff i j).
Proof.
move=> ji ki; rewrite {1}/le_itv => /orP[/eqP ij|ij].
  by apply: (absurdNb ji); rewrite ij lexx.
rewrite {1}/le_itv => /orP[/eqP ya|ya].
  move: ki; rewrite {}ya {k} => ii.
  have [a0 _|a0 _] := eqVneq [set` i] set0; first exact: le_itv_itv_diff0.
  by apply: (absurd ii); apply/negP; rewrite /disjoint_itv setIid.
move/orP => [/eqP kj|kj].
by move: ya; rewrite kj => /(lt_itv_trans _ _ _ ij); rewrite lt_itvxx.
by apply/orP; right; exact: lt_itv_itv_diff.
Qed.

End lt_itv_diff.

Section lt_itv_disjoint.
Variable R : realType.

Lemma neitv_sorted_disj h (t : seq (interval R)) :
  all neitv t -> sorted le_itv (h :: t) -> path disjoint_itv h t ->
  (forall c, c \in t -> disjoint_itv h c).
Proof.
elim: t h => [h t0 _ _ c //|
             b t ih a t0 /= /andP[lt_ab lt_bt] /andP[dis_ab dis_bt] c].
rewrite inE => /orP[/eqP ->{c} //|ct]; apply: ih => //.
- by move: t0; rewrite /= => /andP[].
- by rewrite (mask_second b) (sorted_mask (@le_itv_trans _)) //= lt_ab.
- case: t => [//|d t] in t0 lt_bt dis_bt ct *.
  move: dis_bt; rewrite [in X in X -> _]/= => /andP[dis_bd dis_dt].
  rewrite /= {}dis_dt andbT.
  have {}lt_ab := le_itv_lt lt_ab dis_ab.
  move/andP : lt_bt => [+ _] => /le_itv_lt/(_ dis_bd) lt_bd.
  apply/lt_disjoint => x y xa yd.
  have nb : neitv b by move: t0 => /= /andP[].
  by rewrite (@lt_trans _ _ (itv_center b) _ _ (lt_ab _ _ _ _) (lt_bd _ _ _ _))//
    mem_itv_center.
Qed.

Lemma neitv_sorted_disj_trivIset h (t : seq (interval R)) :
  all neitv t -> sorted le_itv (h :: t) -> path disjoint_itv h t ->
  trivIset setT (fun i => [set` nth 0%O (h :: t) i]).
Proof.
elim: t h => //= [h t0 _ _|
                 b t ih a /andP[b0 t0] /andP[lt_ab lt_bt] /andP[dis_ab dis_bt]].
  apply/trivIsetP => i j _ _ ij.
  case: i => [|i] /= in ij *.
    case: j => [|j] //= in ij *.
    by rewrite nth_nil set_itvE setI0.
  by rewrite nth_nil set_itvE set0I.
apply/trivIsetP => i j _ _; move: i j => [|i] [|j] //= ?.
- have [jbt|btj] := ltP j (size (b :: t)).
    apply/eqP/(@neitv_sorted_disj _ (b :: t)) => //=;
      by [rewrite b0|rewrite lt_ab|rewrite dis_ab|rewrite mem_nth].
  by rewrite nth_default // set_itvE setI0.
- have [ibt|bti] := ltP i (size (b :: t)).
    rewrite setIC.
    apply/eqP/(@neitv_sorted_disj _ (b :: t)) => //=;
      by [rewrite b0|rewrite lt_ab|rewrite dis_ab|rewrite mem_nth].
  by rewrite nth_default // set_itvE set0I.
- by have /trivIsetP := ih b t0 lt_bt dis_bt; apply.
Qed.

Lemma trivIset_disj_itv h (t : seq (interval R)) :
  trivIset setT (fun i => [set` nth 0%O (h :: t) i]) ->
  path disjoint_itv h t.
Proof.
elim: t h => // t1 t2 ih h /= /trivIsetP tsht1t2.
apply/andP; split.
  by move: (tsht1t2 O 1%N Logic.I Logic.I erefl) => /= /eqP.
apply ih => //; apply/trivIsetP => i j _ _ ij.
by move: (tsht1t2 i.+1 j.+1 Logic.I Logic.I); apply.
Qed.

Lemma sorted_le_itv_bound (s : seq (interval R)) :
  all neitv s -> sorted le_itv s -> path disjoint_itv (head 0%O s) (behead s) ->
  sorted <=%O (map bnd2eta s) /\ sorted <=%O (map bnd1eta s).
Proof.
elim: s => // -[h1 h2] [//|[t11 t12] t2] ih /= ne ht Hdis; split.
  apply/andP; split.
    case/andP : ht => + _.
    move/orP => -[/eqP[_ <-]//|].
    rewrite /lt_itv /=; case: ltgtP => //= [|_ /ltW] // h11t11 _.
    move/andP : Hdis => [H _].
    rewrite leNgt; apply/negP => t12h2.
    move: H; apply/negP/set0P.
    have : neitv (Interval t11 t12) by move/and3P : ne => [_].
    rewrite -set_itv_neq0 => /set0P[x t11t12x].
    exists x; split => //=.
    rewrite itv_boundlr.
    move: t11t12x; rewrite /= itv_boundlr => /andP[t11x xt12].
    by rewrite (le_trans (ltW _) t11x) // (le_trans xt12) // ltW.
  apply: (proj1 (ih _ _ _)).
  - by move/andP : ne => [].
  - by case/andP : ht => ? ht.
  - by rewrite /=; move/andP : Hdis => // -[].
apply/andP; split.
- move/andP : ht => -[] /orP[/eqP[<-//]|].
  by rewrite /lt_itv /=; case: ltgtP.
- apply: (proj2 (ih _ _ _)).
  + by move/andP : ne => [].
  + by case/andP : ht.
  + by rewrite /=; move/andP : Hdis => // -[].
Qed.

End lt_itv_disjoint.

Section decomposition.
Variable R : realType.
Implicit Types (i j : interval R) (s t : seq (interval R)).

Program Definition decompose' s
    (f : forall t, (size t < size s)%N -> seq (interval R)) :=
  match s with
  | [::] => [::] | [:: i] => [:: i]
  | [:: i, j & tl] => if (i <= j)%O then f (j :: tl) _ else
                    if (j <= i)%O then f (i :: tl) _ else
                    itv_diff i j :: f (j :: tl) _
  end.

Lemma decompose'_ext s
  (f g : forall t, (size t < size s)%N -> seq (interval R)) :
    (forall t (h : (size t < size s)%N), f t h = g t h) ->
  decompose' f = decompose' g.
Proof.
move=> fg; congr decompose'.
by apply functional_extensionality_dep => ?; apply functional_extensionality_dep.
Qed.

Lemma wf_size : well_founded (fun t s => (size t < size s)%N).
Proof. by apply: (@Wf_nat.well_founded_lt_compat _ size) => s t /ssrnat.ltP. Qed.

Definition sorted_decompose : seq (interval R) -> seq (interval R) :=
  Fix wf_size (fun _ => _ _) decompose'.

Lemma sorted_decompose_nil : sorted_decompose [::] = [::].
Proof. by rewrite /sorted_decompose Fix_eq //=; exact decompose'_ext. Qed.

Lemma sorted_decompose_one i : sorted_decompose [:: i] = [:: i].
Proof. rewrite /sorted_decompose Fix_eq //=; exact: decompose'_ext. Qed.

Lemma sorted_decompose_two i j t : sorted_decompose [:: i, j & t] =
  if (i <= j)%O then sorted_decompose (j :: t) else
  if (j <= i)%O then sorted_decompose (i :: t) else
  itv_diff i j :: sorted_decompose (j :: t).
Proof.
rewrite {1}/sorted_decompose Fix_eq; last exact: decompose'_ext.
by move: i j => [? ?] [? ?] //=; case: ifPn => //; case: ifPn.
Qed.

Lemma sorted_decompose_eq0 s : (sorted_decompose s == [::]) = (s == [::]).
Proof.
apply/idP/idP => [/eqP //|/eqP ->]; last by rewrite sorted_decompose_nil.
move Hn : (size s) => n.
elim: n s Hn => [[]//|n ih [//|i [|j t] [tn]]].
  by rewrite sorted_decompose_one.
rewrite sorted_decompose_two; case: ifPn => [_ /ih|ij].
  by move=> /(_ tn).
by case: ifPn => // ji /ih => /(_ tn).
Qed.

Lemma cover_sorted_decompose s :
  sorted le_itv s -> [sset of sorted_decompose s] = [sset of s].
Proof.
move sn : (size s) => n; elim: n s sn => [|n ih [//|i [|j t]]].
  by case=> // _ _; rewrite sorted_decompose_nil.
  by move=> _ _; rewrite sorted_decompose_one.
move=> [tn] /= /andP[le_ij le_jt]; rewrite sorted_decompose_two.
  case: ifPn => ij.
  rewrite /= ih // 3!sset_cons setUA; congr setU.
  by rewrite setUC; apply/esym/setUidPl/subitvP.
case: ifPn => ji.
  rewrite /= ih //; last first.
    by rewrite (mask_second j) (sorted_mask le_itv_trans) //= le_ij.
  by rewrite 3!sset_cons setUA; congr setU; apply/esym/setUidPl/subitvP.
rewrite (sset_cons _ (sorted_decompose (j :: t))) ih //.
rewrite [in RHS]sset_cons sset_cons !setUA; congr (_ `|` _).
rewrite set_itv_diff // ?ji// eqEsubset; split.
- apply: subsetU; last by move=> x; right.
  by move=> x ix; left; case: ix.
- move=> x [ix|jx]; last by right.
  by have [jx|jx] := pselect (([set` j]) x); [right|left].
Qed.

Local Lemma neitv_diff i j :
  neitv i -> neitv j -> ~~ (i <= j)%O -> ~~ (j <= i)%O ->
  neitv (itv_diff i j).
Proof.
move: i j => [a b] [c d]; rewrite /itv_diff /neitv !itv_leEmeet /= => ab cd.
rewrite -leNgt; case: ifPn => //=; rewrite -ltNge; case: (leP c a) => ca.
  rewrite ltxI ab /= => ad; case: (leP d b) => db /=; last by rewrite eqxx.
  by  rewrite lt_neqAle db andbT => + _; apply: contra => /eqP ->.
by rewrite ltxI cd andbT; case: (leP d b) => //=; rewrite eqxx.
Qed.

Lemma sorted_decompose_nonempty s : all neitv s -> all neitv (sorted_decompose s).
Proof.
move sn : (size s) => n; elim: n s sn => [|n ih [//|i [|j t]] ].
  by move=> s /size0nil ->{} _; rewrite sorted_decompose_nil.
  by move=> _ i0; rewrite sorted_decompose_one.
move=> [tn] /= /and3P[i0 j0 ne]; rewrite sorted_decompose_two.
case: ifPn => ij; first by rewrite ih //= ne andbT.
case: ifPn => ji; first by rewrite ih //= ne andbT.
apply/allP => k; rewrite inE => /orP[/eqP ->|]; first exact: neitv_diff.
by move: k; apply/allP; rewrite ih //= ne andbT.
Qed.

Local Lemma sorted_disj_itv i j t (ijt : sorted le_itv [:: i, j & t])
  (ij : ~~ (i <= j)%O) (ji : ~~ (j <= i)%O) :
  forall j0, j0 \in j :: t -> disjoint_itv (itv_diff i j) j0.
Proof.
move=> c cjtl.
apply/eqP; rewrite set_itv_diff ?ji//.
move: cjtl; rewrite inE => /orP[/eqP ->|ctl].
  by rewrite setDE -setIA setICl setI0.
rewrite predeqE => x; split => // -[].
rewrite setDE => -[] ix/negP jx cx.
have jc : le_itv j c.
  move: ctl; rewrite -sub1seq.
  move/subseq_path_in => /(_ le_itv j) /=; rewrite andbT; apply => //.
    by move=> ? ? ? ? ? ?; exact: le_itv_trans.
  by move: ijt => /= /andP[].
have le_ij : le_itv i j by move: ijt; rewrite /= => /andP[].
move/negP in ji; apply: ji.
have [|//] := le_itv_subset ix cx jx le_ij jc.
by rewrite (negbTE ij).
Qed.

Lemma path_disj_itv_sorted_decompose s : sorted le_itv s ->
  forall i, (forall j, j \in s -> disjoint_itv i j) ->
  path disjoint_itv i (sorted_decompose s).
Proof.
move sn : (size s) => n.
elim: n s sn => [|n ih [//|i [|j t]] []].
  by move=> _ /size0nil ->{} _ t tc; rewrite sorted_decompose_nil.
  by move=> _ _ t tc; rewrite sorted_decompose_one /= tc ?mem_head // eqxx.
case: n => [//|n] in ih * => -[] tn ijt k disj_k.
rewrite sorted_decompose_two; case: ifPn => ij.
  rewrite ih //= ?tn//; first by case/andP : ijt.
  by move=> c cjt; rewrite disj_k // inE cjt orbT.
case: ifPn => // ji.
  rewrite ih//; first by rewrite /= tn.
    by rewrite (mask_second j) (sorted_mask le_itv_trans).
  by move=> c; rewrite inE => citl; rewrite disj_k // !inE orbCA citl orbT.
rewrite /=; apply/andP; split.
  apply/eqP; rewrite set_itv_diff ?ji// setDE setIA.
  by rewrite (eqP (disj_k _ _)) ?set0I // mem_head.
rewrite ih //; first by rewrite /= tn.
  exact/(subseq_sorted le_itv_trans _ ijt)/subseq_cons.
exact: sorted_disj_itv.
Qed.

Lemma path_disj_itv_sorted_decompose_head_behead s : sorted le_itv s ->
  path disjoint_itv (head 0%O (sorted_decompose s))
                    (behead (sorted_decompose s)).
Proof.
move sn : (size s) => n.
elim: n s sn => [|n ih [//|i [|j t]] []].
  by move=> _ /size0nil ->{} _; rewrite sorted_decompose_nil.
  by move=> ic _; rewrite sorted_decompose_one /=.
case: n => [//|n] in ih *=> -[] tn ijt.
rewrite sorted_decompose_two; case: ifPn => ij.
  by rewrite ih//; [rewrite /= tn | case/andP : ijt].
case: ifPn => // ji.
  rewrite ih //; first by rewrite /= tn.
  by rewrite (mask_second j) (sorted_mask le_itv_trans).
rewrite /= path_disj_itv_sorted_decompose //; first by move: ijt => /= /andP[].
exact: sorted_disj_itv.
Qed.

Lemma all_sorted_decompose s y : sorted le_itv s ->
  all (fun x => le_itv y x && disjoint_itv y x) s ->
  all (fun x => le_itv y x && disjoint_itv y x) (sorted_decompose s).
Proof.
move: y.
have [n] := ubnP (size s); elim: n s => // n ih.
case; first by move=> _ k _ _; rewrite sorted_decompose_nil.
move=> i [|j t]; first by move=> m k _; rewrite sorted_decompose_one /= andbT.
move=> /=; rewrite ltnS => tn y /andP[le_ij le_jt].
move=> /and3P[/andP[yi iy] /andP[yj jy] yt'].
rewrite sorted_decompose_two; case: ifPn => [ij|ij].
  apply ih => //; apply/allP => z.
  rewrite inE => /orP[/eqP -> //| zt]; rewrite ?yj//.
  by move/allP : yt'; apply.
case: ifPn => ji.
  apply ih => //.
  - by rewrite (mask_second j) (sorted_mask le_itv_trans) //= le_ij.
  - apply/allP => z; rewrite inE => /orP[/eqP -> //|zt]; rewrite ?yi//.
    by move/allP : yt' ; apply.
apply/allP => z; rewrite inE => /orP[/eqP ->{z}|zbt]; last first.
  have : all (fun x => le_itv y x && (disjoint_itv y x))
             (sorted_decompose (j :: t)).
    apply ih => //; apply/allP => u.
    rewrite inE => /orP[/eqP -> //|ut]; rewrite ?yj//.
      by move/allP : yt'; apply.
    by move/allP; apply.
rewrite le_itv_itv_diff //= /disjoint_itv set_itv_diff ?ji//.
apply/eqP; apply: (@subsetI_eq0 _ _ [set` y] _ ([set` i])) => //.
- by move=> x [].
- exact/eqP.
Qed.

Lemma sorted_sorted_decompose s : sorted le_itv s ->
  sorted le_itv (sorted_decompose s).
Proof.
have [n] := ubnP (size s); elim: n s => // n ih.
case; first by move=> _ _; rewrite sorted_decompose_nil.
move=> a [|b t]; first by move=> _ _; rewrite sorted_decompose_one.
rewrite ltnS => abtn abt.
rewrite sorted_decompose_two.
case: ifPn => ab.
  apply ih => //.
  by move: abt => /= /andP[].
case: ifPn => [ba|ba/=].
  by rewrite ih // (mask_second b) (sorted_mask le_itv_trans).
have bt : sorted le_itv (sorted_decompose (b :: t)).
  by apply ih => //; move: abt => /= /andP[].
rewrite path_min_sorted //.
have bt' : sorted le_itv (b :: t).
  by move: abt => /= /andP[].
have : all (fun x => le_itv (itv_diff a b) x && (disjoint_itv (itv_diff a b) x))
           (b :: t).
  rewrite /= le_itv_diff //=; last first.
    by move: abt => /= => /andP[].
  apply/andP; split.
    by apply/eqP; rewrite set_itv_diff ?ba// setDE -setIA setICl setI0.
  apply/allP => z zt.
  apply/andP; split.
    rewrite (@le_itv_trans _ b) //.
      apply le_itv_diff => //.
      by move: abt => /= /andP[].
    move: abt => /= /andP[_ bt''].
    by move/order_path_min : bt'' => /(_ le_itv_trans) /allP; apply.
  rewrite /disjoint_itv set_itv_diff ?ba//.
  apply/negPn/negP => /set0P[x] -[[] ].
  move=> xa bx zx.
  move: a b z => [a1 a2] [b1 b2] [z1 z2] in zt zx abtn abt ab ba bt bt' bx xa *.
  apply: bx => /=.
  rewrite /= !itv_boundlr in xa zx *.
  case/andP : zx => zx1 zx2.
  rewrite (le_trans _ zx1) //=; last first.
     have : le_itv (Interval b1 b2) (Interval z1 z2).
       have : path le_itv (Interval b1 b2) t by [].
       by move/order_path_min => /(_ le_itv_trans)/allP; apply.
     by rewrite /le_itv /lt_itv /= => /orP[/eqP[ <- //]|/=]; case: ltgtP.
   rewrite leNgt; apply/negP => b2x.
   case/andP : xa => xa1 xa2.
   move/negP : ba; apply.
   rewrite itv_leEmeet/= meet_l; last by rewrite (le_trans (ltW b2x)).
   rewrite join_l//.
   move: abt; rewrite /= /le_itv => /andP[/orP[/eqP[<- //]| /=]].
   by rewrite /lt_itv /=; case: ltgtP.
move/(@all_sorted_decompose (b :: t) (itv_diff a b) bt').
by apply: sub_all => z /andP[].
Qed.

Lemma trivIset_sorted_decompose s : sorted le_itv s -> all neitv s ->
  trivIset setT (fun k => [set` nth 0%O (sorted_decompose s) k]).
Proof.
move=> sorteds sne.
have [/size0nil -> |] := eqVneq (size (sorted_decompose s)) 0%N.
  apply/trivIsetP => /= i j _ _ ij.
  by rewrite nth_nil set_itvNlt_set0 // set0I.
rewrite size_eq0 => s0.
rewrite -(cons_head_beheadE 0%O s0); apply: neitv_sorted_disj_trivIset.
- have := sorted_decompose_nonempty sne.
  by rewrite -(cons_head_beheadE 0%O s0) /= => /andP[].
- by rewrite cons_head_beheadE// sorted_sorted_decompose.
- suff : path disjoint_itv 0%O
      (head 0%O (sorted_decompose s) :: behead (sorted_decompose s)).
    by move => /andP[].
  rewrite cons_head_beheadE// path_disj_itv_sorted_decompose => // i si.
  by apply/eqP; rewrite set_itvNlt_set0 // set0I.
Qed.

Definition decompose s := sorted_decompose (sort le_itv [seq x <- s | neitv x]).

Lemma itv_cplt_decomposeE s :
  [sset of itv_cplt_ne (decompose s)] = ~` [sset of s].
Proof.
have [sne ssorted sdisj] : [/\ all neitv (decompose s),
    sorted le_itv (decompose s) &
    path disjoint_itv (head 0%O (decompose s)) (behead (decompose s))].
  split.
  - rewrite sorted_decompose_nonempty // all_sort; apply/allP => i.
    by rewrite mem_filter => /andP[].
  - exact/sorted_sorted_decompose/(sort_sorted total_le_itv).
  - apply/path_disj_itv_sorted_decompose_head_behead.
    exact/(sort_sorted total_le_itv).
have [sdec1 sdec2] := sorted_le_itv_bound sne ssorted sdisj(*TODO*).
rewrite itv_cplt_neE // cover_sorted_decompose.
  by rewrite sset_sort_le_itv // sset_filter_neitv.
exact: (sort_sorted total_le_itv).
Qed.

Definition is_decomposition s : seq (interval R) -> Prop :=
  fun x => [/\ sorted le_itv x,
           path disjoint_itv (head 0%O x) (behead x) &
           [sset of x] = [sset of s] ].

Lemma is_decomposition_decompose s : is_decomposition s (decompose s).
Proof.
split.
- exact/sorted_sorted_decompose/(sort_sorted total_le_itv).
- apply: path_disj_itv_sorted_decompose_head_behead.
  exact/(sort_sorted total_le_itv).
- rewrite (cover_sorted_decompose (sort_sorted total_le_itv _)).
  by rewrite sset_sort_le_itv sset_filter_neitv.
Qed.

Lemma mem_decompose (j : interval R) s (r : R) : j \in s -> [set` j] r ->
  exists j', j' \in decompose s /\ [set` j'] r.
Proof.
move=> js jr.
have : [sset of s] r by rewrite sset_bigcup; exists j.
have [_ _] := is_decomposition_decompose s.
by move=> <-; rewrite sset_bigcup => -[j' sj' j'r]; exists j'.
Qed.

Lemma trivIset_decompose s :
  trivIset setT (fun k => [set` nth 0%O (decompose s) k]).
Proof.
have [->|s0] := eqVneq (decompose s) [::].
  by apply/trivIsetP => i j _ _ ?; rewrite nth_nil set_itvE set0I.
rewrite -(cons_head_beheadE 0%O s0); apply: neitv_sorted_disj_trivIset.
- apply/allP => /= j /mem_behead; rewrite /decompose.
  set s' := sort _ _.
  have /sorted_decompose_nonempty/allP sne : all neitv s'.
    by rewrite all_sort all_filter; apply/allP => i ia /=; exact: implybb.
  by move/sne.
- by rewrite cons_head_beheadE //; have [] := is_decomposition_decompose s.
- by have [] := is_decomposition_decompose s.
Qed.

Lemma decompose_nonempty s : all neitv (decompose s).
Proof.
rewrite /decompose; apply/sorted_decompose_nonempty.
by rewrite all_sort; apply/allP => i; rewrite mem_filter => /andP[].
Qed.

Lemma decompose_nil : decompose [::] = [::].
Proof. by rewrite /decompose /= sortE /= sorted_decompose_nil. Qed.

End decomposition.
Arguments decompose {R}.

Module Sset.
Section is_sset.
Variable R : realType.
Implicit Types A B : set R.

Definition is_sset A : Prop := exists s, A = [sset of s].

Lemma is_sset0 : is_sset set0. Proof. by exists fset0; rewrite sset_nil. Qed.

Lemma is_ssetU A B : is_sset A -> is_sset B -> is_sset (A `|` B).
Proof.
move=> [a aA] [b bB]; exists (a ++ b)%fset.
rewrite eqEsubset; split => [r [Ar|Br]|r].
  move: Ar; rewrite aA => /ssetP[/= j ja jr].
  by apply/ssetP; exists j => //; rewrite /mkset mem_cat ja.
  move: Br; rewrite bB => /ssetP[/= j jb jr].
  by apply/ssetP; exists j => //; rewrite /mkset mem_cat jb orbT.
move/ssetP => [j]; rewrite /mkset mem_cat => /orP[ja|jb] jr.
by left; rewrite aA; apply/ssetP; exists j.
by right; rewrite bB; apply/ssetP; exists j.
Qed.

Lemma is_ssetC A : is_sset A -> is_sset (~` A).
Proof.
move=> [a aA]; set s := itv_cplt_ne (decompose a).
exists [fset x | x in s]%fset; rewrite (@sseti _ _ s).
  by rewrite itv_cplt_decomposeE aA.
by move=> i; rewrite inE.
Qed.

End is_sset.

Section algebra_of_sets_instance.
Variable R : realType.

HB.instance Definition sset_algebraOfSets :=
  @isAlgebraOfSets.Build (Real.sort R) (@is_sset R)
  (@is_sset0 R) (@is_ssetU R) (@is_ssetC R).

Definition sset_algebraOfSetsType := [the algebraOfSetsType of (Real.sort R)].

Lemma is_sset_itv (i : interval R) : is_sset ([set` i]).
Proof. by exists [:: i]; rewrite sset_cons1. Qed.

Lemma is_sset_sset (s : seq (interval R)) : is_sset [sset of s].
Proof.
apply: (@bigsetU_measurable sset_algebraOfSetsType) => i _.
exact: is_sset_itv.
Qed.

End algebra_of_sets_instance.
End Sset.
Notation sset_algebraOfSetsType := Sset.sset_algebraOfSetsType.

Section conv_Rhull.
Variable R : realType.
Implicit Types (a b t r : R) (A : set R).

Lemma N01 t : (0 <= t <= 1) = (0 <= 1 - t <= 1).
Proof.
apply/idP/idP => /andP[t0 t1]; apply/andP; split; first by rewrite subr_ge0.
by rewrite ler_subl_addr addrC -ler_subl_addr subrr.
by move: t1; rewrite ler_subl_addr addrC -ler_subl_addr subrr.
by move: t0; rewrite subr_ge0.
Qed.

Definition conv t a b : R := (1 - t) * a + t * b.

Lemma conv0 a b : conv 0 a b = a.
Proof. by rewrite /conv subr0 mul1r mul0r addr0. Qed.

Lemma conv1 a b : conv 1 a b = b.
Proof. by rewrite /conv subrr mul0r add0r mul1r. Qed.

Lemma convN a b t : conv t a b = conv (1 - t) b a.
Proof. by rewrite /conv opprB addrCA subrr addr0 addrC. Qed.

Lemma le_conv a b t : a <= b -> 0 <= t <= 1 -> a <= conv t a b <= b.
Proof.
move=> ab /andP[].
rewrite le_eqVlt => /predU1P[/esym ->{t} _|t0]; first by rewrite conv0 lexx.
rewrite le_eqVlt => /predU1P[->{t0 t}|t1]; first by rewrite conv1 lexx andbT.
have t1t : 1 - t + t = 1 by rewrite subrK.
rewrite /conv; apply/andP; split.
  by rewrite -{1}(mul1r a) -{1}t1t [in X in X <= _]mulrDl ler_add // ler_pmul2l.
rewrite -{2}(mul1r b) -{2}t1t [in X in _ <= X]mulrDl ler_add // ler_pmul2l //.
by rewrite subr_gt0.
Qed.

Definition factor a b x := (x - a) / (b - a).

Lemma factor01 a b x : a != b -> a <= x -> x <= b -> 0 <= factor a b x <= 1.
Proof.
move=> ab ax xb; rewrite divr_ge0 // ?subr_ge0 // ?(le_trans ax) //=.
by rewrite ler_pdivr_mulr ?mul1r ?ler_sub// subr_gt0 lt_neqAle ab (le_trans ax).
Qed.

Lemma conv_factor a b x : a != b -> conv (factor a b x) a b = x.
Proof.
move=> ab; rewrite /conv -(@divff _ (b - a)) ?subr_eq0 1?eq_sym// -mulrBl.
rewrite opprB addrA subrK mulrAC (mulrAC (x - a)) -mulrDl 2!mulrBl.
rewrite -addrA (addrC (b * a)) -addrA (mulrC a b) subrK.
by rewrite -mulrN addrC -mulrDr -mulrA mulfV ?mulr1 // subr_eq0 eq_sym.
Qed.

Lemma conv_subset_Rhull A :
  [set x | exists a b t, [/\ A a, A b, 0 <= t <= 1 & x = conv t a b]]
    `<=` [set` Rhull A].
Proof.
move=> r -[a [b [t [Aa Ab /andP[t0 t1] ->{r}]]]].
have iRhullA := @interval_is_interval _ (Rhull A).
have [ab|/ltW ba] := leP a b.
  apply: (iRhullA a b); rewrite ?set_itv_mem; try exact/sub_Rhull.
  by rewrite le_conv // t0.
apply: (iRhullA b a); rewrite ?set_itv_mem; try exact/sub_Rhull.
by rewrite convN le_conv => //; rewrite -N01 t0.
Qed.

Lemma Rhull_subset_conv A : A !=set0 -> [set` Rhull A] `<=`
  [set x | exists a b t, [/\ A a, A b, 0 <= t <= 1 & x = conv t a b]].
Proof.
move=> A0 r; rewrite /Rhull; set i : R := inf A; set s : R := sup A.
have [|] := asboolP (has_lbound A) => lA.
- have [|]:= asboolP (has_ubound A) => uA.
  + have [|] := asboolP (A i) => Ai.
    * have [|] := asboolP (A s) => As; rewrite /= in_itv /= => /andP[ir rs].
      - have [si|si] := eqVneq i s.
        + have /eqP <- : i == r by rewrite eq_le {2}si ir.
          by exists i, s, 0; rewrite conv0 lexx ler01.
        + by exists i, s, (factor i s r); rewrite factor01 // conv_factor.
      - pose e := s - r.
        have [u ? seu] : exists2 u, A u & s - e < u.
          by apply sup_adherent; rewrite ?subr_gt0.
        have ? : i < u.
          rewrite (le_lt_trans _ seu)// (le_trans ir)// opprB addrCA subrr.
          by rewrite addr0.
        exists i, u, (factor i u r); rewrite factor01 ?conv_factor// ?lt_eqF//.
        by rewrite (le_trans _ (ltW seu))// /e opprB addrCA subrr addr0.
    * have [|] := asboolP (A s) => As; rewrite /= in_itv /= => /andP[ir rs].
      - pose e := r - i.
        have [l ? lie] : exists2 l, A l & l < i + e.
          by apply inf_adherent; rewrite ?subr_gt0.
        have ? : l < s.
          by rewrite (lt_le_trans lie)// (le_trans _ rs)// addrCA subrr addr0.
        exists l, s, (factor l s r); rewrite factor01// ?conv_factor// ?lt_eqF//.
        by rewrite (le_trans (ltW lie)) // /e addrCA subrr addr0.
      - pose e := ((r - i) `&` (s - r))%O.
        have [u ? seu] : exists2 u, A u & s - e < u.
          by apply sup_adherent; rewrite ?ltxI 2?subr_gt0 ?ir.
        have [l ? lie] : exists2 l, A l & l < i + e.
          by apply inf_adherent; rewrite ?ltxI 2?subr_gt0 ?ir.
        have ? : i + e <= r by rewrite -ler_sub_addl leIx lexx.
        have ? : r <= s - e.
          by rewrite -ler_sub_addr opprK -ler_sub_addl leIx lexx orbT.
        have ? : l < u.
           rewrite (lt_le_trans lie)// (le_trans _ (ltW seu))//.
           by rewrite (@le_trans _ _ r).
        exists l, u, (factor l u r); rewrite factor01// ?conv_factor// ?lt_eqF//.
          by rewrite (le_trans (ltW lie)).
        by rewrite (le_trans _ (ltW seu)).
  + have [|] := asboolP (A i) => /= Ai; rewrite in_itv /= andbT => ir.
    * have [u Au ru] : exists2 u, A u & r < u by move/has_ubPn : uA => /(_ r).
      have ? : i < u by rewrite (le_lt_trans ir).
      exists i, u, (factor i u r).
      by rewrite factor01// ?conv_factor // ?lt_eqF// ltW.
    * pose e := r - i.
      have [l ? lie] : exists2 l, A l & l < i + e
        by apply inf_adherent; rewrite ?subr_gt0.
      have [u ? ru] : exists2 u, A u & r < u
        by move/has_ubPn : uA => /(_ r).
      have ? : l < u by rewrite (lt_le_trans lie) // addrCA subrr addr0 ltW.
      have ? : l <= r by rewrite (le_trans (ltW lie)) // addrCA subrr addr0.
      exists l, u, (factor l u r).
      by rewrite factor01// ?conv_factor// ?lt_eqF// ltW.
- have [|] := asboolP (has_ubound A) => uA; last move=> _.
  + have [|] := asboolP (A s) => /= As; rewrite in_itv /= => rs.
    * have [l ? lr] : exists2 l, A l & l < r by move/has_lbPn : lA => /(_ r).
      have ? : l < s by rewrite (lt_le_trans lr).
      exists l, s, (factor l s r).
      by rewrite factor01// ?conv_factor// ?lt_eqF// ltW.
    * pose e := s - r.
      have [u ? seu] : exists2 u, A u & s - e < u.
        by apply sup_adherent; rewrite ?subr_gt0.
      have [l ? lr] : exists2 l, A l & l < r by move/has_lbPn : lA => /(_ r).
      have ? : l < u.
        rewrite (le_lt_trans _ seu)// (le_trans (ltW lr))// opprB addrCA.
        by rewrite subrr addr0.
      have ? : r <= u.
        by rewrite (le_trans _ (ltW seu))// opprB addrCA subrr addr0.
      exists l, u, (factor l u r).
      by rewrite factor01// ?conv_factor// ?lt_eqF// ltW.
  + have [l ? lr] : exists2 l, A l & l < r by move/has_lbPn : lA => /(_ r).
    have [u ? ru] : exists2 u, A u & r < u by move/has_ubPn : uA => /(_ r).
    have ? : l < u by rewrite (lt_trans lr).
    exists l, u, (factor l u r).
    by rewrite factor01// ?conv_factor// ?lt_eqF// ltW.
Qed.

Lemma le_Rhull : {homo (@Rhull R) : A B / (A `<=` B) >-> {subset A <= B}}.
Proof.
move=> A; have [A0 B AB r|/set0P A0 B AB r] := eqVneq A set0.
  by rewrite A0 Rhull0 in_itv /= lt_asym.
move/(Rhull_subset_conv A0) => -[a [b [t [Aa Ab /andP[t0 t1] ->]]]].
by apply/conv_subset_Rhull; exists a, b, t; rewrite t0 t1; split=> //; exact/AB.
Qed.

Lemma Rhull_pred0 A : Rhull A =i pred0 -> A = set0.
Proof.
move=> A0; rewrite predeqE => r; split => // /sub_Rhull.
by rewrite /mkset A0 inE.
Qed.

Lemma Rhull_involutive A : Rhull [set` Rhull A] = Rhull A.
Proof.
have [/Rhull_pred0 ->|/neitvP RhullN0] := asboolP (Rhull A =i pred0).
  by rewrite set_itvNlt_set0//= ?Rhull0// /neitv/= !lte_bnd ltxx.
by rewrite set_itvK.
Qed.

End conv_Rhull.

Coercion ereal_of_itv_bound T (b : itv_bound T) : \bar T :=
  match b with BSide _ y => y%:E | +oo%O => +oo%E | -oo%O => -oo%E end.
Arguments ereal_of_itv_bound T !b.

Lemma le_bnd_ereal (R : realDomainType) (a b : itv_bound R) :
  (a <= b)%O -> (a <= b)%E.
Proof.
move: a b => -[[] a|[]] [bb b|[]] //=; rewrite ?(lee_pinfty,lee_ninfty)//.
  by rewrite BLeft_BSide_leE lee_fin.
by case: bb => //; rewrite BRight_BLeft_leE => /ltW; rewrite lee_fin.
Qed.

Lemma lt_ereal_bnd (R : realDomainType) (a b : itv_bound R) :
  (a < b)%E -> (a < b)%O.
Proof.
by move: a b => -[[] a|[]] [[] b|[]] //=;
  rewrite ?(lee_pinfty,lee_ninfty,lte_fin)// => ab; rewrite lte_bnd ltW.
Qed.

Section hlength.
Variable R : realType.

Definition hlength {R : realType} (A : set R) : \bar R :=
  let i := Rhull A in (i.2 - i.1)%E.

Lemma hlength0 : hlength (set0 : set R) = 0%:E.
Proof. by rewrite /hlength Rhull0 /= subee. Qed.

Lemma hlength_singleton (r : R) : hlength `[r, r]%classic = 0%:E.
Proof.
rewrite /hlength /= asboolT // sup_itvcc //= asboolT//.
by rewrite asboolT ?inf_itvcc//= ?subee// inE.
Qed.

Lemma hlength_itv (i : interval R) :
  hlength [set` i] = if (i.2 > i.1)%E then (i.2 - i.1)%E else 0%:E.
Proof.
case: ltP => [i12|].
  rewrite /hlength set_itvK// inE; move: i12.
  by move/lt_ereal_bnd; rewrite ltNge; apply: contra.
rewrite le_eqVlt => /orP[|/lt_ereal_bnd i12]; last first.
  by rewrite set_itvNlt_set0 ?hlength0// -leNgt ltW.
case: i => -[ba a|[|]] [bb b|[|]] //=.
- rewrite /= => /eqP[->{b}]; move: ba bb => -[] []; try
    by rewrite set_itvNlt_set0 ?hlength0 //= /neitv /= lte_bnd -leNgt.
  by rewrite hlength_singleton.
- by move=> _; rewrite set_itvE hlength0.
- by move=> _; rewrite set_itvE hlength0.
Qed.

Lemma hlength_setT : hlength setT = +oo%E :> \bar R.
Proof. by rewrite -set_itv_infty_infty hlength_itv. Qed.

Lemma hlength_infty_bnd b r :
  hlength [set` Interval -oo%O (BSide b r)] = +oo%E :> \bar R.
Proof. by rewrite hlength_itv /= lte_ninfty. Qed.

Lemma hlength_bnd_infty b r :
  hlength [set` Interval (BSide b r) +oo%O] = +oo%E :> \bar R.
Proof. by rewrite hlength_itv /= lte_pinfty. Qed.

Lemma pinfty_hlength (i : interval R) : hlength [set` i] = +oo%E ->
  (exists s r, i = Interval -oo%O (BSide s r) \/ i = Interval (BSide s r) +oo%O)
  \/ i = `]-oo, +oo[.
Proof.
rewrite hlength_itv; case: i => -[ba a|[]] [bb b|[]] //= => [|_|_|].
- by case: ifPn.
- by left; exists ba, a; right.
- by left; exists bb, b; left.
- by right.
Qed.

Lemma hlength_ge0 (i : interval R) : (0%:E <= hlength [set` i])%E.
Proof.
rewrite hlength_itv; case: ifPn => //; case: (i.1 : \bar _) => [r||].
- by rewrite suber_ge0//; exact: ltW.
- by rewrite ltNge lee_pinfty.
- case: (i.2 : \bar _) => //=.
  + by move=> r _; rewrite lee_pinfty.
  + by rewrite lee_pinfty.
Qed.
Local Hint Extern 0 (0%:E <= hlength _) => solve[apply: hlength_ge0] : core.

Lemma hlength_Rhull (A : set R) : hlength [set` Rhull A] = hlength A.
Proof. by rewrite /hlength Rhull_involutive. Qed.

Lemma le_hlength_itv (i j : interval R) : {subset i <= j} ->
 (hlength [set` i] <= hlength [set` j])%E.
Proof.
set I := [set` i]; set J := [set` j].
have [->|/set0P I0] := eqVneq I set0; first by rewrite hlength0 hlength_ge0.
have [J0|/set0P J0] := eqVneq J set0.
  by move/subset_itvP; rewrite -/J J0 subset0 -/I => ->.
move=> /subset_itvP ij; apply: lee_sub => /=.
  have [ui|ui] := asboolP (has_ubound I).
    have [uj /=|uj] := asboolP (has_ubound J); last by rewrite lee_pinfty.
    by rewrite lee_fin le_sup // => r Ir; exists r; split => //; apply: ij.
  have [uj /=|//] := asboolP (has_ubound J).
  by apply: (absurdnot ui); apply: subset_has_ubound uj.
have [lj /=|lj] := asboolP (has_lbound J); last by rewrite lee_ninfty.
have [li /=|li] := asboolP (has_lbound I); last first.
  by apply: (absurdnot li); apply: subset_has_lbound lj.
rewrite lee_fin ler_oppl opprK le_sup// ?has_inf_supN//; last first.
  by case: I0 => x Ix; exists (- x), x.
move=> r [r' Ir' <-{r}]; exists (- r').
by split => //; exists r' => //; apply: ij.
Qed.

Lemma le_hlength : {homo (@hlength R) : A B / (A `<=` B) >-> (A <= B)%E}.
Proof.
move=> a b /le_Rhull /le_hlength_itv.
by rewrite (hlength_Rhull a) (hlength_Rhull b).
Qed.

End hlength.
Hint Extern 0 (0%:E <= hlength _) => solve[apply: hlength_ge0] : core.

Lemma IntervalE (R : numDomainType) (i : interval R) : i = Interval i.1 i.2.
Proof. by case: i. Qed.

Section seq_interval_bounds.
Variable R : realType.
Implicit Types i j : interval R.

Lemma le_itv_bnd1 i j : le_itv i j -> (i.1 <= j.1)%O.
Proof.
move=> /orP[/eqP ->//|]; rewrite /lt_itv.
by move: i j => [i1 i2] [j1 j2] /=; case: ltgtP.
Qed.

Lemma le_itv_bnd2 i j : le_itv i j -> neitv j ->
  disjoint_itv i j -> (i.2 <= j.2)%O.
Proof.
move: i j => [i1 i2] [j1 j2] /=.
rewrite /le_itv /lt_itv /= => /orP[/eqP[-> -> //]|] /=.
case: ltgtP => // [i1j1 _ j0 ij|->{i1} /ltW //].
rewrite leNgt; apply/negP => j2i2.
move/eqP : ij; apply/eqP.
by rewrite -set_itv_meet /= (join_r (ltW _))// (meet_r (ltW _))// set_itv_neq0.
Qed.

Lemma le_itv_disj_bnd2_bnd1 i j : neitv i -> neitv j -> le_itv i j ->
  disjoint_itv i j -> (i.2 <= j.1)%O.
Proof.
move=> i0 j0 le_ij dis_ij; rewrite leNgt; apply/negP => i1i.
move: (dis_ij); apply/negP.
move: (le_ij) => /orP[/eqP <-|].
  by rewrite /disjoint_itv setIid set_itv_neq0.
move: i1i.
have : (i.1 <= j.1)%O by exact: le_itv_bnd1.
have i2j2 : (i.2 <= j.2)%O by apply le_itv_bnd2.
rewrite /lt_itv le_eqVlt => /predU1P[i1j1 K1I2|I1K1 K1I2].
  rewrite i1j1 ltxx eqxx => /= {}I2K2.
  rewrite /disjoint_itv -set_itv_meet set_itv_neq0 /=.
  by rewrite (IntervalE i) (IntervalE j) /= i1j1 join_l // meet_l.
rewrite I1K1 => _; rewrite /disjoint_itv -set_itv_meet (IntervalE i).
by rewrite (IntervalE j) /= (join_r (ltW I1K1)) meet_l // set_itv_neq0.
Qed.

(* TODO: rename *)
Lemma le_itv_disj_bnd2Noo i j : neitv i -> neitv j ->
  le_itv i j -> disjoint_itv i j -> i.2 != +oo%O.
Proof.
move=> i0 j0 ss ts; apply/negP => /eqP ioo.
have := le_itv_disj_bnd2_bnd1 i0 j0 ss ts; rewrite ioo ge_pinfty => ii1.
by move: j0; rewrite /neitv /=; apply/negP; rewrite (eqP ii1) -leNgt bound_lex1.
Qed.

Lemma le_itv_disj_bnd1Noo i j : neitv i -> neitv j ->
  le_itv i j -> disjoint_itv i j -> j.1 != -oo%O.
Proof.
move=> i0 j0 ss ts; apply/negP => /eqP ioo.
have := le_itv_disj_bnd2_bnd1 i0 j0 ss ts; rewrite ioo le_ninfty => ii1.
by move: i0; rewrite /neitv /=; apply/negP; rewrite (eqP ii1) -leNgt.
Qed.

Lemma le_itv_disj_bnd2r i j : neitv i -> neitv j ->
  le_itv i j -> disjoint_itv i j -> exists b r, i.2 = BSide b r.
Proof.
move=> i0 j0 les ts.
move i2E : (i.2) => i2; case: i2 => [b i2|[]] in i2E *.
- by exists b, i2.
- apply: (absurd i2E); apply/eqP.
  by rewrite (@neitv_bnd2 _ [:: i]) //= ?andbT// ?inE.
- by apply: (absurd i2E); apply/eqP/(le_itv_disj_bnd2Noo _ j0).
Qed.

Lemma le_itv_disj_bnd1r i j : neitv i -> neitv j ->
  le_itv i j -> disjoint_itv i j -> exists b a, j.1 = BSide b a.
Proof.
move=> i0 j0 sle str.
move i1E : (j.1) => i1; case: i1 => [b i1|[]] in i1E *.
- by exists b, i1.
- by apply (absurd i1E); apply/eqP/(@le_itv_disj_bnd1Noo i).
- apply (absurd i1E); apply/eqP.
  move: j0; rewrite /neitv /= ltNge; apply: contra => /eqP ->.
  by rewrite bound_lex1.
Qed.

Lemma le_itv_disj_contiguous i j : neitv i -> neitv j ->
  le_itv i j -> disjoint_itv i j -> is_interval ([set` i] `|` [set` j]) ->
  contiguous_itv i j.
Proof.
move=> ine jne ij dij sin.
rewrite /contiguous_itv eq_le; apply/andP; split.
  exact: le_itv_disj_bnd2_bnd1.
have [b [x bx]] := le_itv_disj_bnd2r ine jne ij dij.
have [c [y cy]] := le_itv_disj_bnd1r ine jne ij dij.
set m := (x + y) / 2.
rewrite leNgt bx cy; apply/negP => xy.
have xyW : x <= y.
  by move: b c {cy bx} xy => [] [] /=; rewrite lte_bnd // => /ltW.
have xys : Interval (BSide b x) (BSide c y) \in itv_cplt [:: i; j].
  rewrite /itv_cplt; apply/mapP; exists (BSide b x, BSide c y) => //.
  apply/(nthP (+oo%O, -oo%O)); exists 1%N; first by rewrite size_zip.
  by rewrite !nth_zip //= -bx -cy.
have : m \in [sset of itv_cplt [:: i; j]].
  rewrite sset_bigcup in_setE.
  exists (Interval (BSide b x) (BSide c y)) => //=.
  rewrite /m -/(itv_center (Interval (BSide b x) (BSide c y))).
  by rewrite mem_itv_center // set_itv_neq0.
rewrite itv_cpltE; last 2 first.
  by rewrite /= !andbT; exact: le_itv_bnd2.
  by rewrite /= !andbT; exact: le_itv_bnd1.
rewrite inE; apply; rewrite sset_cons sset_cons1.
set midi := itv_center i; set midj := itv_center j.
move: sin => /(_ midi midj); apply.
- by left; rewrite /= mem_itv_center // -set_itv_neq0 //; exact/set0P.
- by right; rewrite /= mem_itv_center // -set_itv_neq0 ; exact/set0P.
- have := itv_center_bnd2 ine b; rewrite bx BSide_leE -/midi => midix.
  have := itv_center_bnd1 jne c; rewrite cy BSide_leE -/midj => midjy.
  by rewrite (le_trans midix) /= ?midf_le// (le_trans _ midjy) //= midf_le.
Qed.

End seq_interval_bounds.

(* TODO: move *)
Lemma cover_restr T I D' D (F : I -> set T) :
  D `<=` D' -> (forall i, D' i -> ~ D i -> F i = set0) ->
  cover D F = cover D' F.
Proof.
move=> DD' D'DF; rewrite /cover eqEsubset; split=> [r [i Di Fit]|r [i D'i Fit]].
- by have [D'i|] := pselect (D' i); [exists i | have := DD' _ Di].
- by have [Di|Di] := pselect (D i); [exists i | move: Fit; rewrite (D'DF i)].
Qed.

Lemma eqcover_r (R : Type) (D : set nat) (F G : nat -> set R) :
  [set F i | i in D] = [set G i | i in D] ->
  cover D F = cover D G.
Proof.
move=> FG.
rewrite eqEsubset; split => [t [i Di Fit]|t [i Di Git]].
  have [j Dj GF] : [set G i | i in D] (F i) by rewrite -FG /mkset; exists i.
  by exists j => //; rewrite GF.
have [j Dj GF] : [set F i | i in D] (G i) by rewrite FG /mkset; exists i.
by exists j => //; rewrite GF.
Qed.

Section seq_interval_rbnd.
Variable R : realType.
Implicit Types (i j : interval R) (A B : set R).
Local Open Scope ereal_scope.

Lemma hlength_finite_fin_num i : neitv i -> hlength [set` i] < +oo ->
  ((i.1 : \bar R) \is a fin_num) /\ ((i.2 : \bar R) \is a fin_num).
Proof.
move: i => [[ba a|[]] [bb b|[]]] //=; do ?by rewrite ?set_itvE ?eqxx.
by move=> _; rewrite hlength_itv /= lte_pinfty.
by move=> _; rewrite hlength_itv /= lte_ninfty.
by move=> _; rewrite hlength_itv /=.
Qed.

Lemma finite_hlengthE i : neitv i -> hlength [set` i] < +oo ->
  hlength [set` i] = (real_of_extended i.2)%:E - (real_of_extended i.1)%:E.
Proof.
move=> i0 ioo; have [ri1 ri2] := hlength_finite_fin_num i0 ioo.
rewrite -!EFin_real_of_extended // hlength_itv; case: ifPn => //.
rewrite -leNgt le_eqVlt => /predU1P[->|]; first by rewrite subee.
by move/lt_ereal_bnd/ltW; rewrite leNgt; move: i0; rewrite /neitv /= => ->.
Qed.

Lemma set_itvP i j : [set` i] = [set` j] :> set _ <-> i =i j.
Proof.
split => [ij x|ij]; first by have /(congr1 (@^~ x))/=/is_true_inj := ij.
by rewrite predeqE => r /=; rewrite ij.
Qed.

Lemma hlength_itv0 i : i =i pred0 -> hlength [set` i] = 0%:E.
Proof. by move=> /set_itv0P ->; rewrite hlength0. Qed.

Lemma hlength_set i j : i =i j -> hlength [set` i] = hlength [set` j].
Proof. by move=> /set_itvP->. Qed.

Lemma disj_itv_Rhull A B : A `&` B = set0 ->
  is_interval A -> is_interval B -> disjoint_itv (Rhull A) (Rhull B).
Proof.
by move=> AB0 iA iB; rewrite /disjoint_itv RhullK ?inE// RhullK // inE.
Qed.

Lemma Rhull_setU2 A B : B !=set0 -> A `&` B = set0 ->
  is_interval A -> is_interval B -> lt_itv (Rhull A) (Rhull B) ->
  (Rhull (A `|` B)).2 = (Rhull B).2.
Proof.
move=> B0 AB0 iA iB AB /=.
have [|] := asboolP (has_ubound (A `|` B)) => uAB; last first.
  rewrite asboolF //; apply: contra_not uAB => -[x Bx].
  exists x => z [Az|Bz]; last exact: Bx.
  case: B0 => b0 Bb0; rewrite (@le_trans _ _ b0) //; last exact: Bx.
  apply/ltW/(lt_itv_lt AB) => //; try exact: sub_Rhull.
  by rewrite disj_itv_Rhull.
have uB : has_ubound B.
  case: uAB => x ABx.
  by exists x => y By; apply ABx; right.
rewrite (asboolT uB) // sup_setU //; last first.
  move=> a b Aa Bb.
  apply/ltW/(lt_itv_lt AB) => //; try exact/sub_Rhull.
  by rewrite disj_itv_Rhull.
congr (BSide (~~ `[< _ >]) _).
rewrite propeqE; split; last by right.
case => // AsB.
move/set0P in B0; apply: (absurdNb B0); apply/eqP.
rewrite predeqE => x; split => // Bx.
have : (sup B < x)%R.
  apply: (lt_itv_lt AB) => //; try exact: sub_Rhull.
  by rewrite disj_itv_Rhull.
by apply/negP; rewrite -leNgt; exact: sup_ub.
Qed.

Lemma Rhull_setU1 A B : A !=set0 -> A `&` B = set0 ->
  is_interval A -> is_interval B -> lt_itv (Rhull A) (Rhull B) ->
  (Rhull (A `|` B)).1 = (Rhull A).1.
Proof.
move=> A0 AB0 iA iB AB /=.
have [|] := asboolP (has_lbound (A `|` B)) => uAB; last first.
  rewrite asboolF //.
  apply: contra_not uAB => -[x Ax].
  exists x => y [Ay|By]; first exact: Ax.
  case: A0 => a0 Aa0.
  rewrite (@le_trans _ _ a0) //; first exact: Ax.
  apply/ltW/(lt_itv_lt AB); try exact: sub_Rhull.
  by rewrite disj_itv_Rhull.
have lA : has_lbound A.
  case: uAB => x ABx.
  by exists x => y Ay; apply ABx; left.
rewrite (asboolT lA) // inf_setU //; last first.
  move=> a b Aa Bb.
  apply/ltW/(lt_itv_lt AB) => //; try exact/sub_Rhull.
  by rewrite disj_itv_Rhull.
congr (BSide (`[< _ >]) _).
rewrite propeqE; split; last by left.
case => // AsB.
apply: (absurd A0) => -[a0 Aa0].
have : (a0 < inf A)%R.
  apply: (lt_itv_lt AB) => //; try exact: sub_Rhull.
  by rewrite disj_itv_Rhull.
by apply/negP; rewrite -leNgt; apply inf_lb.
Qed.

Lemma hlength_itvU A B : A `&` B = set0 -> is_interval A -> is_interval B ->
  is_interval (A `|` B) -> hlength (A `|` B) = hlength A + hlength B.
Proof.
move=> AB0 iA iB iAUB.
have [->|/set0P A0] := eqVneq A set0; first by rewrite set0U hlength0 add0e.
have [->|/set0P B0] := eqVneq B set0; first by rewrite setU0 hlength0 adde0.
wlog : A B A0 B0 AB0 iA iB iAUB / lt_itv (Rhull A) (Rhull B).
  move=> H; have [AB|AB] := eqVneq (Rhull A) (Rhull B).
      move/(congr1 (fun i => [set` i])) : AB AB0.
      rewrite RhullK ?inE// RhullK ?inE// => ->.
      by rewrite setIid => /eqP; move/set0P : B0 => /negbTE ->.
  have /orP[|] := total_le_itv (Rhull A) (Rhull B).
    by rewrite /le_itv (negbTE AB) orFb; exact: H.
  rewrite /le_itv eq_sym (negbTE AB) orFb => {}AB.
  by rewrite setUC H // 1?addeC// 1?setIC// 1?setU // setUC.
move=> AB.
have : contiguous_itv (Rhull A) (Rhull B).
  apply le_itv_disj_contiguous => //; do 1?
    [by rewrite -set_itv_neq0 RhullK ?inE//; exact/set0P].
  by rewrite ltW_itv.
  by rewrite disj_itv_Rhull.
  by rewrite RhullK ?inE// RhullK ?inE.
rewrite /contiguous_itv => /eqP A2B1.
rewrite /hlength A2B1 Rhull_setU2// Rhull_setU1// [in RHS]addeC ![in RHS]addeA.
congr (_ - _)%E; rewrite subeK //.
case: (Rhull B).1 => [b b1|[]] // in A2B1 *.
- move/set0P : A0; apply: absurdb.
 rewrite -(@RhullK _ A) ?inE //.
  rewrite set_itvNlt_set0 //.
  by rewrite /neitv topredE inE A2B1 -leNgt.
- apply: (absurd A2B1); apply/eqP.
  apply: (@le_itv_disj_bnd2Noo _ _ (Rhull B)) => //; do 1?
    [by rewrite -set_itv_neq0 RhullK ?inE//; exact/set0P].
  + exact/ltW_itv.
  + by rewrite disj_itv_Rhull.
Qed.

Lemma perm_subset_set_itv_nth (D : set nat) (s s' : seq (interval R)) :
  [set k | (k < size s)%N] `<=` D -> perm_eq s s' ->
  [set [set` nth 0%O s i] | i in D] `<=`
    [set [set` nth 0%O s' i] | i in D].
Proof.
move=> sD ss' A [i Di iA].
have [/(mem_nth 0%O)|si] := ltnP i (size s); last first.
  move: iA; rewrite nth_default // => <-.
  by exists i => //; rewrite nth_default // -(perm_size ss').
move/perm_mem : (ss') => ->.
move/(nthP 0%O) => [j js' ji]; exists j; last by rewrite ji.
by apply sD; rewrite (perm_size ss').
Qed.

Lemma perm_set_itv_nth (D : set nat) (s s' : seq (interval R)) :
  [set k | (k < size s)%N] `<=` D -> perm_eq s s' ->
  [set [set` nth 0%O s i] | i in D] =
    [set [set` nth 0%O s' i] | i in D].
Proof.
move=> sD ss'; rewrite eqEsubset; split; apply perm_subset_set_itv_nth => //.
by rewrite -(perm_size ss').
by rewrite perm_sym.
Qed.

Lemma cover_set_itv_nth_sort (D : set nat) (s : seq (interval R)) :
  [set k | (k < size s)%N] `<=` D ->
  cover D (fun n => [set` nth 0%O s n]) =
  cover D (fun n => [set` nth 0%O (sort le_itv s) n]).
Proof.
move=> sD; apply: eqcover_r; apply: perm_set_itv_nth => //.
by rewrite perm_sym perm_sort.
Qed.

Lemma cover_set_itv_nthE (s : seq (interval R)) (D : set nat) :
  [set k | (k < size s)%N] `<=` D ->
  cover D (fun n => [set` nth 0%O s n]) = \big[setU/set0]_(i <- s) [set` i].
Proof.
move=> sD; rewrite eqEsubset; split => [r [i Di ri]|r].
- rewrite -bigcup_set; exists (nth 0%O s i) => //; apply/mem_nth.
  by rewrite ltnNge; apply: contraPN ri => si; rewrite nth_default.
- rewrite -bigcup_set => -[/= i /(nthP 0%O)[k ks <-{i} kr]]; exists k => //.
  exact: sD.
Qed.

Lemma hlengthUitv (A : set R) (s : seq (interval R)) :
  is_interval A ->
  cover setT (fun n => [set` nth 0%O s n]) = A ->
  trivIset setT (fun n => [set` nth 0%O s n]) ->
  hlength A = \sum_(i <- s) hlength [set` i].
Proof.
move=> Aitv AE ts.
have Fmap (s' : seq (interval R)) :
    (fun n => [set` nth 0%O s' n]) =
      (fun n => nth 0%O [seq [set` j] | j <- s'] n).
  apply/funext => i; have [is'|is'] := ltnP i (size s').
    by rewrite (nth_map 0%O).
  by rewrite !nth_default ?size_map// set_itvE.
wlog : s ts AE / sorted le_itv s => [hwlog|].
  have /permPl pss := perm_sort le_itv s.
  rewrite -(perm_big _ pss); apply: hwlog; [exact: trivIset_sort|
    by rewrite -cover_set_itv_nth_sort|exact: (sort_sorted total_le_itv)].
elim: (s : seq _) => [|j {}s IHs]/= in A Aitv ts AE *.
  rewrite /cover bigcup0 in AE; last by move=> i _; rewrite nth_nil set_itvE.
  by rewrite !big_nil/= in AE * => _; rewrite -AE hlength0.
rewrite (path_sortedE le_itv_trans) => /andP[/allP/= j_small s_sorted].
set K := \big[setU/set0]_(j <- s) [set` j].
have K_itv : is_interval K.
  move=> x z Kx Kz y /andP[xy yz].
  have: A y.
    apply: (Aitv x z); rewrite ?xy//;
      by rewrite -AE cover_set_itv_nthE// big_cons; right.
  rewrite -AE /= cover_set_itv_nthE// big_cons=> -[]//.
  move=> jy; move: Kx; rewrite /K.
  rewrite -bigcup_set => -[k/= ks kx].
  suff : (x > y)%R by case: ltgtP xy.
  apply: (le_itv_lt (j_small k ks)) => //.
  have /(nthP 0%O)[ik ik_small <-] := ks.
  rewrite /disjoint_itv; apply/eqP.
  by have /trivIsetP-/(_ 0%N ik.+1 I I isT) := ts.
transitivity (hlength [set` j] + hlength K); last first.
  rewrite big_cons; congr (_ + _)%E; rewrite IHs// ?cover_set_itv_nthE//.
  by move=> i0 i1 _ _ /(ts i0.+1 i1.+1 I I)[].
rewrite -AE cover_set_itv_nthE// big_cons /= hlength_itvU//.
- rewrite big_distrr/= big1_seq => //= i /(nthP 0%O)[ii ii_lt <-].
  by apply: contraTeq isT => /set0P-/(ts 0%N ii.+1 I I).
- exact: interval_is_interval.
- by move: AE; rewrite cover_set_itv_nthE// big_cons => ->.
Qed.

Lemma trivIset_itv_meet (s : seq (interval R)) (i : interval R) :
  trivIset setT (fun n => [set` nth 0%O s n]) ->
  trivIset setT (fun n => [set` nth 0%O [seq itv_meet i j | j <- s] n]).
Proof.
move=> tJ.
rewrite -(@trivIset_restr _ _ _ [set k | (k < size s)%N]) //; last first.
  move=> k _ /negP; rewrite -leqNgt => Jk.
  by rewrite nth_default ?size_map// set_itvE.
apply/trivIsetP => a b aJ bJ ab.
rewrite (nth_map 0%O) // (nth_map 0%O) // !set_itv_meet setIACA setIid.
by move/trivIsetP : tJ => -> //; rewrite setI0.
Qed.

Lemma cover_hlength_set_itv (I J : seq (interval R)) :
  cover setT (fun n => [set` nth 0%O I n]) =
    cover setT (fun n => [set` nth 0%O J n]) ->
  trivIset setT (fun n => [set` nth 0%O J n]) ->
  forall i, i \in I ->
  hlength [set` i] = \sum_(j <- J) hlength [set` itv_meet i j].
Proof.
move=> IJ tJ i iI.
have h : [set` i] = \big[setU/set0]_(j <- J) ([set` i] `&` [set` j]).
  rewrite -big_distrr /= (big_nth 0%O) big_mkord.
  move/esym: (IJ).
  rewrite -(@cover_restr _ _ _ [set k | (k < size J)%N]) //; last first.
    by move=> k _ /negP; rewrite -leqNgt => Jk; rewrite nth_default // set_itvE.
  rewrite /cover bigcup_mkord => ->; apply/esym; rewrite setIidPl.
  move: iI => /(nthP 0%O)[k kI <-].
  exact: (@bigcup_sup _ _ k setT (fun n => [set` nth 0%O I n])).
rewrite h (@hlengthUitv _ [seq (itv_meet i j) | j <- J]) // ?big_map//.
- by rewrite -h; apply: interval_is_interval.
- rewrite -(@cover_restr _ _ _ [set k | (k < size J)%N]) //; last first.
    move=> k _ /negP; rewrite -leqNgt => Jk.
    by rewrite nth_default ?size_map// set_itvE.
  rewrite /cover bigcup_mkord (big_nth 0%O) big_mkord.
  by apply eq_bigr => k _; rewrite (nth_map 0%O) // set_itv_meet.
- exact: trivIset_itv_meet.
Qed.

Lemma hlengthUset (I J : seq (interval R)) :
  cover setT (fun n => [set` nth 0%O I n]) =
    cover setT (fun n => [set` nth 0%O J n]) ->
  trivIset setT (fun n => [set` nth 0%O I n]) ->
  trivIset setT (fun n => [set` nth 0%O J n]) ->
  \sum_(i <- I) hlength [set` i] = \sum_(i <- J) hlength [set` i].
Proof.
move=> IJ tI tJ.
rewrite big_seq [RHS]big_seq.
(under eq_bigr) => [i /(cover_hlength_set_itv IJ tJ) ->|]; first over.
rewrite /= exchange_big /=; apply/esym.
(under eq_bigr) => [j /(cover_hlength_set_itv (esym IJ) tI) ->|]; first over.
rewrite -big_seq; apply eq_bigr => j _; rewrite -big_seq.
by under eq_bigr do rewrite itv_meetC.
Qed.

Lemma hlength_bigcup_finite_cond (j : (interval R)^nat) (P : set nat) :
  hlength (\bigcup_(k in P) [set` j k]) < +oo ->
  forall k, P k -> hlength [set` j k] < +oo.
Proof.
move=> joo k Pk; rewrite ltNge lee_pinfty_eq; apply/negP => /eqP jkoo.
have /le_hlength : [set` j k] `<=` \bigcup_(k in P) [set` j k].
  by move=> r jkr; exists k.
by rewrite {}jkoo leNgt => /negP; apply.
Qed.

Lemma hlength_bigcup_finite (j : (interval R)^nat) :
  hlength (\bigcup_k [set` j k]) < +oo -> forall k, hlength [set` j k] < +oo.
Proof.
move=> joo k; rewrite ltNge lee_pinfty_eq; apply/negP => /eqP jkoo.
have /le_hlength : [set` j k] `<=` \bigcup_k [set` j k].
  by move=> r jkr; exists k.
by rewrite {}jkoo leNgt => /negP; apply.
Qed.

End seq_interval_rbnd.

Lemma ereal_mem_Interval (R : realDomainType) (r : R) (a b : itv_bound R) :
  (a < r%:E < b)%E -> r \in Interval a b.
Proof.
move: a b => [[]a|[]] [[]b|[]] //=; rewrite ?lte_fin ?in_itv //= => /andP[] //.
- by move=> /ltW ->.
- by move=> /ltW -> /ltW ->.
- by move=> /ltW ->.
- by move=> -> /ltW.
- by move=> ->.
- by move=> _ /ltW.
Qed.

Lemma Interval_ereal_mem (R : realDomainType) (r : R) (a b : itv_bound R) :
  r \in Interval a b -> (a <= r%:E <= b)%E.
Proof.
move: a b => [[]a|[]] [[]b|[]] //=; rewrite ?lee_fin ?in_itv ?(andbT,andbF) //=.
- by move=> /andP[-> /ltW ->].
- by move=> ->; rewrite lee_pinfty.
- by move=> /andP[/ltW -> /ltW ->].
- by move=> /andP[/ltW ->].
- by move=> /ltW ->; rewrite lee_pinfty.
- by move=> /ltW ->; rewrite lee_ninfty.
- by move=> ->; rewrite lee_ninfty.
- by move=> _; rewrite lee_pinfty lee_ninfty.
Qed.

Lemma decompose_set0 (R : realType) (s : seq (interval R)) : [sset of s] = set0 ->
  forall i, i \in decompose s -> i =i pred0.
Proof.
move=> s0 i si x; apply/idP/idP; apply/negP => xi.
have : [sset of decompose s] = [sset of s].
  rewrite /decompose cover_sorted_decompose.
    by rewrite sset_sort_le_itv sset_filter_neitv.
  exact: (sort_sorted total_le_itv).
by rewrite s0 =>/eqP; apply/negP/set0P; exists x; rewrite sset_bigcup; exists i.
Qed.

Lemma le_sum_measure_bigcup (R : realType)
   (F : (set (sset_algebraOfSetsType R))^nat)
   (l : {additive_measure set (sset_algebraOfSetsType R) -> \bar R}) :
   (forall k, measurable (F k)) -> measurable (\bigcup_n F n) -> trivIset setT F ->
  forall n, (\sum_(k < n) l (F k) <= l (\bigcup_k F k))%E.
Proof.
move=> mS US tS n.
have : \big[setU/set0]_(i < n) F i `<=` \bigcup_i F i.
  by move=> /= r; rewrite -bigcup_set => -[/= k _ Skr]; exists k.
move: (@bigsetU_measurable _ _ (enum 'I_n) xpredT _ (fun k _ => mS k)).
rewrite [in X in X -> _]big_enum => mU /(le_measure l) /=.
rewrite !inE /=.
by move=> /(_ mU US); apply: le_trans; rewrite measure_bigcup.
Qed.

Section slength_definition.
Variable R : realType.
Implicit Types i : interval R.

Definition slength (A : set R) : \bar R :=
  let s := xget [::] [set s | A = [sset of s] ] in
  \sum_(i <- decompose s) hlength [set` i].

Lemma slength_ge0 (X : set (sset_algebraOfSetsType R)) : (0 <= slength X)%E.
Proof.
rewrite /slength; case: xgetP => [/= x _ _|_]; last first.
  by rewrite decompose_nil big_nil.
by apply/sume_ge0 => i _; apply hlength_ge0.
Qed.

Lemma slength0 : slength set0 = 0%E.
Proof.
rewrite /slength; case: xgetP => [|_]; last by rewrite decompose_nil big_nil.
move=> /= x _ /esym/decompose_set0 x0; rewrite big_seq big1//.
by move=> i /x0/set_itv0P ->; rewrite hlength0.
Qed.

Lemma slength_itv i : slength ([set` i]) = hlength ([set` i]).
Proof.
have [->|i0] := eqVneq [set` i] set0.
  by rewrite slength0 hlength0.
rewrite /slength; case: xgetP => [/= s _ si|]; last first.
  by move=> /(_ [fset i]%fset) /=; rewrite ssetE big_seq_fset1.
rewrite -[RHS]/((hlength \o (fun i => [set` i])) i) -[RHS](big_seq1 adde_monoid i).
apply: hlengthUset.
+ do 2 rewrite cover_set_itv_nthE//.
  move: (is_decomposition_decompose s) => [_ _ cover_s].
  by rewrite -!ssetE cover_s -si ssetE big_seq1.
+ apply: (trivIset_sorted_decompose (sort_sorted total_le_itv _)).
  by apply/allP => j; rewrite mem_sort /= mem_filter => /andP[].
+ apply/trivIsetP => -[|a] [|b] //=;
    by rewrite nth_nil set_itvE ?(setI0,set0I).
Qed.

End slength_definition.
Arguments slength {R}.
Arguments slength0 {R}.

Section addressing_sequence_of_simple_sets.
Variables (R : realType) (s : (seq (interval R))^nat).
Hypothesis s0 : forall n, size (s n) != O. (* no empty intervals *)

(* indirect address *)
Fixpoint indaddr (b p : nat) : nat * nat :=
  if p isn't p'.+1 then (b, O) else
    if (p'.+1 < size (s b))%N then (b, p'.+1) else
      indaddr b.+1 (p' - (size (s b)).-1)%N.

Lemma indaddrE b p : indaddr b p =
 if (p < size (s b))%N then (b, p) else indaddr b.+1 (p - size (s b))%N.
Proof.
case: p => [|p] /= in b *; first by rewrite lt0n s0.
case: ifPn => //; rewrite -leqNgt => sbp1.
by rewrite -{2}(@prednK (size (s b))) // lt0n.
Qed.

(* direct address *)
(* x.2 < size (s x.1) *)
Definition diraddr (x : nat * nat) := (\sum_(x < x.1) size (s x) + x.2)%N.

Lemma indaddrK (b p : nat) : (p < size (s b))%N ->
 diraddr (indaddr b p) = diraddr (b, p).
Proof.
elim: b p => [p s0p|b ih p psb1].
  by rewrite indaddrE s0p.
by rewrite indaddrE psb1.
Qed.

Lemma diraddrK (n p k : nat) : (p < size (s (n + k)))%N ->
  indaddr k (diraddr (n + k, p)%N - \sum_(i < k) size (s i)) = (n + k, p)%N.
Proof.
elim: n p k => [p k ps0|n ih p k psn1].
  by rewrite add0n {1}/diraddr (addnC _ p) addnK indaddrE ps0.
rewrite indaddrE ifF; last first.
  apply/negbTE.
  rewrite -leqNgt /diraddr (addnC _ p) (addnC _ k).
  rewrite -(big_mkord xpredT (size \o s)) /index_iota subn0 iotaD big_cat.
  rewrite -{2}(subn0 k) big_mkord add0n.
  rewrite [n.+1]lock /= -lock (addnC (\sum_(i < k) size (s i))%N) addnA addnK.
  by rewrite /= big_cons addnCA leq_addr.
rewrite {1}addSnnS.
rewrite (_ : _ - _ = diraddr (n + k.+1, p)%N - \sum_(i < k.+1) size (s i))%N.
  by rewrite ih ?addSnnS // -addSnnS.
by rewrite big_ord_recr /= subnDA.
Qed.

Definition nth_interval (n : nat) : interval R :=
  let: (b, k) := indaddr O n in nth 0%O (s b) k.

Lemma nth_interval_diraddr (n p : nat) : (p < size (s n))%N ->
  nth_interval (diraddr (n, p)) = nth 0%O (s n) p.
Proof.
move=> psn.
rewrite /nth_interval (_ : indaddr _ _ = (n, p)) //.
by move: (@diraddrK n p O); rewrite addn0 big_ord0 subn0 => ->.
Qed.

Lemma map_nth_interval (n : nat) :
  [seq nth_interval (diraddr (n, i)) | i <- iota 0 (size (s n))] = s n.
Proof.
apply(@eq_from_nth _ 0%O).
  by rewrite size_map size_iota.
move=> i; rewrite size_map size_iota => isn.
rewrite [in LHS](nth_map 0%O) ?size_iota// -[in RHS]nth_interval_diraddr //.
by rewrite nth_iota.
Qed.

Lemma map_nth_interval_diraddr n k : flatten [seq s i | i <- iota k n] =
  [seq nth_interval i | i <- iota (diraddr (k, O))
    (\sum_(x < (k + n)) size (s x) - \sum_(x < k) size (s x))].
Proof.
have [m nm] := ubnP n; elim: m => // m ih in n k nm *.
destruct n as [|n].
  by rewrite /= addn0 subnn.
rewrite /= ih //.
rewrite -map_nth_interval map_comp -map_cat; congr map.
rewrite {1}/diraddr [in LHS]/= -iotaDl.
rewrite -/(diraddr (k, O)) {2}/diraddr big_ord_recr /= addnAC -/(diraddr _).
rewrite -iotaD; congr iota.
rewrite addnC addSnnS subnDA subnK //.
have lem a b : (\sum_(i < a) size (s i) <= \sum_(x < a + b) size (s x))%N.
  rewrite -[X in (_ <= X)%N](big_mkord xpredT (fun x => size (s x))).
  rewrite /index_iota subn0 iotaD big_cat.
  by rewrite -[in X in (_ <= X)%N](subn0 a) -/(index_iota _ _) big_mkord leq_addr.
rewrite leq_subRL.
  by rewrite -(big_ord_recr k (size \o s)) /= -addSnnS lem.
by rewrite lem.
Qed.

Lemma flatten_map_nth_interval n :
  exists u, flatten [seq s i | i <- iota 0 n] =
       [seq nth_interval i | i <- iota 0 n] ++ u.
Proof.
exists [seq nth_interval i | i <- iota n (diraddr (n, O) - n)].
rewrite -map_cat -iotaD /diraddr addn0 (addnC n) subnK; last first.
  rewrite -{1}(muln1 n) -{1}(subn0 n) -sum_nat_const_nat big_mkord leq_sum //.
  by move=> a _; rewrite lt0n.
rewrite map_nth_interval_diraddr big_ord0 subn0 add0n /diraddr big_ord0 /=.
by rewrite addn0.
Qed.

End addressing_sequence_of_simple_sets.

Lemma bigcup_bigU_bigcup (R : realType) (f : (seq (interval R))^nat) :
  (forall n, size (f n) != O) ->
  \bigcup_k \big[setU/set0]_(i <- f k) [set` i] =
  \bigcup_k [set` nth_interval f k].
Proof.
move=> f0; rewrite eqEsubset; split => r.
  move=> -[n Hn]; rewrite -bigcup_set => -[/= I].
  move=> /(nthP 0%O)[p pn <-{I}] rnp.
  exists (diraddr f (n, p)) => //.
  by rewrite nth_interval_diraddr.
move=> [n _] ; rewrite /nth_interval.
move Hx : (indaddr _ _ _) => x.
destruct x as [x1 x2] => rx2.
exists x1 => //.
rewrite -bigcup_set.
exists (nth 0%O (f x1) x2) => //.
rewrite /mkset; apply/(nthP 0%O); exists x2 => //.
rewrite ltnNge; apply: contraPN rx2 => /(nth_default 0%O) -> /=.
by rewrite in_itv.
Qed.

Lemma sum_nth_interval_sum_sum (R : realType) (f : (seq (interval R))^nat)
  (l : set R -> \bar R) :
    (forall x, 0 <= l x)%E -> (forall n, size (f n) != O) ->
  (\sum_(k <oo) l [set` nth_interval f k] <=
   \sum_(k <oo) \sum_(x <- f k) l [set` x])%E.
Proof.
move=> l_ge0 f0; apply: lee_lim.
- by apply: is_cvg_ereal_nneg_natsum_cond => n _ _; apply: l_ge0.
- apply: is_cvg_ereal_nneg_natsum_cond => n _ _; apply: sume_ge0 => i _.
  exact: l_ge0.
- near=> n.
  rewrite 2!big_mkord.
  have -> : (\sum_(k < n) \sum_(x <- f k) l [set` x] =
            \sum_(k <- flatten (map f (iota 0 n))) l [set` k])%E.
    rewrite big_flatten /= big_map -[in RHS](subn0 n) -/(index_iota _ _).
    by rewrite big_mkord.
  have -> : (\sum_(k < n) l [set` nth_interval f k] =
            \sum_(k <- map (nth_interval f) (iota 0 n)) l [set` k])%E.
    by rewrite big_map -[in RHS](subn0 n) -/(index_iota _ _) big_mkord.
  have [s' ->] := flatten_map_nth_interval f0 n.
  rewrite big_cat /= lee_addl //.
  by apply: sume_ge0 => I _; apply: l_ge0.
Grab Existential Variables. all: end_near. Qed.

Section slength_sigma_finite.
Variable R : realType.
Implicit Types (i : interval R) (n : nat).

Definition ccitv n : interval R := `[ (-(n%:R))%R, n%:R].

Lemma slength_ccitv n : slength [set` ccitv n] = n.*2%:R%:E.
Proof.
rewrite slength_itv hlength_itv /= lte_fin -{1}(add0r (-n%:R)) ltr_subl_addl.
rewrite -natrD ltr0n addnn double_gt0 lt0n; case: ifPn => [n0|/negPn/eqP->//].
by rewrite -addnn natrD 2!NEFin oppeK.
Qed.

Lemma slength_ccitv_sym b r n :
  slength ([set` Interval (BSide b r) +oo%O] `&` [set` ccitv n]) =
  slength ([set` Interval -oo%O (BSide b (- r))] `&` [set` ccitv n]).
Proof.
rewrite -2!set_itv_meet 2!slength_itv 2!hlength_itv /= 2!lte_fin; case: ifPn.
- rewrite ltUx => /andP[rn _]; case: ifPn.
  + rewrite ltxI => /andP[_ _]; congr (_%:E); rewrite opprK addrC.
    congr (_ + _)%R; rewrite joinEtotal meetEtotal /maxr /minr {rn}.
    have [rn|rn|rn] := ltgtP r (- n%:~R).
    * by rewrite ifF // ?opprK //; apply/negbTE; rewrite -leNgt -ler_oppr ltW.
    * by rewrite ifT // ltr_oppl.
    * by rewrite {2}rn opprK ltxx rn opprK.
   + rewrite ltxI negb_and -2!leNgt ler_oppl opprK (leNgt _ r) rn /=.
     rewrite -subr_le0 opprK -natrD lern0 addnn double_eq0 => /eqP n0.
     move: rn; rewrite {}n0 => r0; rewrite add0e mulr0n join_r ?opprK//.
     by rewrite oppr0 ltW.
- case: ifPn => //.
  rewrite ltxI => /andP[]; rewrite -ltr_oppl opprK => rn _.
  rewrite -leNgt lexU leNgt rn /= -subr_le0 opprK -natrD lern0 addnn double_eq0.
  move=> /eqP n0; move: rn.
  by rewrite {}n0 => r0; rewrite adde0 meet_r // ler_oppr mulr0n oppr0 ltW.
Qed.

Lemma slength_sigma_finite :
  sigma_finite setT (slength : set (sset_algebraOfSetsType R) -> \bar R).
Proof.
exists ((fun i => [set` i]) \o ccitv).
  rewrite predeqE => /= r; split => // _; have [r0|r0] := leP 0 r.
  - exists (absz (ceil r)) => //=.
    rewrite itv_boundlr/= 2!lte_bnd (le_trans _ r0)/= ?oppr_le0 ?ler0n//.
    by rewrite natr_absz ger0_norm ?ceil_ge0// ceil_ge.
  - exists (absz (floor r)) => //=.
    rewrite itv_boundlr/= 2!lte_bnd (le_trans (ltW r0)) ?ler0n// andbT.
    by rewrite natr_absz ltr0_norm ?floor_lt0// mulrNz opprK floor_le.
move=> n; split.
  by exists [fset (ccitv n)]%fset; rewrite ssetE big_seq_fset1.
by rewrite slength_itv hlength_itv /= -(fun_if (@EFin _)) lte_pinfty.
Qed.

End slength_sigma_finite.

Section slength_additive.
Variable R : realType.
Implicit Types i : interval R.

Local Lemma slength_additive_seq (s : seq (interval R)) :
  trivIset setT (fun k => [set` nth 0%O s k]) ->
  slength [sset of s] = (\sum_(j <- s) slength [set` j])%E.
Proof.
move=> ts.
rewrite {1}/slength; case: xgetP => [/= s' _ Xs'|/(_ s)]; last first.
  by rewrite /=; tauto.
apply/esym; under eq_bigr do rewrite slength_itv; apply/esym.
apply: hlengthUset => //.
- do 2 rewrite cover_set_itv_nthE//.
  have [_ _ cover_s'] := is_decomposition_decompose s'.
  by rewrite -ssetE cover_s' -Xs'.
- apply/(trivIset_sorted_decompose (sort_sorted total_le_itv _))/allP => j.
  by rewrite mem_sort /= mem_filter => /andP[].
Qed.

Lemma slength_additive :
  additive (slength : set (sset_algebraOfSetsType R) -> \bar R).
Proof.
apply/additive2P; first by rewrite slength0.
move=> A B /= [a Aa] [b Bb] AB0.
pose a' := decompose a; pose b' := decompose b.
have ABE : A `|` B = [sset of a' ++ b'].
  rewrite Aa Bb.
  have [_ _ <-] := is_decomposition_decompose a.
  have [_ _ <-] := is_decomposition_decompose b.
  by rewrite [in RHS]ssetE big_cat.
have tAB : trivIset setT (fun k => [set` nth 0%O (a' ++ b') k]).
  apply/trivIsetP => k1 k2 _ _.
  wlog : k1 k2 / (k1 < k2)%N.
    move=> h; rewrite eqn_leq negb_and -2!ltnNge => /orP[k2k1|k1k2].
      by rewrite setIC h // lt_eqF.
    by rewrite h // lt_eqF.
  move=> k1k2 _.
  have [k2a'b'|a'b'k2] := ltnP k2 (size (a' ++ b')); last first.
    by rewrite setIC nth_default // set_itvE set0I.
  have [k2a'|a'k2] := ltnP k2 (size a').
    rewrite nth_cat (ltn_trans k1k2) // nth_cat k2a'.
    have /trivIsetP := @trivIset_decompose _ a.
    by apply => //; rewrite ltn_eqF.
  have [k1a'|a'k1] := ltnP k1 (size a').
    rewrite nth_cat k1a' nth_cat ltnNge a'k2 /=; apply: subsetI_eq0 AB0.
    - rewrite Aa; have [_ _ <-] := is_decomposition_decompose a.
      rewrite sset_bigcup => r ra'.
      by exists (nth 0%O a' k1) => //; exact/mem_nth.
    - rewrite Bb; have [_ _ <-] := is_decomposition_decompose b.
      rewrite sset_bigcup => r rb'.
      exists (nth 0%O b' (k2 - size a')) => //.
      by apply/mem_nth; rewrite ltn_subLR // -size_cat.
  rewrite nth_cat ltnNge a'k1 /= nth_cat ltnNge a'k2 /=.
  have /trivIsetP := @trivIset_decompose _ b.
  apply => //; rewrite -(eqn_add2r (size a')) (subnK a'k1) (subnK a'k2).
  by rewrite ltn_eqF.
rewrite ABE slength_additive_seq // (_ : A = [sset of a']); last first.
  rewrite /a' /decompose.
  rewrite (cover_sorted_decompose (sort_sorted total_le_itv _)) //.
  by rewrite sset_sort_le_itv sset_filter_neitv.
rewrite slength_additive_seq; last first.
  apply/trivIsetP => i j _ _ ij.
  move/trivIsetP : tAB => /(_ i j Logic.I Logic.I ij).
  rewrite nth_cat; case: ifPn => [ia'|]; last first.
    by rewrite -leqNgt => a'i; rewrite (nth_default _ a'i) set_itvE set0I.
  rewrite nth_cat; case: ifPn => [//|].
  by rewrite -leqNgt => b'i; rewrite (nth_default _ b'i) set_itvE setI0.
rewrite (_ : B = [sset of b']); last first.
  rewrite (cover_sorted_decompose (sort_sorted total_le_itv _)) //.
  by rewrite sset_sort_le_itv sset_filter_neitv.
rewrite slength_additive_seq ?big_cat//.
apply/trivIsetP => i j _ _ ij.
move/trivIsetP : tAB => /(_ (size a' + i)%N (size a' + j)%N Logic.I Logic.I).
rewrite eqn_add2l => /(_ ij).
rewrite nth_cat -ltn_subRL subnn ltn0 addnC addnK.
by rewrite nth_cat -ltn_subRL subnn ltn0 addnC addnK.
Qed.

Lemma semi_additive_slength :
  semi_additive (slength : set (sset_algebraOfSetsType R) -> _).
Proof. by rewrite semi_additiveE; exact: slength_additive. Qed.

Lemma semi_additive2_slength :
  semi_additive2 (slength : set (sset_algebraOfSetsType R) -> _).
Proof. exact/(semi_additive2P slength0)/semi_additive_slength. Qed.

Definition slength_additive_measure :
    {additive_measure set (sset_algebraOfSetsType R) -> \bar R} :=
  AdditiveMeasure.Pack _ (AdditiveMeasure.Axioms slength0
    (fun X _ => slength_ge0 X) semi_additive2_slength).
Canonical slength_additive_measure.

Corollary le_slengthU_sumslength (A : seq (set R)) :
  (forall a : set R, a \in A -> Sset.is_sset a) ->
  (slength (\big[setU/set0]_(a <- A) a) <= \sum_(a <- A) (slength a))%E.
Proof.
move=> mA.
do 2 rewrite (big_nth set0) big_mkord.
apply: (Boole_inequality [additive_measure of
         (slength : set (sset_algebraOfSetsType R) -> _)]) => /= k.
have [kA|kA] := ltnP k (size A).
  case: k kA=> [? |k kA]; first exact/mA/mem_nth.
  exact/mA/mem_nth.
by rewrite nth_default //; exact: measurable0.
Qed.

End slength_additive.

(* NB: really useful? *)
Lemma is_cvg_sum_slength (R : realType)
    (F : (set (sset_algebraOfSetsType R))^nat) (P : pred nat) m :
  (forall k, P k -> measurable (F k)) ->
    cvg (fun n => (\sum_(m <= k < n | P k) slength (F k))%E).
Proof.
move=> mF; apply: is_cvg_ereal_nneg_natsum_cond => n mn Pn.
exact/slength_ge0.
Qed.

Lemma sum_slength_neitv (R : realType) (j : (interval R)^nat) :
  ((fun n => \sum_(0 <= k < n) slength [set` j k]) =
   (fun n => \sum_(0 <= k < n | neitv (j k)) slength [set` j k]))%E.
Proof.
rewrite funeqE => n; rewrite 2!big_mkord (bigID (fun k : 'I_n => neitv (j k))).
rewrite /= addeC big1 ?add0e // => k; rewrite -set_itv_neq0 => /negPn/eqP ->.
by rewrite slength0.
Qed.

Lemma measurable_sset_itv (R : realType) (i : interval R) :
  measurable ([set` i] : set (sset_algebraOfSetsType R)).
Proof. exact/Sset.is_sset_itv. Qed.

Section slength_sigma_additive_on_intervals.
Variable R : realType.
Implicit Types i : interval R.
Local Open Scope ereal_scope.

Lemma slength_sigma_subadditive_finite_itv i (j : (interval R)^nat)
    (P : pred nat) :
  hlength [set` i] < +oo ->
  P `<=` neitv \o j ->
  [set` i] `<=` \bigcup_(k in P) [set` j k] ->
  slength [set` i] <=\sum_(k <oo | P k) slength [set` j k].
Proof.
move=> iNoo jne ij.
set l := lim _; have := lee_pinfty l.
rewrite le_eqVlt => /predU1P[->|loo]; first by rewrite lee_pinfty.
have [jfin|] := pselect (forall k, P k -> hlength [set` j k] < +oo); last first.
  move/existsNP => -[k /not_implyP[Pk] /negP].
  rewrite -leNgt lee_pinfty_eq => /eqP jkoo.
  rewrite /l (ereal_nneg_series_pinfty _ Pk) // ?lee_pinfty// ?slength_itv//.
  by move=> n _; apply/measure_ge0/measurable_sset_itv.
have [->|] := eqVneq [set` i] set0.
  rewrite slength0 ereal_nneg_series_lim_ge0// => k _.
  exact/measure_ge0/measurable_sset_itv.
rewrite set_itv_neq0 => i0.
have [ri1 ri2] := hlength_finite_fin_num i0 iNoo.
set a := real_of_extended i.1; set b := real_of_extended i.2.
have [ab|ba] := ltP a b; last first.
  rewrite slength_itv hlength_itv ltNge {1}(EFin_real_of_extended ri1).
  rewrite {1}(EFin_real_of_extended ri2) -/a -/b lee_fin ba /=.
  rewrite ereal_nneg_series_lim_ge0// => k _.
  exact/measure_ge0/measurable_sset_itv.
suff baj : forall e : {posnum R},
    b%:E - a%:E <= \sum_(k <oo | P k) slength [set` j k] + e%:num%:E.
  rewrite (@le_trans _ _ (b%:E - a%:E)) //.
    rewrite slength_itv hlength_itv (EFin_real_of_extended ri1).
    by rewrite (EFin_real_of_extended ri2) -/a -/b lte_fin ab.
  by apply lee_adde => e; exact: baj.
move=> e.
set a' := (a + e%:num/4%:R)%R.
set b' := (b - e%:num/4%:R)%R.
have a'b'i : {subset `[a', b'] <= i}.
  apply/subset_itvP => r; rewrite /= in_itv /= => /andP[a'r rb'].
  rewrite (IntervalE i).
  apply: ereal_mem_Interval.
  rewrite (EFin_real_of_extended ri1) (EFin_real_of_extended ri2).
  rewrite -/a -/b 2!lte_fin; apply/andP; split.
    by rewrite (lt_le_trans _ a'r) // /a' ltr_addl.
  by rewrite (le_lt_trans rb') // /b' ltr_subl_addl ltr_addr.
set a_ := fun k => real_of_extended (j k).1.
set b_ := fun k => real_of_extended (j k).2.
set a'_ := (fun k => a_ k - e%:num / (2 ^ k.+3)%:R)%R.
set b'_ := (fun k => b_ k + e%:num / (2 ^ k.+3)%:R)%R.
have ia_b_ : [set` i] `<=` \bigcup_(k in P) `] (a'_ k) , (b'_ k) [%classic.
  move/subset_trans : ij; apply => r [k Pk].
  have [->//|jk0] := eqVneq [set` j k] set0.
  rewrite (IntervalE (j k)) => /Interval_ereal_mem /andP[jk1r rjk2].
  rewrite set_itv_neq0 in jk0.
  have [jk1 jk2] := hlength_finite_fin_num jk0 (jfin _ Pk).
  exists k => //=; rewrite in_itv /=; apply/andP; split.
    rewrite -lte_fin (lt_le_trans _ jk1r) // /a'_ /a_ subEFin lte_subl_addr//.
    rewrite {2}(EFin_real_of_extended jk1) // -addEFin lte_fin.
    by rewrite ltr_addl divr_gt0 // ltr0n expn_gt0.
  rewrite -lte_fin (le_lt_trans rjk2) // /b'_ /b_.
  rewrite {1}(EFin_real_of_extended jk2) // lte_fin ltr_addl.
  by rewrite divr_gt0 // ltr0n expn_gt0.
have a'b'a'_b'_ :
    [set x | x \in `[a', b']] `<=` \bigcup_(k in P) `](a'_ k), (b'_ k)[%classic.
  by move/subset_itvP : a'b'i => /subset_trans; apply.
have [F [HF HF_]] : exists F : {fset nat}, `[a', b']%classic `<=`
    \bigcup_(k in [set x | (x \in F) && (P x)]) `] (a'_ k), (b'_ k) [%classic /\
  [set x | x \in F] `<=` P.
  have h k : P k -> open `](a'_ k), (b'_ k)[%classic.
    by move=> _; exact: interval_open.
  have := @segment_compact _ a' b'.
  (* NB: Borel-Lebesgue theorem *)
  rewrite compact_cover => /(_ _ _ _ h a'b'a'_b'_) => -[F FP a'b'F]; exists F.
  split; last by move=> x /FP; rewrite inE.
  move=> r /a'b'F[k Fk kr]; exists k => //=.
  by rewrite Fk /=; move/FP : Fk; rewrite inE.
set F' := [fset k in F | neitv `](a'_ k), (b'_ k)[]%fset.
have HF' : (`[a', b'] `<=` \bigcup_(k in [set` F']) `](a'_ k), (b'_ k)[)%classic.
  move/subset_trans : HF; apply.
  move=> r [k /andP[kF Pk]].
  have [-> //|a'b'kr] := eqVneq `](a'_ k), (b'_ k)[%classic set0.
  rewrite set_itv_neq0 in a'b'kr.
  by exists k => //; rewrite /mkset /F' !inE /= a'b'kr andbT.
have : b'%:E - a'%:E <= \sum_(k <oo | P k) slength [set` j k] + (e%:num / 2)%:E.
  have [a'b'|b'a'] := ltP a' b'; last first.
    rewrite (@le_trans _ _ 0%:E) //; first by rewrite sube_le0 lee_fin.
    rewrite adde_ge0 // ?lee_fin//.
    by apply: ereal_nneg_series_lim_ge0 => k _; exact/slength_ge0.
  rewrite (@le_trans _ _ (slength `[a', b']%classic)) //.
    by rewrite slength_itv hlength_itv /= lte_fin a'b'.
  have F'_ringOfSets x : x \in [seq `](a'_ k), (b'_ k)[%classic | k <- F'] -> Sset.is_sset x.
    by move=> /mapP[/= p pF' ->{x}]; exists [:: `](a'_ p), (b'_ p)[ ]; rewrite sset_cons1.
  rewrite (@le_trans _ _ (slength (\big[setU/set0]_(k <- F') `] (a'_ k), (b'_ k) [%classic))) //.
    apply/le_measure => //.
      by rewrite inE /=; exact/Sset.is_sset_itv.
      by rewrite inE /=; apply: bigsetU_measurable => n _; exact/Sset.is_sset_itv.
    by move/subset_trans : HF'; apply; rewrite bigcup_set.
  rewrite (@le_trans _ _ (\sum_(k <- F') (b'_ k - a'_ k)%:E)) //.
    move: (@le_slengthU_sumslength _ [seq `](a'_ k), (b'_ k)[%classic | k <- F'] F'_ringOfSets).
    rewrite big_map => /le_trans; apply.
    rewrite big_map /F' 2!big_fset /= ; apply: lee_sum => k.
    rewrite /neitv /= lte_bnd => a'b'k0.
    by rewrite slength_itv hlength_itv /= lte_fin a'b'k0.
  apply: (le_trans _ (@epsilon_trick _ (slength \o pred_set \o j) _ P _)) => //; last first.
    by move=> n; apply/slength_ge0.
  rewrite [X in X <= _](_ : _ =
      \sum_(k <- F') (b_ k - a_ k + (e%:num / (2 ^ k.+2)%:R))%:E); last first.
    apply eq_bigr => /= k ?; rewrite /a'_ /b'_; congr (_ %:E).
    rewrite opprB addrA addrC 2!addrA (addrC _ (b_ k)) -addrA; congr (_ + _)%R.
    by rewrite -mulrDl -mulr2n -mulr_natl expnS natrM -mulf_div divff // mul1r.
  under eq_bigr do rewrite addEFin.
  rewrite big_split /=.
  (* TODO: lemma *)
  have cvggeo : (fun n => \sum_(i < n) (e%:num / (2 ^ i.+2)%:R)%:E) --> (e%:num / 2)%:E.
    rewrite (_ : (fun n => _) = (@EFin _) \o series (fun k => e%:num / (2 ^ (k + 2))%:R)); last first.
      rewrite funeqE => n; rewrite /series /=.
      rewrite (@big_morph _ _ (@EFin _) 0%:E adde) // big_mkord.
      by under eq_bigr do rewrite -[in X in (_ ^X)%:R]addn2.
    apply: cvg_comp; last apply cvg_refl.
    have := @cvg_geometric_series_half _ e%:num 1.
    by rewrite expr1.
  have ? : cvg (fun n => \sum_(k < n | P k) (e%:num / (2 ^ k.+2)%:R)%:E).
    under eq_fun do rewrite -(big_mkord P (fun k => (e%:num / (2 ^ k.+2)%:R)%:E)).
    by apply: is_cvg_ereal_nneg_series => n _; rewrite lee_fin divr_ge0// ler0n.
  apply (@le_trans _ _ (\sum_(k <oo | P k) slength [set` j k] +
                        \sum_(k <oo | P k) (e%:num / (2 ^ k.+2)%:R)%:E)); last first.
    rewrite -ereal_limD //; last 3 first.
      by apply: is_cvg_sum_slength => k Pk; exact/measurable_sset_itv.
      by under eq_fun do rewrite big_mkord.
      have /andP[l0 le2] : 0 <= \sum_(k <oo | P k) (e%:num / (2 ^ k.+2)%:R)%:E <= (e%:num / 2)%:E.
        apply/andP; split.
          rewrite (@ereal_nneg_series_lim_ge0 _ (fun k => (e%:num / (2 ^ k.+2)%:R)%:E)) // => n _.
          by apply divr_ge0 => //; rewrite ler0n.
        move/cvg_lim : (cvggeo) => <- //=.
        apply lee_lim => //.
          by under eq_fun do rewrite big_mkord.
          under eq_fun do rewrite -(big_mkord xpredT (fun k => (e%:num / (2 ^ k.+2)%:R)%:E)).
          by apply: is_cvg_ereal_nneg_series => n _; rewrite lee_fin divr_ge0 // ler0n.
        near=> n.
        rewrite (big_mkord P (fun k => (e%:num / (2 ^ k.+2)%:R)%:E)).
        move: (@lee_sum_nneg R _ (enum 'I_n) xpredT P (fun k => (e%:num / (2 ^ k.+2)%:R)%:E)).
        rewrite big_enum big_enum_cond; apply => k _ _.
        by apply divr_ge0 => //; rewrite ler0n.
      apply: fin_num_adde_def => //.
      rewrite fin_numE gt_eqF /=; last first.
        by rewrite (lt_le_trans _ l0) // lte_ninfty.
      by rewrite lt_eqF // (le_lt_trans le2) // lte_pinfty.
    rewrite (_ : (fun x => _) = (fun x => \sum_(0 <= k < x | P k)
      (slength [set` j k] + (e%:num / 2 / (2 ^ k.+1)%:R)%:E))) //.
    rewrite funeqE => n; rewrite big_split => /=; congr (_ + _).
    by apply eq_bigr => m Pm; rewrite expnS natrM invfM -mulrA.
  have sum_F'_P f : \sum_(k <- F') f k = \sum_(k <- F' | P k) f k.
    apply eq_fbigl_cond => // k; apply/idP/idP => /=.
      rewrite !inE andbT => /andP[/= kF -> /=].
      by rewrite andbT kF /=; apply/HF_.
    by rewrite !inE andbT => /andP[].
  apply: lee_add; last first.
    set f := fun n => \sum_(k < n | P k) (e%:num / (2 ^ n.+2)%:R)%:E.
    rewrite (@le_trans _ _ (\sum_(k <oo | P k) (e%:num / (2 ^ k.+2)%:R)%:E)) //.
    rewrite sum_F'_P.
    by apply: lee_sum_lim => n _; apply divr_ge0 => //; rewrite ler0n.
  rewrite [X in X <= _](_ : _ = \sum_(k <- F') slength [set` j k]); last first.
    apply eq_fbigr => k /imfsetP[/= p]; rewrite !inE => /andP[pF a'b'p0 ->{k} ?].
    rewrite /b_ /a_ slength_itv hlength_itv.
    have [? ?] : ((j p).1 : \bar R) \is a fin_num /\
                 ((j p).2 : \bar R) \is a fin_num.
      apply hlength_finite_fin_num; first by apply: jne => //; exact: HF_.
      by apply jfin => //; exact: HF_.
    rewrite subEFin -EFin_real_of_extended // -EFin_real_of_extended //.
    have /jne : P p := HF_ _ pF; rewrite /neitv => /ltW/le_bnd_ereal.
    by rewrite le_eqVlt => /predU1P[->|->//]; rewrite ltxx subee.
  by rewrite sum_F'_P; apply: lee_sum_lim => k _; exact/slength_ge0.
have -> : (b'%:E - a'%:E = b%:E - a%:E - (e%:num / 2)%:E).
  rewrite /a' /b' (addEFin a) oppeD// (subEFin b) -addeA.
  rewrite (addeCA (- (e%:num / 4%:R)%:E)) addeA; congr (_ + _).
  rewrite -oppeD//; congr oppe; rewrite -addEFin; congr (_%:E).
  by rewrite -mulrDl -mulr2n -mulr_natl (natrM _ 2 2) -mulf_div divff // mul1r.
rewrite lee_subl_addr// => /le_trans; apply; rewrite le_eqVlt; apply/orP; left.
rewrite -addeA; apply/eqP; congr (_ + _).
by rewrite -addEFin -mulrDl -mulr2n -mulr_natr -mulrA divff ?mulr1.
Grab Existential Variables. all: end_near. Qed.

Lemma slength_sigma_additive_finite_itv i (j : (interval R)^nat) :
  [set` i] = \bigcup_k [set` j k] ->
  trivIset setT (pred_set \o j) ->
  hlength [set` i] < +oo ->
  slength [set` i] = \sum_(k <oo) slength [set` j k].
Proof.
move=> ij tj iNoo.
apply/eqP; rewrite eq_le; apply/andP; split.
  pose P := neitv \o j.
  have : [set` i] `<=` \bigcup_(k in [set x | neitv (j x)]) [set` j k].
    suff : [set` i] = \bigcup_(k in [set x | neitv (j x)]) [set` j k].
      by move=> ->.
    rewrite ij; apply/predeqP => r; split => [[x _ jxr]|[x]].
      exists x => //; rewrite /mkset; rewrite -set_itv_neq0; apply/set0P.
      by exists r.
    by exists x.
  move/(@slength_sigma_subadditive_finite_itv _ j P iNoo (fun x => id)).
  move/le_trans; apply; apply: lee_lim.
  + by apply: is_cvg_sum_slength => n jn0; exact/Sset.is_sset_itv.
  + by apply: is_cvg_sum_slength => n _; exact/Sset.is_sset_itv.
  + near=> n.
    rewrite 2!big_mkord.
    move: (@lee_sum_nneg R _ (enum 'I_n) xpredT (neitv \o j) (slength \o pred_set \o j)).
    rewrite /= big_enum_cond big_enum; apply.
    by move=> x _ _; exact/slength_ge0.
apply: ereal_lim_le.
  by apply: is_cvg_sum_slength => n _; exact/Sset.is_sset_itv.
near=> n.
rewrite [X in X <= _](_ : _ = slength (\big[setU/set0]_(k < n) [set` j k])) //.
  apply: le_measure.
  - by rewrite inE /=; apply: bigsetU_measurable => k _; exact/Sset.is_sset_itv.
  - by rewrite inE /=; exact/Sset.is_sset_itv.
  - by rewrite ij -bigcup_set /= => r [k /= _ jkr]; exists k.
rewrite big_mkord; apply/esym.
apply/(@measure_bigcup _ _ (@slength_additive_measure R) (pred_set \o j)) => //.
by move=> // k; exists [:: j k]; rewrite sset_cons1.
Grab Existential Variables. all: end_near. Qed.

Lemma slength_sigma_subadditive_infinite_itv
    i (j : (interval R)^nat) (P : pred nat) :
  hlength ([set` i]) = +oo ->
  (forall k, P k -> neitv (j k)) ->
  [set` i] `<=` \bigcup_(k in P) [set` j k] ->
  slength [set` i] <= \sum_(k <oo | P k) slength [set` j k].
Proof.
move=> ioo jne ij; suff h : forall M, (M > 0)%R -> \forall n \near \oo,
    M%:E <= \sum_(0 <= k < n | P k) slength [set` j k].
  rewrite slength_itv ioo lee_pinfty_eq; apply/eqP.
  by apply/cvg_lim => //; apply/ereal_cvgPpinfty => M M0; exact: h.
set iIccitv := fun n => [set` i] `&` [set` ccitv R n].
have len_iIccitv_dvg M : (M > 0)%R ->
    exists n, (n >= 1)%N /\ M%:E < slength (iIccitv n).
  move=> M0.
  move/pinfty_hlength : ioo => [[b [r iroo]]|ioo]; last first.
    have ? : (0 < `|ceil M|)%N by rewrite absz_gt0 gt_eqF // ceil_gt0.
    exists `|ceil M|%N; split=> //; rewrite /iIccitv ioo set_itvE setTI.
    rewrite slength_ccitv lte_fin (le_lt_trans (ceil_ge _)) // -muln2 natrM.
    by rewrite natr_absz gtr0_norm ?ceil_gt0// ltr_pmulr ?ltr1n// ltr0z ceil_gt0.
  rewrite /iIccitv.
  wlog : i {ij iIccitv} b r {iroo} / i = Interval -oo%O (BSide b r).
    move=> h; move: iroo => [->|iroo]; first exact: h.
    have [N [N0 MN]] := h _ b (- r)%R erefl.
    by exists N; split => //; rewrite iroo slength_ccitv_sym.
  move=> ->{i}.
  have [r0|r0] := ler0P r.
    exists (`|ceil (`| r | + M) |%N.+1); split => //.
    rewrite -set_itv_meet slength_itv hlength_itv /= lte_fin ltxI ltz_opp //.
    rewrite andbT ltr_oppl opprK meet_l ?(le_trans r0)//.
    rewrite -addn1 natrD natr_absz ger0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))//.
    case: ifPn => [_|/negP].
      rewrite lte_fin -ltr_subl_addl ltr_spaddr//.
      by rewrite (le_trans _ (ceil_ge _))// addrC ler_add2r ler0_norm.
    apply: absurd; rewrite ltr_spaddr//.
    by rewrite (le_trans _ (ceil_ge _)) // (ler_paddr (ltW _))// ler0_norm.
  move=> [:crM]; exists (`|ceil (`| r | + M)|%N); split.
    abstract: crM.
    by rewrite absz_gt0 gt_eqF // ceil_gt0 // -(addr0 0%R) ler_lt_add.
  rewrite -set_itv_meet slength_itv hlength_itv /= lte_fin ltxI ltz_opp //.
  rewrite ltr_oppl opprK andbT.
  rewrite natr_absz ger0_norm ?ceil_ge0// ?(addr_ge0 _ (ltW _))// gtr0_norm//.
  rewrite meet_l; last first.
    by rewrite (le_trans (ceil_ge _)) // ler_int le_ceil // ler_addl ltW.
  case: ifPn => [_|/negP].
    rewrite lte_fin -{1}(add0r M) ltr_le_add//.
    by rewrite (le_trans (ceil_ge _)) // ler_int le_ceil // ler_addr ltW.
  apply: absurd; rewrite -oppr_lt0 in r0.
  by rewrite (lt_le_trans r0)// ler0z ceil_ge0// addr_ge0// ?ltW// -oppr_lt0.
move=> M M0.
have {len_iIccitv_dvg}[N [N0 MN]] := len_iIccitv_dvg _ M0.
set jIccitv := fun N k => [set` j k] `&` [set` ccitv R N].
have len_jIccitv_dvg : \forall n \near \oo, M%:E <= \sum_(k < n | P k) slength (jIccitv N k).
  have iUj n : iIccitv n `<=` \bigcup_(k in P) (jIccitv n k).
    by move/(@setSI _ _ _ [set` ccitv R n]) : ij; rewrite setI_bigcupl.
  apply lte_lim => //.
  + apply: (@lee_sum_nneg_ord _ (slength \o jIccitv N)) => n Pn.
    by apply: slength_ge0; rewrite /jIN -set_itv_meet; exact/Sset.is_sset_itv.
  + under eq_fun do rewrite -(big_mkord P (slength \o jIccitv N)).
    apply: is_cvg_ereal_nneg_series => n _.
    by apply: slength_ge0; rewrite /jIN -set_itv_meet; exact/Sset.is_sset_itv.
  + rewrite (lt_le_trans MN) // /iIccitv -set_itv_meet.
    under [in lim _]eq_fun do rewrite -(big_mkord P (slength \o jIccitv N)).
    rewrite [X in _ <= X](_ : _ = (\sum_(k <oo | P k)
        slength [set` itv_meet (j k) (ccitv R N)])); last first.
      congr (lim _); rewrite funeqE => /= n.
      by under eq_bigr do rewrite /jIccitv -set_itv_meet.
    rewrite (_ : (fun n => _) =
      (fun n => \sum_(k < n | P k && (neitv (itv_meet (j k) (ccitv R N))))
      slength [set` itv_meet (j k) (ccitv R N)])%E); last first.
      rewrite funeqE => /= n; rewrite big_mkord.
      rewrite (bigID (fun k : 'I_n => neitv (itv_meet (j k) (ccitv R N)))) /=.
      rewrite addeC big1 ?add0e // => k /andP[?].
      by rewrite -set_itv_neq0 => /negPn/eqP ->; rewrite slength0.
    under [in lim _]eq_fun do
      rewrite -(big_mkord (fun k => P k && (neitv (itv_meet (j k) (ccitv R N))))
      (fun k => slength [set` itv_meet (j k) (ccitv R N)])).
    apply: (@slength_sigma_subadditive_finite_itv _
        (fun k => itv_meet (j k) (ccitv R N))
        (fun k => P k && (neitv (itv_meet (j k) (ccitv R N))))) => //.
    + rewrite (@le_lt_trans _ _ (hlength [set` ccitv R N])) //.
      by apply le_hlength; rewrite set_itv_meet; apply subIset; right.
    + by rewrite -slength_itv slength_ccitv lte_pinfty.
    + by move=> k /andP[].
    + apply: (@subset_trans _
          (\bigcup_(k in P) [set` itv_meet (j k) (ccitv R N)])).
        move=> x; rewrite set_itv_meet => /iUj [k ? Hk]; exists k => //.
        by rewrite set_itv_meet.
      move=> r [k Pk kr]; exists k => //; rewrite Pk /=.
      by rewrite -set_itv_neq0; apply/set0P; exists r.
have [m _ Hm] :
    \forall n \near \oo, M%:E <= \sum_(k < n | P k) slength [set` j k].
  case: len_jIccitv_dvg => m [mN]; exists m => // p /= mp.
  have /le_trans := mN _ mp; apply; apply: lee_sum => /= q _.
  rewrite /jIccitv; apply: le_measure => //.
  - by rewrite inE /=; apply: measurableI => //; exact/Sset.is_sset_itv.
  - by rewrite inE /=; exact/Sset.is_sset_itv.
  - by apply: subIset; left.
near=> n; rewrite big_mkord.
by have /Hm mn : (m <= n)%N by near: n; exists m.
Grab Existential Variables. all: end_near. Qed.

Lemma slength_sigma_subadditive_itv i (j : (interval R)^nat) (P : pred nat) :
  (forall k, P k -> neitv (j k)) ->
  [set` i] `<=` \bigcup_(k in P) [set` j k] ->
  slength ([set` i]) <= \sum_(k <oo | P k) slength [set` j k].
Proof.
move=> jne ij; have := lee_pinfty (hlength [set` i]).
rewrite le_eqVlt => /predU1P[|] ioo; by [
  exact: slength_sigma_subadditive_infinite_itv |
  exact: slength_sigma_subadditive_finite_itv].
Qed.

Lemma slength_sigma_additive_itv i (j : (interval R)^nat) :
  [set` i] = \bigcup_k [set` j k] -> trivIset setT (pred_set \o j) ->
  slength ([set` i]) = \sum_(k <oo) slength [set` j k].
Proof.
move=> ij tj; have := lee_pinfty (hlength [set` i]).
rewrite le_eqVlt => /predU1P[ioo|iNoo]; last first.
  exact: slength_sigma_additive_finite_itv.
rewrite slength_itv ioo sum_slength_neitv; apply/esym/eqP.
rewrite -lee_pinfty_eq -ioo -slength_itv.
apply: slength_sigma_subadditive_itv => // r.
rewrite ij => -[n _ jnr]; exists n => //=.
by rewrite -set_itv_neq0; apply/set0P; exists r.
Qed.

End slength_sigma_additive_on_intervals.

Section slength_measure.
Variable R : realType.
Implicit Types (i : interval R) (f : (seq (interval R))^nat).
Local Open Scope ereal_scope.

Definition nil_cons0 f := fun k => if size (f k) == O then [:: 0%O] else f k.

Lemma nil_cons0P (f : (seq (interval R))^nat) n : size (nil_cons0 f n) != O.
Proof. by rewrite /nil_cons0; case: ifPn. Qed.

Lemma nil_cons0_bigU f k : \big[setU/set0]_(x <- f k) [set` x] =
  \big[setU/set0]_(x <- nil_cons0 f k) [set` x].
Proof.
rewrite /nil_cons0; case: (f k) => /= [|h t]; last by rewrite big_cons.
by rewrite big_nil big_seq1 set_itvE.
Qed.

Lemma nil_cons0_bigcup_bigU f : \bigcup_k \big[setU/set0]_(x <- f k) [set` x] =
  \bigcup_k \big[setU/set0]_(x <- nil_cons0 f k) [set` x].
Proof. by congr bigcup; rewrite funeqE => j; exact: nil_cons0_bigU. Qed.

Lemma nil_cons0_sum f k :
  \sum_(x <- f k) slength [set` x] = \sum_(x <- nil_cons0 f k) slength [set` x].
Proof.
rewrite /nil_cons0; case: (f k) => //=.
by rewrite big_nil big_seq1 set_itvE slength0.
Qed.

Lemma nil_cons0_lim f : \sum_(k <oo) \sum_(x <- f k) slength [set` x] =
  \sum_(k <oo) \sum_(x <- nil_cons0 f k) slength [set` x].
Proof.
rewrite (_ : (fun n => \sum_(0 <= k < n) (\sum_(x <- f k) slength [set` x])) =
  (fun n => \sum_(0 <= k < n) (\sum_(x <- nil_cons0 f k) slength [set` x]))) //.
by rewrite funeqE => n; apply eq_bigr => j _; rewrite nil_cons0_sum.
Qed.

Local Lemma le_slength_itv_sumI (F : (set R)^nat) f :
  (forall k, F k = [sset of f k]) ->
  forall i, [set` i] `<=` \bigcup_k (F k) ->
  slength ([set` i]) <= \sum_(k <oo) slength ([set` i] `&` F k).
Proof.
move=> Fs i iF.
have {iF}iiF : [set` i] `<=` \bigcup_k ([set` i] `&` F k).
  by move=> r ir; move/iF : (ir) => [k _ Skr]; exists k.
pose df := decompose \o f.
pose idf := fun k => [seq itv_meet i x | x <- df k].
have {iiF} :
    [set` i] `<=` \bigcup_k (\big[setU/set0]_(x <- idf k) [set` x]).
  move/subset_trans : iiF; apply => r [n _].
  rewrite [in X in X -> _]Fs ssetE big_distrr /= => sir.
  exists n => //; rewrite /idf big_map.
  under eq_bigr do rewrite set_itv_meet.
  move: sir; rewrite -bigcup_set => -[/= j jsn [ir jr]].
  have [k [ksn kr]] := mem_decompose jsn jr.
  by rewrite -bigcup_set; exists k.
rewrite nil_cons0_bigcup_bigU bigcup_bigU_bigcup //; last exact: nil_cons0P.
move=> iiF.
rewrite (_ : (fun _ => _) = (fun n => \sum_(0 <= k < n)
    \sum_(x <- idf k) slength [set` x])); last first.
  rewrite funeqE => k; apply eq_bigr => {}k _.
  have -> : forall n, [set` i] `&` F n = \big[setU/set0]_(x <- idf n) [set` x].
    move=> n; rewrite big_map;have [_ _] := is_decomposition_decompose (f n).
    rewrite {1}ssetE -[decompose _]/(df n) -(Fs n) => <-.
    by rewrite big_distrr /=; under eq_bigr do rewrite -set_itv_meet.
  rewrite (big_nth 0%O) big_mkord.
  rewrite (@measure_bigcup _ _ (@slength_additive_measure R)
      (fun n => [set` nth 0%O (idf k) n])) //; last 2 first.
    by move=> m; apply: Sset.is_sset_itv.
    exact/trivIset_itv_meet/trivIset_decompose.
  by rewrite (big_nth 0%O) big_mkord.
rewrite nil_cons0_lim.
rewrite (le_trans _ (@sum_nth_interval_sum_sum _ (nil_cons0 idf) slength _ _))//.
- rewrite sum_slength_neitv slength_sigma_subadditive_itv => //.
  apply: (subset_trans iiF) => r [k _ kr]; exists k => //.
  by rewrite -set_itv_neq0; apply/set0P; exists r.
- by move=> x; apply: slength_ge0.
- exact: nil_cons0P.
Grab Existential Variables. all: end_near. Qed.

Lemma slength_semi_sigma_additive :
  semi_sigma_additive (slength : set (sset_algebraOfSetsType R) -> \bar R).
Proof.
move=> F mF tF mUF.
suff -> : slength (\bigcup_k F k) = \sum_(k <oo) slength (F k).
  under eq_fun do rewrite -(big_mkord xpredT (slength \o F)).
  exact/is_cvg_sum_slength.
apply/eqP; rewrite eq_le; apply/andP; split; last first.
  apply: (ereal_lim_le (is_cvg_sum_slength _)) => //.
  by near=> n; rewrite big_mkord; exact: le_sum_measure_bigcup.
have [seq_of Fseq_of] := @choice _ _ (fun k s => F k = [sset of s]) mF.
have [j [Fj tj]] : exists j : seq (interval R), \bigcup_k (F k) = [sset of j] /\
    trivIset setT (fun k => [set` nth 0%O j k]).
  have [j Fj] := mUF.
  exists (decompose j); split; last exact: trivIset_decompose.
  by rewrite Fj; have [_ _ ->] := is_decomposition_decompose j.
rewrite Fj ssetE (big_nth 0%O) big_mkord.
rewrite (@measure_bigcup _ _ (@slength_additive_measure R)
    (fun n => [set` nth 0%O j n])) //; last first.
  by move=> i; exact/measurable_sset_itv.
rewrite (@le_trans _ _ (\sum_(0 <= n < size j)
         \sum_(k <oo) slength ([set` nth 0%O j n] `&` F k))) //.
  rewrite big_mkord; apply: lee_sum => n _.
  rewrite (@le_slength_itv_sumI F seq_of) // Fj ssetE (big_nth 0%O).
  rewrite big_mkord => r jnr.
  by rewrite -bigcup_set; exists n => //=; rewrite mem_index_enum.
rewrite (@le_trans _ _ (\sum_(n <oo)
  \sum_(0 <= k < size j) slength ([set` nth 0%O j k] `&` F n))) //.
  rewrite (@ereal_pseries_sum_nat _ (size j)) //.
  by move=> a b; exact: slength_ge0.
apply: lee_lim.
- apply: is_cvg_ereal_nneg_series => n _.
  by apply: sume_ge0 => /= i _; apply: slength_ge0.
- by apply/is_cvg_sum_slength => ? _; exact/mF.
- near=> n; apply: lee_sum => /= k _.
  have Fkj : F k = \bigcup_i ([set` nth 0%O j i] `&` F k).
    rewrite -setI_bigcupl setIC; apply/esym/setIidPl.
    rewrite (_ : \bigcup_ _ _ = [sset of j]).
      by rewrite -Fj; apply: bigcup_sup.
    rewrite ssetE (big_nth 0%O) big_mkord (bigcup_splitn (size j)).
    rewrite bigcup0 ?setU0// => i _.
    by rewrite nth_default ?set_itvE// leq_addr.
  rewrite {2}Fkj big_mkord le_sum_measure_bigcup//.
  + by move=> i; apply: measurableI => //; exact/measurable_sset_itv.
  + by rewrite -Fkj.
  + by under eq_fun do rewrite setIC; exact: trivIset_setI.
Grab Existential Variables. all: end_near. Qed.

Definition slength_measure : {measure set (sset_algebraOfSetsType R) -> \bar R}
  := Measure (Measure.Axioms slength0 (fun X _ => slength_ge0 X)
                             slength_semi_sigma_additive).

Definition slength_ext_outer_measure
    : {outer_measure set (sset_algebraOfSetsType R) -> \bar R} :=
  [outer_measure of mu_ext slength_measure].

Definition length
    : {measure set (caratheodory_type slength_ext_outer_measure) -> \bar R} :=
  caratheodory_measure slength_ext_outer_measure.

End slength_measure.
Arguments slength_ext_outer_measure {R}.
Arguments length {R}.

Section lebesgue_measure.
Variable R : realType.
Let ssets := @measurable (@sset_algebraOfSetsType R).
Let gssets := g_measurableType ssets.

Definition lebesgue_measure : {measure set gssets -> \bar R} :=
  Hahn_ext (@slength_measure R).

Lemma lebesgue_measure_unique (mu : {measure set gssets -> \bar R}) :
  (forall X, ssets X -> mu X = slength X) ->
  forall X, measurable X -> lebesgue_measure X = mu X.
Proof.
by move=> muE X mX; apply: Hahn_ext_unique => //; exact: slength_sigma_finite.
Qed.

End lebesgue_measure.

Section salgebra_Rbar.
Variables (R : realType) (G : set (set R)).
Let measurableTypeR := g_measurableType G.
Let measurableR : set (set R) := @measurable measurableTypeR.

Inductive ps_infty : set \bar R -> Prop :=
| ps_infty0 : ps_infty set0
| ps_ninfty : ps_infty [set -oo]%E
| ps_pinfty : ps_infty [set +oo]%E
| ps_inftys : ps_infty [set -oo; +oo]%E.

Lemma ps_inftyP (A : set \bar R) : ps_infty A <-> A `<=` [set -oo; +oo]%E.
Proof.
split => [[]//|Aoo]; [by left|by right| ].
by have [|[|[|]]] := subset_set2 Aoo; move=> ->; constructor.
Qed.

Definition measurableRbar : set (set \bar R) :=
  [set (@EFin _ @` A) `|` B | A in measurableR & B in ps_infty].

Lemma measurableRbar0 : measurableRbar set0.
Proof.
exists set0; first exact: measurable0.
by exists set0; rewrite ?setU0// ?image_set0//; constructor.
Qed.

Lemma bigcup_EFIn (F : (set R)^nat) : [set x%:E | x in \bigcup_i F i] =
                                    \bigcup_i (@EFin _ @` F i).
Proof.
rewrite eqEsubset; split => [_ [r [n _ Fnr <-]]|]; first by exists n => //; exists r.
by move=> x [n _ [r Fnr <- /=]]; exists r => //; exists n.
Qed.

Lemma setC_EFin (B : set R) : [set x%:E | x in ~` B] =
                               (~` (@EFin _ @` B)) `\` [set -oo%E; +oo%E].
Proof.
rewrite eqEsubset; split => [_ [r Br <-]|[r | |]].
  by split => [|[]//]; apply: contra_not Br => -[? ? [] <-].
- move=> [Br _]; apply/not_exists2P; apply: contra_not Br => h.
  by exists r => //; have [|//] := h r; apply: contrapT.
  by move=> [] _ /absurdnot; apply; right.
- by move=> [] _ /absurdnot; apply; left.
Qed.

(* TODO: improve with setC_EFin *)
Lemma setCU_R_Rbar (A : set R) (B : set \bar R) : ps_infty B ->
  ~` ([set x%:E | x in A] `|` B) = [set x%:E | x in ~` A] `|` [set -oo%E; +oo%E] `&` ~` B.
Proof.
move=> ps_inftyB; rewrite setCU.
have -> : ~` [set x%:E | x in A] = [set x%:E | x in ~` A] `|` [set -oo; +oo]%E.
  rewrite predeqE => -[x| |]; split.
  - by move=> Ax; left; exists x => //; apply: contra_not Ax => Ax; exists x.
  - by move=> [[r Ar [<-{x}]]|[]//]; apply: contra_not Ar => -[x Ax [<-]].
  - by move=> _; right; right.
  - by move=> [[]|[] _ []].
  - by move=> _; right; left.
  - by move=> [[]|[_ []|]].
rewrite setIUl; congr (_ `|` _).
rewrite predeqE => -[x| |]; split; try by case.
move=> [] x' Ax' [] <-{x}; split; first by exists x'.
by case: ps_inftyB => // -[].
Qed.

Lemma measurableRbarC (X : set \bar R) : measurableRbar X -> measurableRbar (~` X).
Proof.
move => -[A mA] [B PooB <-]; rewrite setCU_R_Rbar //.
exists (~` A); [exact: measurableC | exists ([set -oo%E; +oo%E] `&` ~` B) => //].
case: PooB.
- by rewrite setC0 setIT; constructor.
- rewrite setIUl setICr set0U -setDE.
  have [_ ->] := @setDidPl (\bar R) [set +oo%E] [set -oo%E]; first by constructor.
  by rewrite predeqE => x; split => // -[->].
- rewrite setIUl setICr setU0 -setDE.
  have [_ ->] := @setDidPl (\bar R) [set -oo%E] [set +oo%E]; first by constructor.
  by rewrite predeqE => x; split => // -[->].
- by rewrite setICr; constructor.
Qed.

Lemma measurableRbar_bigcup (F : (set \bar R)^nat) :
  (forall i, measurableRbar (F i)) -> measurableRbar (\bigcup_i (F i)).
Proof.
move=> mF; pose P := fun i j => measurableR j.1 /\ ps_infty j.2 /\
                            F i = [set x%:E | x in j.1] `|` j.2.
have [f fi] : {f : nat -> (set R) * (set \bar R) & forall i, P i (f i) }.
  by apply: choice => i; have [x mx [y PSoo'y] xy] := mF i; exists (x, y).
exists (\bigcup_i (f i).1).
  by apply: measurable_bigcup => i; exact: (fi i).1.
exists (\bigcup_i (f i).2).
  apply/ps_inftyP => x [n _] fn2x.
  have /ps_inftyP : ps_infty(f n).2 by have [_ []] := fi n.
  exact.
rewrite [RHS](@eq_bigcupr _ _ _ _
    (fun i => [set x%:E | x in (f i).1] `|` (f i).2)); last first.
  by move=> i; have [_ []] := fi i.
rewrite bigcupU; congr (_ `|` _).
rewrite predeqE => i /=; split=> [[r [n _ fn1r <-{i}]]|[n _ [r fn1r <-{i}]]];
 by [exists n => //; exists r | exists r => //; exists n].
Qed.

Definition Rbar_isMeasurable : isMeasurable \bar R :=
  isMeasurable.Build _ measurableRbar0 measurableRbarC measurableRbar_bigcup.

End salgebra_Rbar.

Section puncture_ereal_itv.
Variable R : realDomainType.
Implicit Types y : R.
Local Open Scope ereal_scope.

Lemma punct_eitv_bnd_pinfty b y : [set` Interval (BSide b y%:E) +oo%O] =
  [set x%:E | x in [set` Interval (BSide b y) +oo%O]] `|` [set +oo].
Proof.
rewrite predeqE => /= x; split; rewrite in_itv /= andbT.
- move: x => [x| |] yxb; [|by right|by case: b yxb].
  by left; exists x => //; rewrite in_itv /= andbT; case: b yxb.
- move=> [[r]|->].
  + by rewrite in_itv /= andbT => yxb <-; case: b yxb.
  + by case: b => /=; rewrite ?(lte_pinfty, lee_pinfty).
Qed.

Lemma punct_eitv_setTR : [set of @EFin R] `|` [set +oo%E] = [set~ -oo].
Proof.
rewrite eqEsubset; split => [a [[a' _ <-]|->]|]; rewrite ?lte_ninfty//.
by move=> [x| |] //= _; [left; exists x|right].
Qed.

Lemma punct_eitv_setTL : [set of @EFin R] `|` [set -oo%E] = [set~ +oo].
Proof.
rewrite eqEsubset; split => [a [[a' _ <-]|->]|]; rewrite ?lte_ninfty//.
by move=> [x| |] //= _; [left; exists x|right].
Qed.

End puncture_ereal_itv.

Section salgebra_R_ssets.
Variable R : realType.

Fail Check forall (T : measurableType) (f : T -> R), measurable_fun setT f.

Definition measurableTypeR :=
  g_measurableType (@measurable (@sset_algebraOfSetsType R)).

Definition measurableR : set (set R) := @measurable measurableTypeR.

HB.instance Definition R_isMeasurable : isMeasurable R :=
  isMeasurable.Build measurableTypeR
  measurable0 (@measurableC _) (@measurable_bigcup _).
(*HB.instance (Real.sort R) R_isMeasurable.*)

Check forall (T : measurableType) (f : T -> R), measurable_fun setT f.

Lemma measurable_set1 (r : R) : measurable [set r].
Proof.
apply: g_salgebra_self => /=; exists [:: `[r, r]] => //=.
rewrite /sset /= big_cons /= big_nil setU0 /= set_itvE //.
rewrite predeqE => t; split => [<-|]; first by rewrite lexx.
by rewrite -eq_le => /eqP <-.
Qed.

Lemma measurable_itv (i : interval R) : measurable ([set` i]).
Proof. exact/g_salgebra_self/measurable_sset_itv. Qed.

(*HB.instance Definition _ := Rbar_isMeasurable (@measurable (@sset_algebraOfSetsType R)).*)
HB.instance (\bar (Real.sort R)) (Rbar_isMeasurable (@measurable (@sset_algebraOfSetsType R))).
(* NB: this produces a warning but the alternative fails with Coq 8.12 with the following message
  (according to the CI):
  # [redundant-canonical-projection,typechecker]
  # forall (T : measurableType) (f : T -> R), measurable_fun setT f
  #      : Prop
  # File "./theories/lebesgue_measure.v", line 4508, characters 0-88:
  # Error: Anomaly "Uncaught exception Failure("sep_last")."
  # Please report at http://coq.inria.fr/bugs/.
*)

Check forall (T : measurableType) (f : T -> \bar R), measurable_fun setT f.

Lemma measurable_EFin (A : set R) : measurableR A -> measurable (@EFin _ @` A).
Proof. by move=> mA; exists A => //; exists set0; [constructor|rewrite setU0]. Qed.

Lemma measurable_Rbar_set1 (x : \bar R) : measurable [set x].
Proof.
case: x => [r| |].
- by rewrite -image_set1; exact/measurable_EFin/measurable_set1.
- exists set0; [exact: measurable0|exists [set +oo%E]; [by constructor|]].
  by rewrite image_set0 set0U.
- exists set0; [exact: measurable0|exists [set -oo%E]; [by constructor|]].
  by rewrite image_set0 set0U.
Qed.

Lemma itv_cpinfty_pinfty : `[+oo%E, +oo[%classic = [set +oo%E] :> set (\bar R).
Proof.
rewrite set_itvE predeqE => t; split => /= [|<-//].
by rewrite lee_pinfty_eq => /eqP.
Qed.

Lemma itv_opinfty_pinfty : `]+oo%E, +oo[%classic = set0 :> set (\bar R).
Proof.
rewrite set_itvE predeqE => t; split => //=.
by apply/negP; rewrite -leNgt lee_pinfty.
Qed.

Lemma itv_cninfty_pinfty : `[-oo%E, +oo[%classic = setT :> set (\bar R).
Proof.
by rewrite set_itvE predeqE => t; split => //= _; rewrite lee_ninfty.
Qed.

Lemma itv_oninfty_pinfty : `]-oo%E, +oo[%classic = ~` [set -oo]%E :> set (\bar R).
Proof.
rewrite set_itvE predeqE => x; split => /=.
- by move: x => [x| |]; rewrite ?ltxx//.
- by move: x => [x h|//|/(_ erefl)]; rewrite ?lte_ninfty.
Qed.

Lemma measurable_Rbar_bnd_pinfty b (y : \bar R) :
  measurable [set` Interval (BSide b y) +oo%O].
Proof.
move: y => [y| |].
- exists [set` Interval (BSide b y) +oo%O]; first exact: measurable_itv.
  by exists [set +oo%E]; [constructor|rewrite -punct_eitv_bnd_pinfty].
- case: b; last by rewrite itv_opinfty_pinfty; exact: measurable0.
  by rewrite itv_cpinfty_pinfty; exact: measurable_Rbar_set1.
- case: b; first by rewrite itv_cninfty_pinfty; exact: measurableT.
  by rewrite itv_oninfty_pinfty; exact/measurableC/measurable_Rbar_set1.
Qed.

Lemma measurable_Rbar_ninfty_bnd b (y : \bar R) :
  measurable [set` Interval -oo%O (BSide b y)].
Proof.
by rewrite -set_itvC_bnd_infty; exact/measurableC/measurable_Rbar_bnd_pinfty.
Qed.

Definition elebesgue_measure' : set \bar R -> \bar R :=
  fun S => lebesgue_measure R ((real_of_extended @` (S `\` [set -oo; +oo]%E))).

Lemma elebesgue_measure'0 : elebesgue_measure' set0 = 0%E.
Proof. by rewrite /elebesgue_measure' set0D image_set0 measure0. Qed.

Lemma measurable_real_of_extended (X : set \bar R) : measurable X ->
  measurable [set real_of_extended x | x in X `\` [set -oo; +oo]%E].
Proof.
case => Y mY [X' [ | <-{X} | <-{X} | <-{X} ]].
- rewrite setU0 => <-{X}.
  rewrite [X in measurable X](_ : _ = Y) // predeqE => r; split.
    by move=> [x [[x' Yx' <-{x}/= _ <-//]]].
  by move=> Yr; exists r%:E; split => [|[]//]; exists r.
- rewrite [X in measurable X](_ : _ = Y) // predeqE => r; split.
    move=> [x [[[x' Yx' <- _ <-//]|]]].
    by move=> <-; rewrite not_orP => -[]/(_ erefl).
  by move=> Yr; exists r%:E => //; split => [|[]//]; left; exists r.
- rewrite [X in measurable X](_ : _ = Y) // predeqE => r; split.
    move=> [x [[[x' Yx' <-{x} _ <-//]|]]].
    by move=> ->; rewrite not_orP => -[_]/(_ erefl).
  by move=> Yr; exists r%:E => //; split => [|[]//]; left; exists r.
- rewrite [X in measurable X](_ : _ = Y) // predeqE => r; split.
    by rewrite setDUl setDv setU0 => -[_ [[x' Yx' <-]] _ <-].
  by move=> Yr; exists r%:E => //; split => [|[]//]; left; exists r.
Qed.

Lemma elebesgue_measure'_ge0 X : measurable X ->
  (0 <= elebesgue_measure' X)%E.
Proof. by move=> /= mX; exact/measure_ge0/measurable_real_of_extended. Qed.

Lemma semi_sigma_additive_elebesgue_measure' :
  semi_sigma_additive elebesgue_measure'.
Proof.
move=> /= F mF tF mUF; rewrite /elebesgue_measure'.
rewrite [X in lebesgue_measure _ X](_ : _ = \bigcup_n
    [set real_of_extended x | x in F n `\` [set -oo; +oo]%E]); last first.
  rewrite predeqE => r; split.
    by move=> [x [[n _ Fnx xoo <-]]]; exists n => //; exists x.
  by move=> [n _ [x [Fnx xoo <-{r}]]]; exists x => //; split => //; exists n.
apply: (@measure_semi_sigma_additive _ _ (@lebesgue_measure R)
  (fun n => real_of_extended @` (F n `\` [set -oo; +oo]%E))).
- move=> n; have := mF n.
  move=> [X mX [X' mX']] XX'Fn.
  apply: measurable_real_of_extended.
  rewrite -XX'Fn.
  apply: measurableU; first exact: measurable_EFin.
  case: mX'; [exact: measurable0 | exact: measurable_Rbar_set1
                                 | exact: measurable_Rbar_set1 | ].
  by apply: measurableU; exact: measurable_Rbar_set1.
- move=> i j _ _ [x [[a [Fia aoo ax] [b [Fjb boo] bx]]]].
  move: tF => /(_ i j Logic.I Logic.I); apply.
  suff ab : a = b by exists a; split => //; rewrite ab.
  move: a b {Fia Fjb} aoo boo ax bx.
  move=> [a| |] [b| |] /=.
  + by move=> _ _ -> ->.
  + by move=> _; rewrite not_orP => -[_]/(_ erefl).
  + by move=> _; rewrite not_orP => -[]/(_ erefl).
  + by rewrite not_orP => -[_]/(_ erefl).
  + by rewrite not_orP => -[_]/(_ erefl).
  + by rewrite not_orP => -[_]/(_ erefl).
  + by rewrite not_orP => -[]/(_ erefl).
  + by rewrite not_orP => -[]/(_ erefl).
  + by rewrite not_orP => -[]/(_ erefl).
- move: mUF.
  rewrite {1}/measurable /= /measurableRbar /= => -[X mX [Y []]] {Y}.
  - rewrite setU0 => h.
    rewrite [X in measurable X](_ : _ = X) // predeqE => r; split => [|Xr].
      move=> -[n _ [x [Fnx xoo <-{r}]]].
      have : (\bigcup_n F n) x by exists n.
      by rewrite -h => -[x' Xx' <-].
    have [n _ Fnr] : (\bigcup_n F n) r%:E by rewrite -h; exists r.
    by exists n => //; exists r%:E => //; split => //; case.
  - move=> h.
    rewrite [X in measurable X](_ : _ = X) // predeqE => r; split => [|Xr].
      move=> -[n _ [x [Fnx xoo <-]]].
      have : (\bigcup_n F n) x by exists n.
      rewrite -h => -[[x' Xx' <-//]|xoo'].
      by apply: (absurdnot xoo); left.
    have [n _ Fnr] : (\bigcup_n F n) r%:E by rewrite -h; left; exists r.
    by exists n => //; exists r%:E => //; split => //; case.
  - (* NB: almost the same as the previous one, factorize?*)
    move=> h.
    rewrite [X in measurable X](_ : _ = X) // predeqE => r; split => [|Xr].
      move=> -[n _ [x [Fnx xoo <-]]].
      have : (\bigcup_n F n) x by exists n.
      rewrite -h => -[[x' Xx' <-//]|xoo'].
      by apply: (absurdnot xoo); right.
    have [n _ Fnr] : (\bigcup_n F n) r%:E by rewrite -h; left; exists r.
    by exists n => //; exists r%:E => //; split => //; case.
  - move=> h.
    rewrite [X in measurable X](_ : _ = X) // predeqE => r; split => [|Xr].
      move=> -[n _ [x [Fnx xoo <-]]].
      have : (\bigcup_n F n) x by exists n.
      rewrite -h => -[[x' Xx' <-//]|xoo'].
      by apply: (absurdnot xoo); right.
    have [n _ Fnr] : (\bigcup_n F n) r%:E by rewrite -h; left; exists r.
    by exists n => //; exists r%:E => //; split => //; case.
Qed.

Definition elebesgue_measure_isMeasure : is_measure elebesgue_measure' :=
  Measure.Axioms elebesgue_measure'0 elebesgue_measure'_ge0
                 semi_sigma_additive_elebesgue_measure'.

Definition elebesgue_measure : {measure set \bar R -> \bar R} :=
  Measure.Pack _ elebesgue_measure_isMeasure.

End salgebra_R_ssets.

Lemma preimage_itv_o_infty T (d : unit) (rT : porderType d) (f : T -> rT) y :
  f @^-1` `]y, +oo[%classic = [set x | (y < f x)%O].
Proof.
rewrite predeqE => t; split => /= [|qf]; rewrite /preimage /=.
  by rewrite in_itv /= andbT.
by rewrite in_itv/= qf.
Qed.

Lemma preimage_itv_c_infty T (d : unit) (rT : porderType d) (f : T -> rT) y :
  f @^-1` `[y, +oo[%classic = [set x | (y <= f x)%O].
Proof.
rewrite predeqE => t; split => /= [|qf]; rewrite /preimage /=.
  by rewrite in_itv /= andbT.
by rewrite in_itv/= qf.
Qed.

Lemma preimage_itv_infty_o T (d : unit) (rT : orderType d) (f : T -> rT) y :
  f @^-1` `]-oo, y[%classic = [set x | (f x < y)%O].
Proof.
rewrite -set_itvC_bnd_infty preimage_setC /= predeqE => x /=; rewrite in_itv /=.
by rewrite andbT ltNge; split => /negP.
Qed.

Lemma preimage_itv_infty_c T (d : unit) (rT : orderType d) (f : T -> rT) y :
  f @^-1` `]-oo, y]%classic = [set x | (f x <= y)%O].
Proof.
rewrite -set_itvC_bnd_infty preimage_setC /= predeqE => x /=; rewrite in_itv /=.
by rewrite andbT leNgt; split => /negP.
Qed.

Lemma emeasurable_fun_c_infty (T : measurableType) (R : realType) (D : set T)
    (f : T -> \bar R) (y : \bar R) :
  measurable D ->
  measurable_fun D f -> measurable ([set x | (y <= f x)%E] `&` D).
Proof.
move=> mD mf; rewrite -preimage_itv_c_infty.
exact/mf/measurable_Rbar_bnd_pinfty.
Qed.

Lemma emeasurable_fun_o_infty (T : measurableType) (R : realType) (D : set T)
    (f : T -> \bar R) (y : \bar R) :
  measurable D ->
  measurable_fun D f -> measurable ([set x | (y < f x)%E] `&` D).
Proof.
move=> mD mf; rewrite -preimage_itv_o_infty.
exact/mf/measurable_Rbar_bnd_pinfty.
Qed.

Lemma emeasurable_fun_infty_o (T : measurableType) (R : realType)
    (f : T -> \bar R) (y : \bar R) :
  measurable_fun setT f -> measurable [set x | (f x < y)%E].
Proof.
move=> mf; rewrite -preimage_itv_infty_o.
by rewrite -[X in measurable X]setIT; exact/mf/measurable_Rbar_ninfty_bnd.
Qed.

Lemma emeasurable_fun_infty_c (T : measurableType) (R : realType)
    (f : T -> \bar R) (y : \bar R) :
  measurable_fun setT f -> measurable [set x | (f x <= y)%E].
Proof.
move=> mf; rewrite -preimage_itv_infty_c.
by rewrite -[X in measurable X]setIT; exact/mf/measurable_Rbar_ninfty_bnd.
Qed.

Module RGenOpenRays.
Section rgenopenrays.
Variable R : realType.
Implicit Types x y z : R.

Definition G := [set A | exists x, A = `]x, +oo[%classic].
Let T := g_measurableType G.

Lemma measurable_itv_bnd_infty b x :
  @measurable T [set` Interval (BSide b x) +oo%O].
Proof.
case: b; last by apply g_salgebra_self; eexists; reflexivity.
rewrite itv_c_inftyEbigcap; apply: measurable_bigcap => i.
by apply g_salgebra_self; eexists; reflexivity.
Qed.

Lemma measurable_itv_bounded a b x : a != +oo%O ->
  @measurable T [set` Interval a (BSide b x)].
Proof.
case: a => [a r _|[_|//]].
  rewrite itv_boundedErays.
  by apply/measurableD; exact: measurable_itv_bnd_infty.
by rewrite -set_itvC_bnd_infty; exact/measurableC/measurable_itv_bnd_infty.
Qed.

Lemma measurableEoray :
  @measurable (g_measurableType (@Sset.is_sset R)) = @measurable T.
Proof.
rewrite eqEsubset; split => A; last first.
  apply: subset_g_salgebra => A' /= [x ->]; exists [:: `]x, +oo[ ].
  by rewrite /sset big_cons big_nil setU0.
apply: g_salgebra_smallest; [exact: are_measurable_sets_g_salgebra|].
move=> _ [s ->] {A}; elim: s => [|h t ih].
  by rewrite /sset big_nil; exact: measurable0.
rewrite /sset big_cons; apply: measurableU => //.
move: h => [[a x|a] [b y|b]]; move: a b => [] []; try solve
  [exact: measurable_itv_bounded | exact: measurable_itv_bnd_infty |
   rewrite set_itvE; exact: measurable0].
by rewrite set_itvE; exact: measurableT.
Qed.

End rgenopenrays.
End RGenOpenRays.

Module RGenClosedRays.
Section rgenclosedrays.
Variable R : realType.
Implicit Types x y z : R.

Definition G : set (set R) := [set A | exists x, A = `[x, +oo[%classic].
Let T := g_measurableType G.

Lemma measurable_itv_bnd_infty b x :
  @measurable T [set` Interval (BSide b x) +oo%O].
Proof.
case: b; first by apply: g_salgebra_self; exists x; rewrite set_itv_c_infty.
rewrite itv_o_inftyEbigcup; apply: measurable_bigcup => i.
by apply: g_salgebra_self; eexists; reflexivity.
Qed.

Lemma measurable_itv_bounded a b y : a != +oo%O ->
  @measurable T [set` Interval a (BSide b y)].
Proof.
case: a => [a r _|[_|//]].
  rewrite itv_boundedErays.
  by apply: measurableD; apply: measurable_itv_bnd_infty.
by rewrite -set_itvC_bnd_infty; exact/measurableC/measurable_itv_bnd_infty.
Qed.

Lemma measurableEcray :
  @measurable (g_measurableType (@Sset.is_sset R)) = @measurable T.
Proof.
rewrite eqEsubset; split => A; last first.
  apply: subset_g_salgebra => B /= [x ->]; exists [:: `[x, +oo[ ].
  by rewrite /sset big_cons big_nil setU0 set_itv_c_infty.
apply: g_salgebra_smallest; first exact: are_measurable_sets_g_salgebra.
move=> _ [s ->] {A}; elim: s => [|h t ih].
  by rewrite /sset big_nil; exact: measurable0.
rewrite /sset big_cons; apply: measurableU => //.
move: h => [[a x|a] [b y|b]]; move: a b => [] []; try solve
  [exact: measurable_itv_bounded | exact: measurable_itv_bnd_infty |
   rewrite set_itvE; exact: measurable0].
by rewrite set_itvE; exact: measurableT.
Qed.

End rgenclosedrays.
End RGenClosedRays.

Module RGenOpens.
Section rgenopens.

Variable R : realType.
Implicit Types x y z : R.

Definition G := [set A | exists x y, A = `]x, y[%classic].
Let T := g_measurableType G.

Local Lemma measurable_itvoo x y : @measurable T `]x, y[%classic.
Proof. by apply g_salgebra_self; eexists; eexists; reflexivity. Qed.

Local Lemma measurable_itv_o_infty x : @measurable T `]x, +oo[%classic.
Proof.
rewrite itv_bnd_inftyEbigcup; apply: measurable_bigcup => i.
exact: measurable_itvoo.
Qed.

Lemma measurable_itv_bnd_infty b x :
  @measurable T [set` Interval (BSide b x) +oo%O].
Proof.
case: b; last exact: measurable_itv_o_infty.
rewrite itv_c_inftyEbigcap; apply: measurable_bigcap => i.
exact/measurable_itv_o_infty.
Qed.

Lemma measurable_itv_infty_bnd b x :
  @measurable T [set` Interval -oo%O (BSide b x)].
Proof.
case: b.
- by rewrite -set_itvC_bnd_infty; exact/measurableC/measurable_itv_bnd_infty.
- by rewrite -set_itvC_bnd_infty; exact/measurableC/measurable_itv_o_infty.
Qed.

Lemma measurable_itv_bounded a x b y :
  @measurable T [set` Interval (BSide a x) (BSide b y)].
Proof.
move: a b => [] []; rewrite -[X in measurable X]setCK set_itvC_itv;
  apply: measurableC; apply: measurableU; try solve[
    exact: measurable_itv_infty_bnd|exact: measurable_itv_bnd_infty].
Qed.

Lemma measurableEopen :
  @measurable (g_measurableType (@Sset.is_sset R)) = @measurable T.
Proof.
rewrite eqEsubset; split => A; last first.
  apply: subset_g_salgebra => B /= [x [y ->]]; exists [:: `]x, y[ ].
  by rewrite /sset big_cons big_nil setU0.
apply: g_salgebra_smallest; first exact: are_measurable_sets_g_salgebra.
move=> _ [s ->] {A}; elim: s => [|h t ih].
  by rewrite /sset big_nil; exact: measurable0.
rewrite /sset big_cons; apply: measurableU => //.
move: h => [[a x|a] [b y|b]]; move: a b => [] []; try solve[
  exact: measurable_itv_bounded | exact: measurable_itv_infty_bnd |
  exact: measurable_itv_bnd_infty | rewrite set_itvE; exact: measurable0].
- by rewrite set_itvE; exact: measurableT.
Qed.

End rgenopens.
End RGenOpens.

Section rbarwithrays.
Variable R : realType.
Implicit Types (x y z : \bar R) (r s : R).
Local Open Scope ereal_scope.

Lemma EFin_itv_bnd_infty b r : @EFin _ @` [set` Interval (BSide b r) +oo%O] =
  [set` Interval (BSide b r%:E) +oo%O] `\ +oo.
Proof.
rewrite eqEsubset; split => [x [s /itvP rs <-]|x []].
  split => //=; rewrite in_itv /=.
  by case: b in rs *; rewrite /= ?(lee_fin, lte_fin) rs.
move: x => [s|_ /(_ erefl)|] //=; rewrite in_itv /= andbT; last first.
  by case: b => /=; rewrite 1?(leNgt,ltNge) 1?(lte_ninfty,lee_ninfty).
by case: b => /=; rewrite 1?(lte_fin,lee_fin) => rs _;
  exists s => //; rewrite in_itv /= rs.
Qed.

Lemma EFin_itv r : [set s | r%:E < s%:E] = `]r, +oo[%classic.
Proof.
by rewrite predeqE => s; split => [|]; rewrite /preimage /= ?lte_fin;
  [move=> rs; rewrite in_itv /= rs | rewrite in_itv /= andbT].
Qed.

Lemma preimage_EFin_setT : @EFin R @^-1` [set x | x \in `]-oo%E, +oo[] = setT.
Proof.
by rewrite set_itvE predeqE => r; split=> // _; rewrite /preimage /= lte_ninfty.
Qed.

Lemma eitv_c_infty r : `[r%:E, +oo[%classic =
  \bigcap_k `](r - k.+1%:R^-1)%:E, +oo[%classic :> set _.
Proof.
rewrite predeqE => x; split=> [|].
- move: x => [s /=| _ n _|//].
  + rewrite in_itv /= andbT lee_fin => rs n _ /=.
    rewrite in_itv /= andbT lte_fin.
    by rewrite ltr_subl_addl (le_lt_trans rs)// ltr_addr invr_gt0.
  + by rewrite /= in_itv /= andbT lte_pinfty.
- move: x => [s| |/(_ 0%N Logic.I)] //=; last by rewrite in_itv /= lee_pinfty.
  move=> h; rewrite in_itv /= lee_fin leNgt andbT; apply/negP.
  move=> /ltr_add_invr[k skr]; have {h} := h k Logic.I.
  rewrite /= in_itv /= andbT lte_fin ltNge => /negP; apply.
  by rewrite -ler_subl_addr opprK ltW.
Qed.

Lemma eitv_infty_c r : `]-oo, r%:E]%classic =
  \bigcap_k `]-oo, (r%:E + k.+1%:R^-1%:E)]%classic :> set _.
Proof.
rewrite predeqE => x; split=> [|].
- move: x => [s /=|//|_ n _].
  + rewrite in_itv /= lee_fin => sr n _; rewrite /= in_itv /=.
    by rewrite -addEFin lee_fin (le_trans sr)// ler_addl invr_ge0.
  + by rewrite /= in_itv /= -addEFin lee_ninfty.
- move: x => [s|/(_ 0%N Logic.I)//|]/=; rewrite ?in_itv /= ?lee_ninfty//.
  move=> h; rewrite lee_fin leNgt; apply/negP => /ltr_add_invr[k rks].
  have {h} := h k Logic.I; rewrite /= in_itv /=.
  by rewrite -addEFin lee_fin leNgt => /negP; apply.
Qed.

Lemma eset1_ninfty :
  [set -oo] = \bigcap_k `]-oo, (-k%:R%:E)[%classic :> set (\bar R).
Proof.
rewrite eqEsubset; split=> [_ -> i _ |].
  by rewrite /= in_itv /= lte_ninfty.
move=> [r|/(_ O Logic.I)|]//.
move=> /(_ `|floor r|%N Logic.I); rewrite /= in_itv/= ltNge => /absurdNb; apply.
rewrite lee_fin; have [r0|r0] := leP 0%R r.
  by rewrite (le_trans _ r0) // ler_oppl oppr0 ler0n.
rewrite ler_oppl -abszN natr_absz gtr0_norm; last first.
  by rewrite ltr_oppr oppr0 floor_lt0.
by rewrite mulrNz ler_oppl opprK floor_le.
Qed.

Lemma eset1_pinfty :
  [set +oo] = \bigcap_k `]k%:R%:E, +oo[%classic :> set (\bar R).
Proof.
rewrite eqEsubset; split=> [_ -> i _/=|]; first by rewrite in_itv /= lte_pinfty.
move=> [r| |/(_ O Logic.I)] // /(_ `|ceil r|%N Logic.I); rewrite /= in_itv /=.
rewrite andbT lte_fin ltNge => /absurdNb; apply.
have [r0|r0] := ltP 0%R r; last by rewrite (le_trans r0).
by rewrite natr_absz gtr0_norm // ?ceil_ge// ceil_gt0.
Qed.

End rbarwithrays.

Module RbarGenOpenRays.
Section rbargenopenrays.
Variable R : realType.
Implicit Types (x y z : \bar R) (r s : R).

Local Open Scope ereal_scope.

Definition G := [set A : set \bar R | exists x, A = `]x, +oo[%classic].
Let T := g_measurableType G.

Lemma measurable_set1_ninfty : @measurable T [set -oo].
Proof.
rewrite eset1_ninfty; apply: (@measurable_bigcap T) => i.
rewrite -set_itvC_bnd_infty; apply: measurableC; rewrite eitv_c_infty.
apply: measurable_bigcap => j; apply: g_salgebra_self.
by exists (- (i%:R + j.+1%:R^-1))%:E; rewrite opprD.
Qed.

Lemma measurable_set1_pinfty : @measurable T [set +oo].
Proof.
rewrite eset1_pinfty; apply: measurable_bigcap => i.
by apply: g_salgebra_self; exists i%:R%:E.
Qed.

Lemma measurableEoray : measurableRbar (@Sset.is_sset R) = @measurable T.
Proof.
rewrite eqEsubset; split => A; last first.
  elim => [_ [x ->] | | |]; [|exact: measurableRbar0| |].
  - rewrite /measurableRbar /=; move: x => [r| |].
    + exists `]r, +oo[%classic.
        rewrite RGenOpenRays.measurableEoray.
        exact: RGenOpenRays.measurable_itv_bnd_infty.
      by exists [set +oo]; [constructor|rewrite -punct_eitv_bnd_pinfty].
    + exists set0; first exact: measurable0.
      by exists set0; [constructor|rewrite setU0 itv_opinfty_pinfty image_set0].
    + exists setT; first exact: measurableT.
      exists [set +oo]; first by constructor.
      by rewrite itv_oninfty_pinfty punct_eitv_setTR.
  - by move=> *; exact: measurableRbarC.
  - by move=> *; exact: measurableRbar_bigcup.
move=> [B mB [C mC]] <-; apply: measurableU; last first.
  case: mC; [exact: measurable0|exact: measurable_set1_ninfty
                               |exact: measurable_set1_pinfty|].
  - by apply: measurableU; [exact: measurable_set1_ninfty|
                            exact: measurable_set1_pinfty].
rewrite RGenOpenRays.measurableEoray in mB.
elim: mB => [_ /= [r ->]| |D sD mD|F sF mF].
- rewrite EFin_itv_bnd_infty; apply: measurableD.
    by apply g_salgebra_self => /=; exists r%:E.
  exact: measurable_set1_pinfty.
- by rewrite image_set0; exact: measurable0.
- rewrite setC_EFin; apply: measurableD; first exact: measurableC.
  by apply: measurableU; [exact: measurable_set1_ninfty|
                          exact: measurable_set1_pinfty].
- by rewrite bigcup_EFIn; apply: measurable_bigcup => i; exact: mF.
Qed.

End rbargenopenrays.
End RbarGenOpenRays.

Module RbarGenClosedRays.
Section rbargenclosedrays.
Variable R : realType.
Implicit Types (x y z : \bar R) (r s : R).
Local Open Scope ereal_scope.

Definition G := [set A : set \bar R | exists x, A = `[x, +oo[%classic].
Let T := g_measurableType G.

Lemma measurable_set1_ninfty : @measurable T [set -oo].
Proof.
rewrite eset1_ninfty; apply: measurable_bigcap=> i; rewrite -set_itvC_bnd_infty.
by apply: measurableC; apply: g_salgebra_self; exists (- i%:R)%:E.
Qed.

Lemma measurable_set1_pinfty : @measurable T [set +oo].
Proof.
apply: g_salgebra_self; exists +oo; rewrite predeqE => x; split => [->//|/=].
by rewrite in_itv /= andbT lee_pinfty_eq => /eqP ->.
Qed.

Lemma measurableEcray : measurableRbar (@Sset.is_sset R) = @measurable T.
Proof.
rewrite eqEsubset; split => A; last first.
  elim => [_ [x ->]| | |]; [|exact: measurableRbar0| |].
  - rewrite /measurableRbar /=; move: x => [r| |].
    + exists `[r, +oo[%classic.
        rewrite RGenOpenRays.measurableEoray.
        exact: RGenOpenRays.measurable_itv_bnd_infty.
      by exists [set +oo]; [constructor | rewrite -punct_eitv_bnd_pinfty].
    + exists set0; first exact: measurable0.
      exists [set +oo]; first by constructor.
      by rewrite image_set0 set0U itv_cpinfty_pinfty.
    + exists setT; first exact: measurableT.
      exists [set -oo; +oo]; first by constructor.
      by rewrite itv_cninfty_pinfty setUA punct_eitv_setTL setUCl.
    + by move=> *; exact: measurableRbarC.
    + by move=> *; exact: measurableRbar_bigcup.
move=> [A' mA' [C mC]] <-; apply: measurableU; last first.
  case: mC; [exact: measurable0|exact: measurable_set1_ninfty|
                                exact: measurable_set1_pinfty|].
  by apply: measurableU; [exact: measurable_set1_ninfty|
                          exact: measurable_set1_pinfty].
rewrite RGenClosedRays.measurableEcray in mA'.
elim: mA' => [_ /= [r ->]| |B sB mB|F sF mF].
- rewrite EFin_itv_bnd_infty; apply: measurableD.
    by apply g_salgebra_self => /=; exists r%:E.
  exact: measurable_set1_pinfty.
- by rewrite image_set0; exact: measurable0.
- rewrite setC_EFin; apply: measurableD; first exact: measurableC.
  by apply: measurableU; [exact: measurable_set1_ninfty|
                          exact: measurable_set1_pinfty].
- by rewrite bigcup_EFIn; apply: measurable_bigcup => i; exact: mF.
Qed.

End rbargenclosedrays.
End RbarGenClosedRays.

(* NB: PR 434 in progress *)
From mathcomp Require Import rat.

Lemma archimedean (R : realType) (x y : R) : 0 < x -> exists n, y < n%:R * x.
Proof.
move=> x0; have [y0|y0] := leP 0 y; last by exists 0%N; rewrite mul0r.
exists (Num.bound (y / x)); rewrite -ltr_pdivr_mulr// archi_boundP//.
by rewrite (divr_ge0 _ (ltW _)).
Qed.

Lemma int_lbound_has_inf (B : set int) i : B !=set0 -> lbound B i ->
  exists j, B j /\ forall k, B k -> j <= k.
Proof.
move=> [i0 Bi0] lbBi; have [n i0in] : exists n, i0 - i = n%:Z.
  by exists `|i0 - i|%N; rewrite gez0_abs // subr_ge0; exact: lbBi.
elim: n i lbBi i0in => [i lbBi /eqP|n ih i lbBi i0in1].
  by rewrite subr_eq0 => /eqP i0i; exists i0; split =>// k Bk; rewrite i0i lbBi.
have i0i1n : i0 - (i + 1) = n by rewrite opprD addrA i0in1 -addn1 PoszD addrK.
have [?|/not_forallP] := pselect (lbound B (i + 1)); first exact: (ih (i + 1)).
move=> /contrapT[x /not_implyP[Bx i1x]]; exists x; split => // k Bk.
rewrite (le_trans _ (lbBi _ Bk)) //.
by move/negP : i1x; rewrite -ltNge ltz_addr1.
Qed.

Lemma dense_rat (R : realType) (x y : R) : x < y -> exists q, x < ratr q < y.
Proof.
move=> xy; move: (xy); rewrite -subr_gt0 => /(archimedean 1)[n nyx].
have [m1 m1nx] : exists m1, m1.+1%:~R > n%:R * x.
  have [p] := archimedean (n%:R * x) ltr01; rewrite mulr1 => nxp.
  have [x0|x0] := ltP 0 x.
    exists p.-1; rewrite prednK // lt0n; apply: contraPN nxp => /eqP ->.
    by apply/negP; rewrite -leNgt mulr_ge0 // ltW.
  by exists O; rewrite (le_lt_trans _ ltr01) // mulr_ge0_le0.
have [m2 m2nx] : exists m2, m2.+1%:~R > - n%:R * x.
  have [p] := archimedean (- n%:R * x) ltr01; rewrite mulr1 => nxp.
  have [x0|x0] := ltP 0 x.
    by exists O; rewrite (le_lt_trans _ ltr01)// mulr_le0_ge0// ?oppr_le0// ltW.
  exists p.-1; rewrite prednK // -(ltr_nat R) (le_lt_trans _ nxp) //.
  by rewrite mulr_le0 // oppr_le0.
rewrite -(mulN1r n%:R) -mulrA mulN1r in m2nx.
have : exists m, -(m2.+1 : int) <= m <= m1.+1 /\ m%:~R - 1 <= n%:~R * x < m%:~R.
  have m2m1 : - (m2.+1 : int) < m1.+1.
    by rewrite -(ltr_int R) (lt_trans _ m1nx) // -ltr_oppl.
  pose B := [set m : int | m%:~R > n%:R * x].
  have m1B : B m1.+1 by [].
  have m2B : lbound B (- m2.+1%:~R).
    move=> i; rewrite /B /=.
    rewrite -(opprK (n%:R * x)) -ltr_oppl => nxi.
    rewrite -(mulN1r m2.+1%:~R) mulN1r -ler_oppl.
    by have := lt_trans nxi m2nx; rewrite intz -mulrNz ltr_int => /ltW.
  have [m [Bm infB]] : exists j, B j /\ forall k, B k -> j <= k.
    by apply: int_lbound_has_inf _ m2B; exists m1.+1.
  have mN1B : ~ B (m - 1).
    by move=> /infB; apply/negP; rewrite -ltNge ltr_subl_addr ltz_addr1.
  exists m; split; [apply/andP; split|apply/andP; split] => //.
  - rewrite -(ler_int R).
    move: m2B; rewrite /lbound /= => /(_ _ Bm).
    by rewrite intz -(ler_int R).
  - exact: infB.
  - by rewrite leNgt; apply/negP; rewrite /B /= intrD in mN1B.
move=> [m [/andP[H1 H2] /andP[H3 H4]]].
have [/andP[a b] c] : n%:R * x < m%:~R <= 1 + n%:R * x /\ 1 + n%:R * x < n%:R * y.
  split; [apply/andP; split|] => //.
  by rewrite -ler_subl_addl.
  by move: nyx; rewrite mulrDr mulrN-ltr_subr_addr.
have n0 : (0 < n)%N.
  rewrite lt0n; apply/negP => /eqP n0.
  by move: nyx; rewrite n0 mul0r; apply/negP; rewrite ltr10.
exists (m%:Q / n%:Q); apply/andP; split.
  rewrite rmorphM /= (@rmorphV _ _ _ n%:~R); last first.
    by rewrite unitfE // intr_eq0 // -lt0n.
  rewrite ltr_pdivl_mulr /=; last by rewrite ltr0q ltr0z.
  by rewrite mulrC // !ratr_int.
rewrite rmorphM /= (@rmorphV _ _ _ n%:~R); last first.
  by rewrite unitfE // intr_eq0 // -lt0n.
rewrite ltr_pdivr_mulr /=; last by rewrite ltr0q ltr0z.
by rewrite 2!ratr_int mulrC (le_lt_trans _ c).
Qed.
(* /NB: PR 434 in progress *)

(* NB: PR 435 in progress *)
Definition pair_of_rat (q : rat) : nat * nat :=
  let x := numq q in let y := denq q in
  (if x >= 0 then `|x|.*2 else `|x|.*2.+1, `|y|.-1).

Lemma pair_of_rat_inj : {in setT &, injective pair_of_rat}.
Proof.
move=> x y _ _; rewrite /pair_of_rat.
have [x_ge0|x_gt0] := leP 0 (numq x); have [y_ge0|y_gt0] := leP 0 (numq y).
- case=> /eqP; rewrite -!muln2 eqn_mul2r => /eqP/(congr1 Posz).
  rewrite !gez0_abs// => numqxy /(congr1 S); rewrite ?(prednK,absz_gt0)//.
  move=> /(congr1 Posz); rewrite 2!absz_denq => dxy; apply/eqP.
  by rewrite rat_eqE numqxy dxy 2!eqxx.
- by case=> /(congr1 odd); rewrite /= 2!odd_double.
- by case=> /(congr1 odd); rewrite /= 2!odd_double.
- case=> /eqP; rewrite -!muln2 eqn_mul2r => /eqP/(congr1 Posz).
  rewrite !ltz0_abs// => /eqP; rewrite eqr_opp => /eqP numqxy /(congr1 S).
  rewrite ?(prednK,absz_gt0)// => /(congr1 Posz); rewrite 2!absz_denq => dxy.
  by apply/eqP; rewrite rat_eqE numqxy dxy 2!eqxx.
Qed.

Lemma countable_rat : countable (@setT rat).
Proof.
apply/countable_injective; have [f [inj_f _]] := countable_prod_nat.
exists (f \o pair_of_rat); apply: (@in_inj_comp _ _ _ _ _ xpredT) => //.
by move=> x y _ _ /inj_f; apply; rewrite inE.
exact: pair_of_rat_inj.
Qed.

Definition nat_of_rat := nat_of_pair \o pair_of_rat.

Lemma nat_of_rat_inj : {in setT &, injective nat_of_rat}.
Proof.
apply: (in_inj_comp nat_of_pair_inj pair_of_rat_inj).
by move=> q _; rewrite in_setE.
Qed.

Definition rat_of_nat : nat -> rat := inverse 0%Q setT nat_of_rat.

Lemma nat_of_ratK : {in setT, cancel nat_of_rat rat_of_nat}.
Proof.
by apply: injective_left_inverse; exact: nat_of_rat_inj.
Qed.
(* /NB: PR 435 in progress *)

(* TODO: move to measure.v *)
Lemma measurable_bigcup_rat (T : measurableType) (F : rat -> set T) :
  (forall i, measurable (F i)) -> measurable (\bigcup_i F i).
Proof.
move=> mF.
rewrite [X in measurable X](_ : _ = \bigcup_i F (rat_of_nat i)); last first.
  rewrite predeqE => r; split => [[q _ Fqr]|[n _ Fnr]].
    exists (nat_of_rat q) => //; rewrite nat_of_ratK => //.
    by rewrite in_setE.
  by exists (rat_of_nat n).
by apply: measurable_bigcup => i; exact/mF.
Qed.

Arguments preimage : simpl never.

(* TODO: move to measure.v *)
Section measurability.

Definition preimage_class (aT rT : Type) (f : aT -> rT) (G : set (set rT))
    : set (set aT) :=
  [set f @^-1` B | B in G].

Lemma are_measurable_sets_preimage_class (aT rT : Type) (G : set (set rT))
    (f : aT -> rT) :
  are_measurable_sets G -> are_measurable_sets (preimage_class f G).
Proof.
case=> h0 hC hU; split; first by exists set0 => //; exact: h0.
- move=> A; rewrite /preimage_class /= => -[B mB <-{A}].
  by exists (~` B); [exact: hC|rewrite preimage_setC].
- move=> F; rewrite /preimage_class /= => mF.
  have {}mF : forall n, exists x, G x /\ f @^-1` x = F n.
    by move=> n; have := mF n => -[B mB <-]; by exists B.
  have [F' mF'] := @choice _ _ (fun x y => G y /\ f @^-1` y = F x) mF.
  exists (\bigcup_k (F' k)); first by apply: hU => n; exact: (mF' n).1.
  by rewrite preimage_bigcup; apply eq_bigcupr => i _; exact: (mF' i).2.
Qed.

Definition sigma_fun (aT rT : Type) (f : aT -> rT) (G : set (set aT))
    : set (set rT) :=
  [set B : set rT | G (f @^-1` B)].

Lemma are_measurable_sets_sigma_fun (aT rT : Type) (f : aT -> rT)
    (G : set (set aT)) :
  are_measurable_sets G -> are_measurable_sets (sigma_fun f G).
Proof.
move=> [H1 H2 H3]; split; rewrite /sigma_fun.
- by rewrite /= preimage_set0; exact: H1.
- by move=> A /= CCfA; rewrite -preimage_setC; exact: H2.
- by move=> F /= mF; rewrite preimage_bigcup; exact: H3.
Qed.

Lemma transfer (aT rT : Type) (f : aT -> rT) (G : set (set rT)) :
  @measurable (g_measurableType (preimage_class f G)) =
  preimage_class f (@measurable (g_measurableType G)).
Proof.
rewrite eqEsubset; split.
  have mG : are_measurable_sets
      (preimage_class f (@measurable (g_measurableType G))).
    exact/are_measurable_sets_preimage_class/are_measurable_sets_measurable.
  have subset_preimage : preimage_class f G `<=`
                         preimage_class f (@measurable (g_measurableType G)).
    by move=> A [B CCB <-{A}];  exists B => //; apply g_salgebra_self.
  exact: g_salgebra_smallest.
set If := sigma_fun f (@measurable (g_measurableType (preimage_class f G))).
have mIf : are_measurable_sets If.
  exact/are_measurable_sets_sigma_fun/are_measurable_sets_measurable.
have GIf : G `<=` If.
  by move=> B GB; rewrite /If; apply: g_salgebra_self; exists B.
have sGIf : s<< G >> `<=` If by exact: g_salgebra_smallest.
by move=> _ [B mB <-]; exact: sGIf.
Qed.

Lemma measurability (aT rT : measurableType) (f : aT -> rT) (G : set (set rT)) :
  s<< G >> = @measurable rT ->
  preimage_class f G `<=` @measurable aT ->
  measurable_fun setT f.
Proof.
move=> sG_rT fG_aT.
suff h : preimage_class f (@measurable rT) `<=` @measurable aT.
  move=> A mA; apply: measurableI => //; last exact: measurableT.
  by apply: h; exists A.
have -> : preimage_class f (@measurable rT) =
         @measurable (g_measurableType (preimage_class f G)).
  by rewrite -[in LHS]sG_rT [in RHS]transfer.
by rewrite -[X in _ `<=` X]measurable_g_measurableTypeE;
 [exact: subset_g_salgebra | exact: are_measurable_sets_measurable].
Qed.

End measurability.

(* TODO: move to reals.v *)
Lemma sup_gt (R : realType) (S : set R) (x : R) : S !=set0 ->
  x < sup S -> exists2 y, S y & x < y.
Proof.
move=> S0; rewrite not_exists2P => + g; apply/negP; rewrite -leNgt.
by apply sup_le_ub => // y Sy; move: (g y) => -[// | /negP]; rewrite leNgt.
Qed.

Lemma inf_lt (R : realType) (S : set R) (x : R) : S !=set0 ->
  inf S < x -> exists2 y, S y & y < x.
Proof.
move=> /nonemptyN S0; rewrite /inf ltr_oppl => /sup_gt => /(_ S0)[r [r' Sr']].
by move=> <-; rewrite ltr_oppr opprK => r'x; exists r'.
Qed.

Lemma hasNub_ereal_sup (R : realType) (A : set (\bar R)) : ~ has_ubound A ->
  A !=set0 -> ereal_sup A = +oo%E.
Proof.
move=> hasNubA A0.
apply/eqP; rewrite eq_le lee_pinfty /= leNgt.
apply: contra_notN hasNubA => Aoo.
by exists (ereal_sup A); exact: ereal_sup_ub.
Qed.

Lemma ereal_sup_EFin (R : realType) (A : set R) :
  has_ubound A -> A !=set0 ->
  ereal_sup (@EFin _ @` A) = (sup A)%:E.
Proof.
move=> has_ubA A0; apply/eqP; rewrite eq_le; apply/andP; split.
  by apply: ub_ereal_sup => /= y [r Ar <-{y}]; rewrite lee_fin sup_ub.
set esup := ereal_sup _; have := lee_pinfty esup.
rewrite le_eqVlt => /predU1P[->|esupoo]; first by rewrite lee_pinfty.
have := lee_ninfty esup; rewrite le_eqVlt => /predU1P[/esym|ooesup].
  case: A0 => i Ai.
  by move=> /ereal_sup_ninfty /(_ i%:E) /(_ (ex_intro2 A _ i Ai erefl)).
have esup_fin_num : esup \is a fin_num.
  rewrite fin_numE -lee_ninfty_eq -ltNge ooesup /= -lee_pinfty_eq -ltNge.
  by rewrite esupoo.
rewrite (@EFin_real_of_extended _ esup) // lee_fin leNgt.
apply/negP => /(sup_gt A0)[r Ar]; apply/negP; rewrite -leNgt.
by rewrite -lee_fin -EFin_real_of_extended//; apply: ereal_sup_ub; exists r.
Qed.

Lemma ereal_inf_EFin (R : realType) (A : set R) :
  has_lbound A -> A !=set0 ->
  ereal_inf (@EFin _ @` A) = (inf A)%:E.
Proof.
move=> has_lbA A0; rewrite /ereal_inf /inf NEFin; congr (- _)%E.
rewrite -ereal_sup_EFin; [|exact/has_lb_ubN|exact/nonemptyN].
by rewrite !image_comp.
Qed.

(* TODO: PR limit inferior and limit superior *)
Section sdrop.
Variable R : realFieldType.
Implicit Types (r : R) (u : R^o^nat).

Definition sdrop T (u : T^nat) n := [set u k | k in [set k | k >= n]]%N.

Lemma is_cvg_has_ubound_sdrop u : cvg u -> forall m, has_ubound (sdrop u m).
Proof.
move/cvg_seq_bounded => [M [Mr Mf_]] m.
exists (M + 1) => y; rewrite /sdrop /= => -[N mN <-{y}].
by rewrite (le_trans (ler_norm _))// Mf_// ltr_addl.
Qed.

Lemma is_cvg_has_lbound_sdrop u : cvg u -> forall m, has_lbound (sdrop u m).
Proof.
move/cvg_seq_bounded => [M [Mr Mf_]] m.
exists (- (M + 1)) => y; rewrite /sdrop /= => -[N mN <-{y}]; apply: lerNnormlW.
by rewrite (le_trans (ler_norm _))// normr_id Mf_// ltr_addl.
Qed.

End sdrop.

Section sups_infs.
Variable R : realType.
Implicit Types (r : R) (u : R^o^nat).

Definition sups u := [sequence sup (sdrop u n)]_n.

Definition infs u := [sequence inf (sdrop u n)]_n.

Lemma supsN u : sups (-%R \o u) = - infs u.
Proof.
rewrite funeqE => n; rewrite /sups /infs /inf /= opprK; congr (sup _).
by rewrite predeqE => x; split => [[m /= nm <-]|[_ [m /= nm] <-] <-];
  [exists (u m) => //; exists m | exists m].
Qed.

Lemma infsN u : infs (-%R \o u) = - sups u.
Proof.
apply/eqP; rewrite -eqr_oppLR -supsN; apply/eqP; congr (sups _).
by rewrite funeqE => ? /=; rewrite opprK.
Qed.

Lemma nonincreasing_sups u : (forall m, has_ubound (sdrop u m)) ->
  nonincreasing_seq (sups u).
Proof.
move=> u_ub m n mn; apply: le_sup => [_ /= [p np] <-| |].
- by apply/downP; exists (u p) => //=; exists p => //; exact: leq_trans np.
- by exists (u n) => /=; exists n => /=.
- by split => //; exists (u m); exists m => //=.
Qed.

Lemma nondecreasing_infs u : (forall m, has_lbound (sdrop u m)) ->
  nondecreasing_seq (infs u).
Proof.
move=> u_lb; rewrite -nonincreasing_opp -supsN; apply/nonincreasing_sups => n.
by have /has_lb_ubN := u_lb n; rewrite image_comp.
Qed.

Lemma is_cvg_sups u : cvg u -> cvg (sups u).
Proof.
move=> cf; have [M [Mreal Mu]] := cvg_seq_bounded cf.
apply: (@nonincreasing_is_cvg _ _ (- (M + 1))).
 exact/nonincreasing_sups/is_cvg_has_ubound_sdrop.
move=> n; rewrite (@le_trans _ _ (u n))//.
  by apply/lerNnormlW/Mu => //; rewrite ltr_addl.
by apply: sup_ub; [exact: is_cvg_has_ubound_sdrop |exists n => /=].
Qed.

Lemma is_cvg_infs u : cvg u -> cvg (infs u).
Proof.
move/is_cvgN/is_cvg_sups; rewrite supsN.
by move/(@is_cvgN _ [normedModType R of R^o]); rewrite opprK.
Qed.

Lemma infs_le_sups u n : cvg u -> infs u n <= sups u n.
Proof.
move=> cu; rewrite /infs /sups /=; set A := sdrop _ _.
have [a Aa] : A !=set0 by exists (u n); rewrite /A /=; exists n => //=.
rewrite (@le_trans _ _ a) //; [apply/inf_lb|apply/sup_ub] => //.
- exact/is_cvg_has_lbound_sdrop.
- exact/is_cvg_has_ubound_sdrop.
Qed.

Lemma cvg_sups_inf u :
  (forall n, has_ubound (sdrop u n)) -> (forall n, has_lbound (sdrop u n)) ->
  sups u --> inf [set of sups u].
Proof.
move=> u_ub u_lb; have [M Mf] := u_lb O.
apply: (@nonincreasing_cvg _ _ M); first exact: nonincreasing_sups.
move=> n; rewrite (@le_trans _ _ (u n)) //; first by apply Mf; exists n.
by apply: sup_ub; [exact: u_ub|exists n => /=].
Qed.

Lemma sups_preimage T r (f : (T -> R)^nat) n :
  (forall t, has_ubound (sdrop (f^~t) n)) ->
  (fun x => sups (f^~x) n) @^-1` `]r, +oo[%classic =
  \bigcup_(k in [set k | n <= k]%N) f k @^-1` `]r, +oo[%classic.
Proof.
move=> f_ub; rewrite predeqE => t; split => /=.
  have [|/set0P h] := eqVneq (sdrop (f^~t) n) set0; last first.
    rewrite /preimage /= in_itv /= andbT.
    move/(sup_gt h) => [y [m /= nm <-{y}]] rfmt; exists m => //.
    by rewrite /= in_itv /= rfmt.
  by move/absurd; apply; apply/eqP/set0P; exists (f n t), n => //=.
move=> -[k /= nk]; rewrite /preimage /= in_itv /= andbT.
move=> /lt_le_trans h; rewrite /preimage /= in_itv /= andbT.
by apply: h; apply: sup_ub => //; exists k.
Qed.

Lemma infs_preimage T r (f : (T -> R)^nat) n :
  (forall t, has_lbound (sdrop (f^~t) n)) ->
  (fun x => infs (f^~x) n) @^-1` `]-oo, r[%classic =
  \bigcup_(k in [set k | n <= k]%N) f k @^-1` `]-oo, r[%classic.
Proof.
move=> lb_f; rewrite predeqE => t; split => /=.
  rewrite {1}/preimage /=.
  have [|/set0P h] := eqVneq (sdrop (f^~t) n) set0; last first.
    by rewrite in_itv /= => /(inf_lt h)[y [m /= nm <-{y}]] afmt; exists m.
  move/absurd; apply; apply/eqP/set0P.
  by exists (f n t), n => //=.
move=> -[k /= nk]; rewrite /preimage /=; rewrite in_itv /= => fkta.
rewrite in_itv /=; apply: le_lt_trans fkta.
by apply/inf_lb => //; last by exists k.
Qed.

End sups_infs.

Section lim_sup_lim_inf.
Variable R : realType.
Implicit Types (r : R) (u : R^o^nat).

Definition lim_sup u := lim (sups u).

Definition lim_inf u := lim (infs u).

Lemma lim_infN u : cvg u -> lim_inf (-%R \o u) = - lim_sup u.
Proof.
move=> cu_; rewrite /lim_inf infsN.
rewrite (@limN _ [normedModType R of R^o] _ _ _ (sups u)) //.
exact: is_cvg_sups.
Qed.

Lemma lim_inf_le_lim_sup u : cvg u -> lim_inf u <= lim_sup u.
Proof.
move=> cf_; apply: ler_lim; [exact: is_cvg_infs|exact: is_cvg_sups|].
by apply: nearW => n; apply: infs_le_sups.
Qed.

Lemma cvg_lim_inf_sup u l : u --> l -> (lim_inf u = l) * (lim_sup u = l).
Proof.
move=> ul.
have /cvg_seq_bounded [M [Mr Mu]] : cvg u by apply/cvg_ex; eexists; exact: ul.
have u_ub m : has_ubound (sdrop u m).
  by apply/is_cvg_has_ubound_sdrop/cvg_ex; eexists; exact: ul.
have u_lb m : has_lbound (sdrop u m).
  by apply/is_cvg_has_lbound_sdrop/cvg_ex; eexists; exact: ul.
suff : lim_sup u <= l <= lim_inf u.
  move=> /andP[sul liu].
  have /lim_inf_le_lim_sup iusu : cvg u by apply/cvg_ex; eexists; exact: ul.
  split; first by apply/eqP; rewrite eq_le liu andbT (le_trans iusu).
  by apply/eqP; rewrite eq_le sul /= (le_trans _ iusu).
apply/andP; split.
- apply/ler_addgt0Pr => e e0.
  apply: lim_le; first by apply: is_cvg_sups; apply/cvg_ex; exists l.
  move/cvg_distP : (ul) => /(_ _ e0); rewrite near_map => -[k _ klu].
  near=> n; have kn : (k <= n)%N by near: n; exists k.
  apply: sup_le_ub; first by exists (u n) => /=; exists n => //=.
  move=> _ /= [m nm] <-; apply/ltW/ltr_distl_addr; rewrite distrC.
  by apply: (klu m) => /=; rewrite (leq_trans kn).
- apply/ler_addgt0Pr => e e0; rewrite -ler_subl_addr.
  apply: lim_ge; first by apply: is_cvg_infs; apply/cvg_ex; exists l.
  move/cvg_distP : (ul) => /(_ _ e0); rewrite near_map => -[k _ klu].
  near=> n; have kn: (k <= n)%N by near: n; exists k.
  apply: lb_le_inf; first by exists (u n) => /=; exists n => //=.
  move=> _ /= [m nm] <-; apply/ltW/ltr_distl_subl.
  by apply: (klu m) => /=; rewrite (leq_trans kn).
Grab Existential Variables. all: end_near. Qed.

Lemma cvg_sups u l : u --> l -> (sups u) --> (l : R^o).
Proof.
move=> ul; have [iul <-] := cvg_lim_inf_sup ul.
have cu : cvg u by apply/cvg_ex; eexists; apply: ul.
have /cvg_ex[l' sul'] := is_cvg_sups cu.
by move/cvg_lim : (sul') ; rewrite /lim_sup => ->//; exact: Rhausdorff.
Qed.

Lemma cvg_infs u l : u --> l -> (infs u) --> (l : R^o).
Proof.
move=> ul; have [<- iul] := cvg_lim_inf_sup ul.
have cu : cvg u by apply/cvg_ex; eexists; apply: ul.
have /cvg_ex[l' sul'] := is_cvg_infs cu.
by move/cvg_lim : (sul') ; rewrite /lim_inf => ->//; exact: Rhausdorff.
Qed.

End lim_sup_lim_inf.

Section esups_einfs.
Variable R : realType.
Implicit Types (u : (\bar R)^nat).
Local Open Scope ereal_scope.

Definition esups u := [sequence ereal_sup (sdrop u n)]_n.

Definition einfs u := [sequence ereal_inf (sdrop u n)]_n.

Lemma esupsN u : esups (-%E \o u) = -%E \o einfs u.
Proof.
rewrite funeqE => n; rewrite /esups /= oppeK; congr (ereal_sup _).
by rewrite predeqE => x; split => [[m /= nm <-]|[_ [m /= nm] <-] <-];
  [exists (u m) => //; exists m | exists m].
Qed.

Lemma einfsN u : einfs (-%E \o u) = -%E \o esups u.
Proof.
by rewrite [in RHS](_ : u = -%E \o -%E \o u);
  rewrite ?esupsN funeqE => n /=; rewrite oppeK.
Qed.

Lemma nonincreasing_esups u : nonincreasing_seq (esups u).
Proof.
move=> m n mn; apply: le_ereal_sup => _ /= [k nk <-]; exists k => //=.
by rewrite (leq_trans mn).
Qed.

Lemma nondecreasing_einfs u : nondecreasing_seq (einfs u).
Proof.
move=> m n mn; apply: le_ereal_inf => _ /= [k nk <-]; exists k => //=.
by rewrite (leq_trans mn).
Qed.

Lemma ereal_inf_sup_sdrop u n : einfs u n <= esups u n.
Proof.
rewrite /einfs /=; set A := sdrop _ _; have [a Aa] : A !=set0.
  by exists (u n); rewrite /A /=; exists n => //=.
by rewrite (@le_trans _ _ a) //; [exact/ereal_inf_lb|exact/ereal_sup_ub].
Grab Existential Variables. all: end_near. Qed.

Lemma is_cvg_esups u : cvg (esups u).
Proof.
apply: ereal_nonincreasing_is_cvg => n m nm; apply: le_ereal_sup.
by move => _ [p /= np <-]; exists p => //=; rewrite (leq_trans _ np).
Qed.

Lemma is_cvg_einfs u : cvg (einfs u).
Proof.
apply: ereal_nondecreasing_is_cvg => n m nm; apply: le_ereal_inf.
by move => _ [p /= np <-]; exists p => //=; rewrite (leq_trans _ np).
Qed.

Lemma esups_preimage T (a : \bar R) (f : (T -> \bar R)^nat) n :
  (fun x => esups (f^~x) n) @^-1` `]a, +oo[ =
  \bigcup_(k in [set k | n <= k]%N) f k @^-1` `]a, +oo[.
Proof.
rewrite predeqE => t; split => /=.
  rewrite /preimage /= in_itv /= andbT.
  move=> /ereal_sup_gt(* TODO: use ex2 for this lemma*)[? [/= [k nk <-]]] afnt.
  by exists k => //=; rewrite in_itv /= afnt.
move=> -[k /= nk] /=; rewrite /preimage /= in_itv /= andbT => /lt_le_trans afkt.
by rewrite in_itv andbT /=; apply afkt; apply: ereal_sup_ub; exists k.
Qed.

Lemma einfs_preimage T (a : \bar R) (f : (T -> \bar R)^nat) n :
  (fun x => einfs (f^~x) n) @^-1` `[a, +oo[%classic =
  \bigcap_(k in [set k | n <= k]%N) f k @^-1` `[a, +oo[%classic.
Proof.
rewrite predeqE => t; split => /= [|h].
  rewrite /preimage /= in_itv andbT /= => h k nk /=.
  by rewrite in_itv /= (le_trans h) //; apply ereal_inf_lb; exists k.
rewrite /preimage /= in_itv /= andbT leNgt; apply/negP.
move=> /ereal_inf_lt[y /= [[k nk <-{y}]]]; apply/negP.
by have := h _ nk; rewrite /= /preimage /= in_itv /= andbT -leNgt.
Qed.

End esups_einfs.

Section lim_ereal_sup_lim_ereal_inf.
Variable R : realType.
Implicit Types (u : (\bar R)^nat) (l : \bar R).
Local Open Scope ereal_scope.

Definition lim_ereal_sup u := lim (esups u).

Definition lim_ereal_inf u := lim (einfs u).

Lemma lim_ereal_infN u : lim_ereal_inf (-%E \o u) = - lim_ereal_sup u.
Proof.
rewrite /lim_ereal_inf einfsN /lim_ereal_sup ereal_limN //.
exact/is_cvg_esups.
Qed.

Lemma lim_ereal_supN u : lim_ereal_sup (-%E \o u) = - lim_ereal_inf u.
Proof.
apply/eqP; rewrite -eqe_oppLR -lim_ereal_infN /=.
by rewrite (_ : _ \o _ = u) // funeqE => n /=; rewrite oppeK.
Qed.

Lemma lim_ereal_inf_sup u : lim_ereal_inf u <= lim_ereal_sup u.
Proof.
apply: lee_lim.
- exact/ereal_nondecreasing_is_cvg/nondecreasing_einfs.
- exact/ereal_nonincreasing_is_cvg/nonincreasing_esups.
- by apply: nearW; exact: ereal_inf_sup_sdrop.
Qed.

Lemma cvg_ereal_sup_ninfty u : u --> -oo ->
  (lim_ereal_inf u = -oo) * (lim_ereal_sup u = -oo).
Proof.
move=> unoo; suff : lim_ereal_sup u = -oo.
  move=> {}unoo; split => //; apply/eqP.
  by rewrite -lee_ninfty_eq -unoo lim_ereal_inf_sup.
apply/cvg_lim => //=; apply/ereal_cvgPninfty => M M0.
move: unoo => /ereal_cvgPninfty /(_ _ M0)[m _ h].
near=> n; apply ub_ereal_sup => _ [k /= nk] <-.
by apply h => /=; rewrite (leq_trans _ nk) //; near: n; exists m.
Grab Existential Variables. all: end_near. Qed.

Lemma cvg_ninfty_einfs u : u --> -oo -> einfs u --> -oo.
Proof.
move=> /cvg_ereal_sup_ninfty[uoo _]; have /cvg_ex[l ul] := @is_cvg_einfs _ u.
by have <- : l = -oo by rewrite -uoo; apply/esym/cvg_lim.
Qed.

Lemma cvg_ninfty_esups u : u --> -oo -> esups u --> -oo.
Proof.
move=> /cvg_ereal_sup_ninfty[_ uoo]; have /cvg_ex[l ul] := @is_cvg_esups _ u.
by have <- : l = -oo by rewrite -uoo; apply/esym/cvg_lim.
Qed.

Lemma cvg_pinfty_einfs u : u --> +oo -> einfs u --> +oo.
Proof.
move=> /ereal_cvgN/cvg_ninfty_esups/ereal_cvgN; rewrite esupsN.
apply: cvg_trans; rewrite (_ : _ \o (_ \o _) = einfs u) //.
by rewrite funeqE => n /=; rewrite oppeK.
Qed.

Lemma cvg_pinfty_esups u : u --> +oo -> esups u --> +oo.
Proof.
move=> /ereal_cvgN/cvg_ninfty_einfs/ereal_cvgN; rewrite einfsN.
apply: cvg_trans; rewrite (_ : _ \o (_ \o _) = esups u) //.
by rewrite funeqE => n /=; rewrite oppeK.
Qed.

Lemma cvg_esups u l : u --> l -> esups u --> l.
Proof.
case: l => [l /ereal_cvg_real[u_fin_num] ul| |]; last 2 first.
  - exact: cvg_pinfty_esups.
  - exact: cvg_ninfty_esups.
have [p _ pu] := u_fin_num; apply/cvg_ballP => _/posnumP[e].
have : @EFin R \o sups (real_of_extended \o u) --> l%:E.
  by apply: continuous_cvg => //; apply: cvg_sups.
move=> /cvg_ballP /(_ e%:num (posnum_gt0 _))[q _ qsupsu].
rewrite near_simpl; near=> n.
have -> : esups u n = (@EFin R \o sups (real_of_extended \o u)) n.
  rewrite /= -ereal_sup_EFin; last 2 first.
    - by apply: is_cvg_has_ubound_sdrop; apply/cvg_ex; eexists; exact: ul.
    - by eexists; rewrite /sdrop /=; exists n; [|reflexivity].
  congr (ereal_sup _).
  rewrite predeqE => y; split=> [[m /= nm <-{y}]|[r [m /= nm <-{r} <-{y}]]].
    have /pu : (p <= m)%N by rewrite (leq_trans _ nm) //; near: n; exists p.
    move=> /EFin_real_of_extended umE.
    by eexists; [exists m|exact/esym/umE].
  have /pu : (p <= m)%N by rewrite (leq_trans _ nm) //; near: n; exists p.
  move=> /EFin_real_of_extended umE.
  by exists m => //; exact/umE.
by apply: qsupsu => /=; near: n; exists q.
Grab Existential Variables. all: end_near. Qed.

Lemma cvg_einfs u l : u --> l -> einfs u --> l.
Proof.
move=> /ereal_cvgN/cvg_esups/ereal_cvgN; rewrite oppeK esupsN.
by rewrite (_ : _ \o (_ \o _) = einfs u) // funeqE => n /=; rewrite oppeK.
Qed.

Lemma cvg_lim_ereal_inf_lim_ereal_sup u l :
  u --> l -> (lim_ereal_inf u = l) * (lim_ereal_sup u = l).
Proof.
by move=> ul; split; apply/cvg_lim => //; [apply/cvg_einfs|apply/cvg_esups].
Qed.

Lemma is_cvg_lim_ereal_infE u : cvg u -> lim_ereal_inf u = lim_ereal_sup u.
Proof. by move=> /cvg_ex[l] /cvg_lim_ereal_inf_lim_ereal_sup[-> ->]. Qed.

End lim_ereal_sup_lim_ereal_inf.

(* TODO: move to measure.v *)
Lemma measurable_bigcap_bounded (T : measurableType) (F : (set T)^nat) n :
  (forall i, (n <= i)%N -> measurable (F i)) ->
  measurable (\bigcap_(i in [set k | n <= k]%N) F i).
Proof.
move=> mF.
rewrite [X in measurable X](_ : _ = (\bigcap_i F (i + n)%N)).
  by apply: measurable_bigcap => i; apply mF; rewrite leq_addl.
rewrite eqEsubset; split => [t h i _|t h k /= nk].
  by apply h => /=; rewrite leq_addl.
by rewrite -(subnK nk); apply h.
Qed.

Lemma measurable_bigcup_bounded (T : measurableType) (F : (set T)^nat) n:
  (forall i, (n <= i)%N -> measurable (F i)) ->
  measurable (\bigcup_(i in [set k | n <= k]%N) F i).
Proof.
move=> mF.
rewrite -[X in measurable X]setCK; apply: measurableC; rewrite setC_bigcup.
by apply: measurable_bigcap_bounded => i ni; apply: measurableC; apply: mF.
Qed.

(* TODO: PR the properties of measurable functions to measure.v *)
Section measurable_fun.
Implicit Types T : measurableType.

Lemma measurable_fun_comp T1 T2 T3 (f : T2 -> T3) E (g : T1 -> T2) :
  measurable_fun setT f -> measurable_fun E g -> measurable_fun E (f \o g).
Proof.
move=> mf mg /= A mA; rewrite comp_preimage; apply/mg.
by rewrite -[X in measurable X]setIT; apply/mf.
Qed.

Lemma measurable_fun_ereal_inf T (R : realType)
    (f : (T -> \bar R) ^nat) : (forall n, measurable_fun setT (f n)) ->
  forall n, measurable_fun setT (fun x => ereal_inf (sdrop (f^~x) n)).
Proof.
move=> mf n.
apply: (@measurability _ _ _ (@RbarGenClosedRays.G R)).
  exact/esym/RbarGenClosedRays.measurableEcray.
move=> A [B [x ->] <-].
rewrite einfs_preimage; apply: measurable_bigcap_bounded => i ni.
rewrite -[X in measurable X](setIT _); apply: mf => //.
exact: measurable_Rbar_bnd_pinfty.
Qed.

Lemma measurable_fun_ereal_sup T (R : realType)
    (f : (T -> \bar R)^nat) : (forall n, measurable_fun setT (f n)) ->
  forall n, measurable_fun setT (fun x => ereal_sup (sdrop (f^~x) n)).
Proof.
move=> mf n.
apply: (@measurability _ _ _ (@RbarGenOpenRays.G R)).
  exact/esym/RbarGenOpenRays.measurableEoray.
move=> A [B [x ->] <-].
rewrite esups_preimage; apply: measurable_bigcup_bounded => i ni.
rewrite -[X in measurable X](setIT _); apply: mf => //.
exact: measurable_Rbar_bnd_pinfty.
Qed.

Lemma measurable_fun_EFin (R : realType) : measurable_fun setT (@EFin R).
Proof.
apply: (@measurability _ _ _ (@RbarGenOpenRays.G R));
  [ exact/esym/RbarGenOpenRays.measurableEoray | ].
move=> /= A [_ [x ->]] <-; move: x => [x| |].
- by rewrite preimage_itv_o_infty EFin_itv; exact: measurable_itv.
- by rewrite [X in measurable X](_ : _ = set0) ?predeqE//; exact: measurable0.
- by rewrite preimage_EFin_setT; exact: measurableT.
Qed.

Lemma measurable_fun_normr (R : realType) : measurable_fun setT (@normr _ R).
Proof.
apply: (@measurability _ _ _ (@RGenOpenRays.G R));
  [ exact/esym/RGenOpenRays.measurableEoray | ].
move=> /= _ [_ [x ->] <-].
have [x0|x0] := leP 0 x.
  rewrite [X in measurable X](_ : _ = `]-oo, (- x)[%classic `|` `]x, +oo[%classic).
  by apply: measurableU; exact/measurable_itv.
  rewrite predeqE => r; split => [|[|]]; rewrite /preimage /= ?in_itv/= ?andbT.
  - have [r0|r0] := leP 0 r; [rewrite ger0_norm|rewrite ltr0_norm] => // xr.
    + by right.
    + by left; rewrite ltr_oppr.
  - move=> rx /=.
    by rewrite ler0_norm 1?ltr_oppr// (le_trans (ltW rx))// ler_oppl oppr0.
  - by move=> xr; rewrite (lt_le_trans _ (ler_norm _)).
rewrite [X in measurable X](_ : _ = setT); first exact: measurableT.
rewrite predeqE => r; split => // _; rewrite /preimage /=.
by rewrite in_itv /= andbT (lt_le_trans x0).
Qed.

Lemma measurable_funD T (R : realType) (f g : T -> R) :
  measurable_fun setT f -> measurable_fun setT g ->
  measurable_fun setT (f \+ g).
Proof.
move=> mf mg; apply: (@measurability _ _ _ (@RGenOpenRays.G R));
  [ exact/esym/RGenOpenRays.measurableEoray | move=> /= A [B [a ->] <-] ].
rewrite preimage_itv_o_infty [X in measurable X](_ : _ = \bigcup_(r : rat)
  ([set x | ratr r < f x] `&` [set x | a - ratr r < g x])).
  apply: measurable_bigcup_rat => q; apply: measurableI.
  - rewrite -preimage_itv_o_infty -[X in measurable X]setIT.
    exact/mf/measurable_itv.
  - rewrite -preimage_itv_o_infty -[X in measurable X]setIT.
    exact/mg/measurable_itv.
rewrite predeqE => x; split => [|[r _] []/= rf] /=.
  rewrite -ltr_subl_addr => /dense_rat[r /andP[ar rfg]].
  by exists r => //; split => //=; rewrite ltr_subl_addr addrC -ltr_subl_addr.
by rewrite ltr_subl_addr => afg; rewrite (lt_le_trans afg)// addrC ler_add2r ltW.
Qed.

Lemma measurable_fun_cst T (R : realType) (r : R) :
  measurable_fun setT (cst r : T -> R).
Proof.
move=> A mA; rewrite setIT; have [rA|rA] := boolP (r \in A).
- rewrite [X in measurable X](_ : _ = setT); first exact: measurableT.
  by rewrite predeqE /preimage => t; split => //= _; rewrite -in_setE.
- rewrite [X in measurable X](_ : _ = set0); first exact: measurable0.
  by rewrite predeqE /preimage => t; split => //=; rewrite -in_setE (negbTE rA).
Qed.

Lemma measurable_funK T (R : realType) (f : T -> R) (k : R):
  measurable_fun setT f -> measurable_fun setT (fun x => k * f x).
Proof.
have [-> _|] := eqVneq k 0.
  rewrite (_ : (fun _ => _) = cst 0); first exact: measurable_fun_cst.
  by rewrite funeqE// => t; rewrite mul0r.
rewrite neq_lt => /orP[k0|k0] mf;
  (apply: (@measurability _ _ _ (@RGenOpenRays.G R));
  [ exact/esym/RGenOpenRays.measurableEoray | move=> /= A [B [a ->] <-] ]).
- rewrite preimage_itv_o_infty.
  rewrite [X in measurable X](_ : _ = f @^-1` [set x | x < a / k]); last first.
    rewrite predeqE => t; rewrite /preimage /=; split => [|] akft.
      by rewrite ltr_ndivl_mulr// mulrC.
    by rewrite mulrC -ltr_ndivl_mulr.
  rewrite -[X in measurable X]setIT; apply: mf.
  by rewrite -(set_itv_infty_o (a / k)); exact/measurable_itv.
- rewrite preimage_itv_o_infty.
  rewrite [X in measurable X](_ : _ = f @^-1` [set x | a / k < x]); last first.
    rewrite predeqE => t; rewrite /preimage /=; split => [|] akft.
      by rewrite ltr_pdivr_mulr// mulrC.
    by rewrite mulrC -ltr_pdivr_mulr.
  rewrite -[X in measurable X]setIT; apply: mf.
  by rewrite -(set_itv_o_infty (a / k)); exact/measurable_itv.
Qed.

Lemma measurable_funN T (R : realType) (f : T -> R) :
  measurable_fun setT f -> measurable_fun setT (fun x => - f x).
Proof.
by move=> mf; under eq_fun do rewrite -mulN1r; exact: measurable_funK.
Qed.

Lemma measurable_fun_sup T (R : realType) (f : (T -> R)^nat) n :
  (forall t, has_ubound (sdrop (f^~t) n)) ->
  (forall m, measurable_fun setT (f m)) ->
  measurable_fun setT (fun x => sup (sdrop (f^~x) n)).
Proof.
move=> f_ub mf; apply: (@measurability T _ _ (@RGenOpenRays.G R)).
  exact/esym/RGenOpenRays.measurableEoray.
move=> A [B [x ->] <-].
rewrite sups_preimage //; apply: measurable_bigcup_bounded => i ni.
rewrite -[X in measurable X](setIT _); apply: mf => //.
exact: measurable_itv.
Qed.

Lemma measurable_fun_inf T (R : realType)
  (f : (T -> R)^nat) (mf : forall n, measurable_fun setT (f n)) :
  (forall n t, has_lbound (sdrop (f^~t) n)) ->
  forall n, measurable_fun setT (fun x => inf (sdrop (f^~x) n)).
Proof.
move=> lb_f n.
apply: (@measurability _ _ _ (@RGenClosedRays.G R)).
  exact/esym/RGenClosedRays.measurableEcray.
move=> A [B [x ->] <-]; rewrite -[X in measurable X]setCK; apply: measurableC.
rewrite preimage_setC set_itvC infs_preimage //.
apply: measurable_bigcup_bounded => i ni.
rewrite -[X in measurable X](setIT _); apply: mf.
exact: measurable_itv.
Qed.

Lemma measurable_fun_lim_sup T (R : realType) (f : (T -> R)^nat) :
  (forall n t, has_ubound (sdrop (f^~t) n)) ->
  (forall n t, has_lbound (sdrop (f^~t) n)) ->
  (forall n, measurable_fun setT (f n)) ->
  measurable_fun setT (fun x => lim_sup (f^~x)).
Proof.
move=> f_ub f_lb mf.
rewrite (_ :  (fun _ => _) =
    (fun x => inf [set sups (f^~ x) n | n in [set n | n >= 0]%N])).
  apply: measurable_fun_inf.
    by move=> k; exact: measurable_fun_sup.
  move=> n t; have [M hM] := f_lb n t; exists M => _ [m /= nm <-].
  rewrite (@le_trans _ _ (f m t)) //; first by apply hM => /=; exists m.
  apply: sup_ub; first by apply f_ub.
  by exists m => //=.
rewrite funeqE => t; apply/cvg_lim.
  exact: Rhausdorff.
rewrite [X in _ --> X](_ : _ = inf [set of sups (f^~t)]).
  exact: cvg_sups_inf.
by congr (inf [set _ | _ in _]); rewrite predeqE.
Qed.

Lemma measurable_fun_norme (R : realType) : measurable_fun setT (@norme R).
Proof.
apply: (@measurability _ _ _ (@RbarGenOpenRays.G R));
  [ exact/esym/RbarGenOpenRays.measurableEoray | ].
move=> /= _ [_ [x ->] <-]; move: x => [x| |].
- rewrite [X in _ @^-1` X](punct_eitv_bnd_pinfty _ x) preimage_setU.
  apply: measurableU; last first.
    rewrite [X in measurable X](_ : _ = [set -oo; +oo]%E).
      by apply: measurableU; exact: measurable_Rbar_set1.
    rewrite predeqE => y; split; rewrite /preimage /=; move: y => [y//| |]//=;
    [by right | by left | by case].
    exists (normr @^-1` `]x, +oo[%classic).
    rewrite -[X in measurable X]setIT; apply: measurable_fun_normr.
    exact: measurable_itv.
  exists set0; first by constructor.
  rewrite setU0 predeqE => -[y| |]; split => /=; rewrite /preimage /= => -[r];
    rewrite ?in_itv/= andbT => xr//.
  + by move=> [ry]; exists `|y| => //; rewrite in_itv/= andbT -ry.
  + by move=> [ry]; exists y => //; rewrite in_itv/= andbT -ry.
- by rewrite itv_opinfty_pinfty preimage_set0; exact: measurable0.
- rewrite itv_oninfty_pinfty -preimage_setC; apply: measurableC.
  rewrite [X in measurable X](_ : _ = set0); first exact: measurable0.
  rewrite predeqE => t; split => //=; rewrite /preimage /=; apply/eqP.
  by rewrite gt_eqF// (lt_le_trans _ (norme_ge0 t))// lte_ninfty.
Qed.

Lemma EFin_measurable_fun T (R : realType) (g : T -> R) (D : set T) :
  measurable_fun D (@EFin _ \o g) -> measurable_fun D g.
Proof.
move=> mf A mA; rewrite [X in measurable X](_ : _ =
    (@EFin _ \o g) @^-1` (@EFin _ @` A) `&` D).
  by apply: mf; exists A => //; exists set0; [constructor|rewrite setU0].
rewrite predeqE => x; split; rewrite /preimage /=.
  by move=> [/= Agx Dx]; split => //=; exists (g x).
by move=> [/= [r Ar [rgx]]] Dx; split => //=; rewrite -rgx.
Qed.

Lemma measurable_fun_cvg T (R : realType) (f_ : (T -> R)^nat) (f : T -> R) :
  (forall m, measurable_fun setT (f_ m)) ->
  (forall x, f_^~x --> f x) ->
  measurable_fun setT f.
Proof.
move=> mf_ f_f; have fE x : f x = lim_sup (f_^~ x).
  have /cvg_lim  <-// := (@cvg_sups _ (f_^~x) (f x) (f_f x)).
  exact: Rhausdorff.
rewrite (_ : f = (fun x => lim_sup (f_^~x))) ?funeqE//.
apply: (@measurable_fun_lim_sup _ _ f_) => // n t.
- by apply/is_cvg_has_ubound_sdrop/cvg_ex; eexists; exact: (f_f t).
- by apply/is_cvg_has_lbound_sdrop/cvg_ex; eexists; exact: (f_f t).
Qed.

End measurable_fun.
